diff --git a/release/src-rt/linux/linux-2.6/drivers/usb/core/driver.c b/release/src-rt/linux/linux-2.6/drivers/usb/core/driver.c
index 7097ae88bc..c3d5089fd3 100644
--- a/release/src-rt/linux/linux-2.6/drivers/usb/core/driver.c
+++ b/release/src-rt/linux/linux-2.6/drivers/usb/core/driver.c
@@ -426,14 +426,15 @@ int usb_match_one_id(struct usb_interface *interface,
 	if (!usb_match_device(dev, id))
 		return 0;
 
-	/* The interface class, subclass, and protocol should never be
+	/* The interface class, subclass, protocol and number should never be
 	 * checked for a match if the device class is Vendor Specific,
 	 * unless the match record specifies the Vendor ID. */
 	if (dev->descriptor.bDeviceClass == USB_CLASS_VENDOR_SPEC &&
 			!(id->match_flags & USB_DEVICE_ID_MATCH_VENDOR) &&
 			(id->match_flags & (USB_DEVICE_ID_MATCH_INT_CLASS |
 				USB_DEVICE_ID_MATCH_INT_SUBCLASS |
-				USB_DEVICE_ID_MATCH_INT_PROTOCOL)))
+				USB_DEVICE_ID_MATCH_INT_PROTOCOL |
+				USB_DEVICE_ID_MATCH_INT_NUMBER)))
 		return 0;
 
 	if ((id->match_flags & USB_DEVICE_ID_MATCH_INT_CLASS) &&
@@ -448,6 +449,10 @@ int usb_match_one_id(struct usb_interface *interface,
 	    (id->bInterfaceProtocol != intf->desc.bInterfaceProtocol))
 		return 0;
 
+	if ((id->match_flags & USB_DEVICE_ID_MATCH_INT_NUMBER) &&
+	    (id->bInterfaceNumber != intf->desc.bInterfaceNumber))
+		return 0;
+
 	return 1;
 }
 EXPORT_SYMBOL_GPL(usb_match_one_id);
diff --git a/release/src-rt/linux/linux-2.6/drivers/usb/core/message.c b/release/src-rt/linux/linux-2.6/drivers/usb/core/message.c
index 02e7ca4624..0f9df72a10 100644
--- a/release/src-rt/linux/linux-2.6/drivers/usb/core/message.c
+++ b/release/src-rt/linux/linux-2.6/drivers/usb/core/message.c
@@ -1447,7 +1447,7 @@ static int usb_if_uevent(struct device *dev, char **envp, int num_envp,
 	if (add_uevent_var(envp, num_envp, &i,
 		   buffer, buffer_size, &length,
 		   "MODALIAS=usb:"
-		   "v%04Xp%04Xd%04Xdc%02Xdsc%02Xdp%02Xic%02Xisc%02Xip%02X",
+		   "v%04Xp%04Xd%04Xdc%02Xdsc%02Xdp%02Xic%02Xisc%02Xip%02Xin%02X",
 		   le16_to_cpu(usb_dev->descriptor.idVendor),
 		   le16_to_cpu(usb_dev->descriptor.idProduct),
 		   le16_to_cpu(usb_dev->descriptor.bcdDevice),
@@ -1456,7 +1456,8 @@ static int usb_if_uevent(struct device *dev, char **envp, int num_envp,
 		   usb_dev->descriptor.bDeviceProtocol,
 		   alt->desc.bInterfaceClass,
 		   alt->desc.bInterfaceSubClass,
-		   alt->desc.bInterfaceProtocol))
+		   alt->desc.bInterfaceProtocol,
+		   alt->desc.bInterfaceNumber))
 		return -ENOMEM;
 
 	envp[i] = NULL;
diff --git a/release/src-rt/linux/linux-2.6/drivers/usb/core/sysfs.c b/release/src-rt/linux/linux-2.6/drivers/usb/core/sysfs.c
index 5a15a9a4fb..895c9ad2f3 100644
--- a/release/src-rt/linux/linux-2.6/drivers/usb/core/sysfs.c
+++ b/release/src-rt/linux/linux-2.6/drivers/usb/core/sysfs.c
@@ -715,7 +715,7 @@ static ssize_t show_modalias(struct device *dev,
 	alt = intf->cur_altsetting;
 
 	return sprintf(buf, "usb:v%04Xp%04Xd%04Xdc%02Xdsc%02Xdp%02X"
-			"ic%02Xisc%02Xip%02X\n",
+			"ic%02Xisc%02Xip%02Xin%02X\n",
 			le16_to_cpu(udev->descriptor.idVendor),
 			le16_to_cpu(udev->descriptor.idProduct),
 			le16_to_cpu(udev->descriptor.bcdDevice),
@@ -724,7 +724,8 @@ static ssize_t show_modalias(struct device *dev,
 			udev->descriptor.bDeviceProtocol,
 			alt->desc.bInterfaceClass,
 			alt->desc.bInterfaceSubClass,
-			alt->desc.bInterfaceProtocol);
+			alt->desc.bInterfaceProtocol,
+			alt->desc.bInterfaceNumber);
 }
 static DEVICE_ATTR(modalias, S_IRUGO, show_modalias, NULL);
 
diff --git a/release/src-rt/linux/linux-2.6/scripts/mod/file2alias.c b/release/src-rt/linux/linux-2.6/scripts/mod/file2alias.c
index 40d1f2eef0..541a756ac9 100644
--- a/release/src-rt/linux/linux-2.6/scripts/mod/file2alias.c
+++ b/release/src-rt/linux/linux-2.6/scripts/mod/file2alias.c
@@ -69,7 +69,7 @@ static void device_id_size_check(const char *modname, const char *device_id,
 }
 
 /* USB is special because the bcdDevice can be matched against a numeric range */
-/* Looks like "usb:vNpNdNdcNdscNdpNicNiscNipN" */
+/* Looks like "usb:vNpNdNdcNdscNdpNicNiscNipNinN" */
 static void do_usb_entry(struct usb_device_id *id,
 			 unsigned int bcdDevice_initial, int bcdDevice_initial_digits,
 			 unsigned char range_lo, unsigned char range_hi,
@@ -110,6 +110,9 @@ static void do_usb_entry(struct usb_device_id *id,
 	ADD(alias, "ip",
 	    id->match_flags&USB_DEVICE_ID_MATCH_INT_PROTOCOL,
 	    id->bInterfaceProtocol);
+	ADD(alias, "in",
+	    id->match_flags&USB_DEVICE_ID_MATCH_INT_NUMBER,
+	    id->bInterfaceNumber);
 
 	/* Always end in a wildcard, for future extension */
 	if (alias[strlen(alias)-1] != '*')
