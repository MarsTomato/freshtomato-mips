--- mysql/cmake/ssl.cmake
+++ mysql/cmake/ssl.cmake
@@ -13,11 +13,34 @@
 # along with this program; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 
+# We support different versions of SSL:
+# - "bundled" uses source code in <source dir>/extra/yassl
+# - "system"  (typically) uses headers/libraries in /usr/lib and /usr/lib64
+# - a custom installation of openssl can be used like this
+#     - cmake -DCMAKE_PREFIX_PATH=</path/to/custom/openssl> -DWITH_SSL="system"
+#   or
+#     - cmake -DWITH_SSL=</path/to/custom/openssl>
+#
+# The default value for WITH_SSL is "bundled"
+# set in cmake/build_configurations/feature_set.cmake
+#
+# For custom build/install of openssl, see the accompanying README and
+# INSTALL* files. When building with gcc, you must build the shared libraries
+# (in addition to the static ones):
+#   ./config --prefix=</path/to/custom/openssl> --shared; make; make install
+# On some platforms (mac) you need to choose 32/64 bit architecture.
+# Build/Install of openssl on windows is slightly different: you need to run
+# perl and nmake. You might also need to
+#   'set path=</path/to/custom/openssl>\bin;%PATH%
+# in order to find the .dll files at runtime.
+
 SET(WITH_SSL_DOC "bundled (use yassl)")
 SET(WITH_SSL_DOC
   "${WITH_SSL_DOC}, yes (prefer os library if present, otherwise use bundled)")
 SET(WITH_SSL_DOC
   "${WITH_SSL_DOC}, system (use os library)")
+SET(WITH_SSL_DOC
+  "${WITH_SSL_DOC}, </path/to/custom/installation>")
 
 MACRO (CHANGE_SSL_SETTINGS string)
   SET(WITH_SSL ${string} CACHE STRING ${WITH_SSL_DOC} FORCE)
@@ -56,32 +79,152 @@
 # MYSQL_CHECK_SSL
 #
 # Provides the following configure options:
-# WITH_SSL=[bundled|yes|system]
+# WITH_SSL=[yes|bundled|system|<path/to/custom/installation>]
 MACRO (MYSQL_CHECK_SSL)
   IF(NOT WITH_SSL)
+   IF(WIN32)
      CHANGE_SSL_SETTINGS("bundled")
-     MESSAGE(STATUS "Found WITH_SSL set to no. "
-             "Changing it to bundled")
+   ENDIF()
   ENDIF()
 
+  # See if WITH_SSL is of the form </path/to/custom/installation>
+  FILE(GLOB WITH_SSL_HEADER ${WITH_SSL}/include/openssl/ssl.h)
+  IF (WITH_SSL_HEADER)
+    SET(WITH_SSL_PATH ${WITH_SSL} CACHE PATH "path to custom SSL installation")
+  ENDIF()
   IF(WITH_SSL STREQUAL "bundled")
     MYSQL_USE_BUNDLED_SSL()
-  ELSEIF(WITH_SSL STREQUAL "system" OR WITH_SSL STREQUAL "yes")
-    # Check for system library
-    SET(OPENSSL_FIND_QUIETLY TRUE)
-    INCLUDE(FindOpenSSL)
-    FIND_LIBRARY(CRYPTO_LIBRARY crypto)
-    MARK_AS_ADVANCED(CRYPTO_LIBRARY)
+    # Reset some variables, in case we switch from /path/to/ssl to "bundled".
+    IF (WITH_SSL_PATH)
+      UNSET(WITH_SSL_PATH)
+      UNSET(WITH_SSL_PATH CACHE)
+    ENDIF()
+    IF (OPENSSL_ROOT_DIR)
+      UNSET(OPENSSL_ROOT_DIR)
+      UNSET(OPENSSL_ROOT_DIR CACHE)
+    ENDIF()
+    IF (OPENSSL_INCLUDE_DIR)
+      UNSET(OPENSSL_INCLUDE_DIR)
+      UNSET(OPENSSL_INCLUDE_DIR CACHE)
+    ENDIF()
+    IF (WIN32 AND OPENSSL_APPLINK_C)
+      UNSET(OPENSSL_APPLINK_C)
+      UNSET(OPENSSL_APPLINK_C CACHE)
+    ENDIF()
+    IF (OPENSSL_LIBRARY)
+      UNSET(OPENSSL_LIBRARY)
+      UNSET(OPENSSL_LIBRARY CACHE)
+    ENDIF()
+    IF (CRYPTO_LIBRARY)
+      UNSET(CRYPTO_LIBRARY)
+      UNSET(CRYPTO_LIBRARY CACHE)
+    ENDIF()
+  ELSEIF(WITH_SSL STREQUAL "system" OR
+         WITH_SSL STREQUAL "yes" OR
+         WITH_SSL_PATH
+         )
+
+    # First search in WITH_SSL_PATH.
+    FIND_PATH(OPENSSL_ROOT_DIR
+      NAMES include/openssl/ssl.h
+      #NO_CMAKE_PATH
+      NO_CMAKE_ENVIRONMENT_PATH
+      HINTS ${WITH_SSL_PATH}
+    )
+
+    # Then search in standard places (if not found above).
+    FIND_PATH(OPENSSL_ROOT_DIR
+      NAMES include/openssl/ssl.h
+    )
+
+    FIND_PATH(OPENSSL_INCLUDE_DIR
+      NAMES openssl/ssl.h
+      HINTS ${OPENSSL_ROOT_DIR}/include
+    )
+
+    # On mac this list is <.dylib;.so;.a>
+    # We prefer static libraries, so we revert it here.
+    IF (WITH_SSL_PATH)
+      #LIST(REVERSE CMAKE_FIND_LIBRARY_SUFFIXES)
+      MESSAGE(STATUS "suffixes <${CMAKE_FIND_LIBRARY_SUFFIXES}>")
+    ENDIF()
+    FIND_LIBRARY(OPENSSL_LIBRARY
+                 NAMES ssl ssleay32 ssleay32MD
+                 HINTS ${OPENSSL_ROOT_DIR}/lib)
+    FIND_LIBRARY(CRYPTO_LIBRARY
+                 NAMES crypto libeay32
+                 HINTS ${OPENSSL_ROOT_DIR}/lib)
+    #IF (WITH_SSL_PATH)
+      #LIST(REVERSE CMAKE_FIND_LIBRARY_SUFFIXES)
+    #ENDIF()
+
+    # Verify version number. Version information looks like:
+    #   #define OPENSSL_VERSION_NUMBER 0x1000103fL
+    # Encoded as MNNFFPPS: major minor fix patch status
+    FILE(STRINGS "${OPENSSL_INCLUDE_DIR}/openssl/opensslv.h"
+      OPENSSL_VERSION_NUMBER
+      REGEX "^#[ ]*define[\t ]+OPENSSL_VERSION_NUMBER[\t ]+0x[0-9].*"
+    )
+    STRING(REGEX REPLACE
+      "^.*OPENSSL_VERSION_NUMBER[\t ]+0x([0-9]).*$" "\\1"
+      OPENSSL_MAJOR_VERSION "${OPENSSL_VERSION_NUMBER}"
+    )
+
+    IF(OPENSSL_INCLUDE_DIR AND
+       OPENSSL_LIBRARY   AND
+       CRYPTO_LIBRARY
+      )
+      SET(OPENSSL_FOUND TRUE)
+    ELSE()
+      SET(OPENSSL_FOUND FALSE)
+    ENDIF()
+
+    # If we are invoked with -DWITH_SSL=/path/to/custom/openssl
+    # and we have found static libraries, then link them statically
+    # into our executables and libraries.
+    # Adding IMPORTED_LOCATION allows MERGE_STATIC_LIBS
+    # to get LOCATION and do correct dependency analysis.
+    SET(MY_CRYPTO_LIBRARY "${CRYPTO_LIBRARY}")
+    SET(MY_OPENSSL_LIBRARY "${OPENSSL_LIBRARY}")
+    IF (WITH_SSL_PATH)
+      GET_FILENAME_COMPONENT(CRYPTO_EXT "${CRYPTO_LIBRARY}" EXT)
+      GET_FILENAME_COMPONENT(OPENSSL_EXT "${OPENSSL_LIBRARY}" EXT)
+      IF (CRYPTO_EXT STREQUAL ".a")
+        SET(MY_CRYPTO_LIBRARY imported_crypto)
+        ADD_LIBRARY(imported_crypto STATIC IMPORTED)
+        SET_TARGET_PROPERTIES(imported_crypto
+          PROPERTIES IMPORTED_LOCATION "${CRYPTO_LIBRARY}")
+      ENDIF()
+      IF (OPENSSL_EXT STREQUAL ".a")
+        SET(MY_OPENSSL_LIBRARY imported_openssl)
+        ADD_LIBRARY(imported_openssl STATIC IMPORTED)
+        SET_TARGET_PROPERTIES(imported_openssl
+          PROPERTIES IMPORTED_LOCATION "${OPENSSL_LIBRARY}")
+      ENDIF()
+    ENDIF()
+
+    MESSAGE(STATUS "OPENSSL_INCLUDE_DIR = ${OPENSSL_INCLUDE_DIR}")
+    MESSAGE(STATUS "OPENSSL_LIBRARY = ${OPENSSL_LIBRARY}")
+    MESSAGE(STATUS "CRYPTO_LIBRARY = ${CRYPTO_LIBRARY}")
+    MESSAGE(STATUS "OPENSSL_MAJOR_VERSION = ${OPENSSL_MAJOR_VERSION}")
+
     INCLUDE(CheckSymbolExists)
+    SET(CMAKE_REQUIRED_INCLUDES ${OPENSSL_INCLUDE_DIR})
     CHECK_SYMBOL_EXISTS(SHA512_DIGEST_LENGTH "openssl/sha.h" 
                         HAVE_SHA512_DIGEST_LENGTH)
-    IF(OPENSSL_FOUND AND CRYPTO_LIBRARY AND HAVE_SHA512_DIGEST_LENGTH)
+    IF(OPENSSL_FOUND AND HAVE_SHA512_DIGEST_LENGTH)
       SET(SSL_SOURCES "")
-      SET(SSL_LIBRARIES ${OPENSSL_LIBRARIES} ${CRYPTO_LIBRARY})
+      SET(SSL_LIBRARIES ${MY_OPENSSL_LIBRARY} ${MY_CRYPTO_LIBRARY})
+      IF(CMAKE_SYSTEM_NAME MATCHES "SunOS")
+        SET(SSL_LIBRARIES ${SSL_LIBRARIES} ${LIBSOCKET})
+      ENDIF()
+      IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
+        SET(SSL_LIBRARIES ${SSL_LIBRARIES} ${LIBDL})
+      ENDIF()
+      MESSAGE(STATUS "SSL_LIBRARIES = ${SSL_LIBRARIES}")
       SET(SSL_INCLUDE_DIRS ${OPENSSL_INCLUDE_DIR})
       SET(SSL_INTERNAL_INCLUDE_DIRS "")
       SET(SSL_DEFINES "-DHAVE_OPENSSL")
-      CHANGE_SSL_SETTINGS("system")
     ELSE()
       IF(WITH_SSL STREQUAL "system")
         MESSAGE(SEND_ERROR "Cannot find appropriate system libraries for SSL. Use WITH_SSL=bundled to enable SSL support")
@@ -89,7 +232,6 @@
       MYSQL_USE_BUNDLED_SSL()
     ENDIF()
   ELSE()
-    MESSAGE(SEND_ERROR "Wrong option for WITH_SSL. "
-            "Valid options are : ${WITH_SSL_DOC}")
+    MESSAGE(SEND_ERROR "Wrong option for WITH_SSL. Valid values are: " ${WITH_SSL_DOC})
   ENDIF()
 ENDMACRO()
