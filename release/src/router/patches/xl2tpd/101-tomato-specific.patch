--- xl2tpd/call.c
+++ xl2tpd/call.c
@@ -681,6 +681,9 @@ struct call *get_call (int tunnel, int c
         st->next = tunnels.head;
         tunnels.head = st;
         tunnels.count++;
+        /* Add route to the peer */
+        memset(&st->rt, 0, sizeof(&st->rt));
+        route_add(st->peer.sin_addr, &st->rt);
         return st->self;
     }
 }
--- xl2tpd/file.h
+++ xl2tpd/file.h
@@ -50,13 +50,13 @@ struct host
 #define SENSE_DENY 0
 
 #ifndef DEFAULT_AUTH_FILE
-#define DEFAULT_AUTH_FILE "/etc/xl2tpd/l2tp-secrets"
+#define DEFAULT_AUTH_FILE "/etc/l2tp-secrets"
 #endif
 #ifndef DEFAULT_CONFIG_FILE
-#define DEFAULT_CONFIG_FILE "/etc/xl2tpd/xl2tpd.conf"
+#define DEFAULT_CONFIG_FILE "/etc/xl2tpd.conf"
 #endif
-#define ALT_DEFAULT_AUTH_FILE "/etc/l2tpd/l2tp-secrets"
-#define ALT_DEFAULT_CONFIG_FILE "/etc/l2tp/l2tpd.conf"
+#define ALT_DEFAULT_AUTH_FILE ""
+#define ALT_DEFAULT_CONFIG_FILE ""
 #define DEFAULT_PID_FILE "/var/run/xl2tpd.pid"
 
 /* Definition of an LNS */
--- xl2tpd/ipsecmast.h
+++ xl2tpd/ipsecmast.h
@@ -2,10 +2,7 @@
 #define _IPSECMAST_H
 
 #ifndef IP_IPSEC_REFINFO
-/* 22 has been assigned to IP_NODEFRAG in 2.6.36+ so we moved to 30
- * #define IP_IPSEC_REFINFO 22
- */
-#define IP_IPSEC_REFINFO 30
+#define IP_IPSEC_REFINFO 22
 #endif
 
 #ifndef IPSEC_SAREF_NULL
--- xl2tpd/l2tp.h
+++ xl2tpd/l2tp.h
@@ -38,8 +38,9 @@ typedef unsigned long long _u64;
 #include "aaa.h"
 #include "common.h"
 #include "ipsecmast.h"
+#include <net/route.h>
 
-#define CONTROL_PIPE "/var/run/xl2tpd/l2tp-control"
+#define CONTROL_PIPE "/var/run/l2tp-control"
 #define CONTROL_PIPE_MESSAGE_SIZE 1024
 #define UNUSED(x) (void)(x)
 
@@ -184,6 +185,7 @@ struct tunnel
     struct lns *lns;            /* LNS that owns us */
     struct lac *lac;            /* LAC that owns us */
     struct in_pktinfo my_addr;  /* Address of my endpoint */
+    struct rtentry rt;          /* Route added to destination */
     char hostname[MAXSTRLEN];   /* Remote hostname */
     char vendor[MAXSTRLEN];     /* Vendor of remote product */
     struct challenge chal_us;   /* Their Challenge to us */
@@ -251,6 +253,10 @@ extern int get_entropy (unsigned char *,
 #endif
 #endif
 
+/* Route manipulation */
+#define sin_addr(s) (((struct sockaddr_in *)(s))->sin_addr)
+extern int route_add(const struct in_addr inetaddr, struct rtentry *rt);
+extern int route_del(struct rtentry *rt);
 
 /*
  * This is just some stuff to take
--- xl2tpd/Makefile
+++ xl2tpd/Makefile
@@ -50,7 +50,7 @@ include Makefile.ver
 # trust pppd. This work around will be removed in the near future.
 
 # DFLAGS= -g -DDEBUG_HELLO -DDEBUG_CLOSE -DDEBUG_FLOW -DDEBUG_PAYLOAD -DDEBUG_CONTROL -DDEBUG_CONTROL_XMIT -DDEBUG_FLOW_MORE -DDEBUG_MAGIC -DDEBUG_ENTROPY -DDEBUG_HIDDEN -DDEBUG_PPPD -DDEBUG_AAA -DDEBUG_FILE -DDEBUG_FLOW -DDEBUG_HELLO -DDEBUG_CLOSE -DDEBUG_ZLB -DDEBUG_AUTH
-DFLAGS?= -DDEBUG_PPPD -DTRUST_PPPD_TO_DIE
+DFLAGS?= -DTRUST_PPPD_TO_DIE
 
 # Uncomment the next line for Linux. KERNELSRC is needed for if_pppol2tp.h,
 # but we use a local copy if we don't find it.
--- xl2tpd/network.c
+++ xl2tpd/network.c
@@ -37,6 +37,52 @@ int server_socket;              /* Serve
 int kernel_support;             /* Kernel Support there or not? */
 #endif
 
+#ifdef USE_KERNEL
+void modprobe() {
+    char * modules[] = { "l2tp_ppp", "pppol2tp", NULL };
+    char ** module;
+    char buf[256], *tok;
+    int pid, exit_status, fd;
+
+    FILE * fmod = fopen("/proc/modules", "r");
+
+    if (fmod == NULL)
+        return;
+
+    while (fgets(buf, 255, fmod) != NULL) {
+        if ((tok = strtok(buf, " ")) != NULL) {
+            for (module = modules; *module != NULL; ++module) {
+                if (!strcmp(*module, tok)) {
+                    fclose(fmod);
+                    return;
+                }
+            }
+        }
+    }
+
+    fclose(fmod);
+
+    for (module = modules; *module != NULL; ++module) {
+        if ((pid = fork()) >= 0) {
+            if (pid == 0) {
+                setenv("PATH", "/sbin:/usr/sbin:/bin:/usr/bin", 1);
+                if ((fd = open("/dev/null", O_RDWR)) > -1) {
+                    dup2(fd, 1);
+                    dup2(fd, 2);
+                }
+                execlp("modprobe", "modprobe", "-q", *module, (char *)NULL);
+                exit(1);
+            } else {
+                if ((pid = waitpid(pid, &exit_status, 0)) != -1 && WIFEXITED(exit_status)) {
+                    if (WEXITSTATUS(exit_status) == 0)
+                        return;
+                }
+            }
+        }
+    }
+}
+#endif
+
 int init_network (void)
 {
     long arg;
--- xl2tpd/xl2tpd.c
+++ xl2tpd/xl2tpd.c
@@ -41,6 +41,9 @@
 #include <fcntl.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
+#include <net/route.h>
+#include <sys/ioctl.h>
+#include <resolv.h>
 #include "l2tp.h"
 
 struct tunnel_list tunnels;
@@ -704,6 +707,14 @@ static struct tunnel *l2tp_call (char *h
     struct call *tmp = NULL;
     struct hostent *hp;
     struct in_addr addr;
+    
+#if !defined(__UCLIBC__) \
+ || (__UCLIBC_MAJOR__ == 0 \
+ && (__UCLIBC_MINOR__ < 9 || (__UCLIBC_MINOR__ == 9 && __UCLIBC_SUBLEVEL__ < 31)))
+    /* force ns refresh from resolv.conf with uClibc pre-0.9.31 */
+    res_init();
+#endif
+
     port = htons (port);
     hp = gethostbyname (host);
     if (!hp)
@@ -1921,3 +1932,95 @@ int main (int argc, char *argv[])
     network_thread ();
     return 0;
 }
+
+
+/* Route manipulation */
+
+static int route_ctrl(int ctrl, struct rtentry *rt)
+{
+	int s;
+
+	/* Open a raw socket to the kernel */
+	if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0 ||	ioctl(s, ctrl, rt) < 0)
+		l2tp_log (LOG_ERR, "route_ctrl: %s", strerror(errno));
+	else errno = 0;
+
+	close(s);
+	return errno;
+}
+
+int route_del(struct rtentry *rt)
+{
+	if (rt->rt_dev) {
+		route_ctrl(SIOCDELRT, rt);
+		free(rt->rt_dev);
+		rt->rt_dev = NULL;
+	}
+	return 0;
+}
+
+int route_add(const struct in_addr inetaddr, struct rtentry *rt)
+{
+	char buf[256], dev[64];
+	int metric, flags;
+	u_int32_t dest, mask;
+
+	FILE *f = fopen("/proc/net/route", "r");
+	if (f == NULL) {
+		l2tp_log (LOG_ERR, "/proc/net/route: %s", strerror(errno));
+		return -1;
+	}
+
+	while (fgets(buf, sizeof(buf), f)) {
+		if (sscanf(buf, "%63s %x %x %X %*s %*s %d %x", dev, &dest,
+			&sin_addr(&rt->rt_gateway).s_addr, &flags, &metric, &mask) != 6)
+			continue;
+		if ((flags & RTF_UP) == (RTF_UP) && (inetaddr.s_addr & mask) == dest &&
+		    (dest || strncmp(dev, "ppp", 3)) /* avoid default via pppX to avoid on-demand loops*/) {
+			rt->rt_metric = metric + 1;
+			rt->rt_gateway.sa_family = AF_INET;
+			break;
+		}
+	}
+
+	fclose(f);
+
+	/* check for no route */
+	if (rt->rt_gateway.sa_family != AF_INET) {
+		/* l2tp_log (LOG_ERR, "route_add: no route to host"); */
+		return -1;
+	}
+
+	/* check for existing route to this host, 
+	add if missing based on the existing routes */
+	if (flags & RTF_HOST) {
+		/* l2tp_log (LOG_ERR, "route_add: not adding existing route"); */
+		return -1;
+	}
+
+	sin_addr(&rt->rt_dst) = inetaddr;
+	rt->rt_dst.sa_family = AF_INET;
+
+	sin_addr(&rt->rt_genmask).s_addr = INADDR_BROADCAST;
+	rt->rt_genmask.sa_family = AF_INET;
+
+	rt->rt_flags = RTF_UP | RTF_HOST;
+	if (flags & RTF_GATEWAY)
+		rt->rt_flags |= RTF_GATEWAY;
+
+	rt->rt_metric++;
+	rt->rt_dev = strdup(dev);
+
+	if (!rt->rt_dev) {
+		l2tp_log (LOG_ERR, "route_add: no memory");
+		return -1;
+	}
+
+	if (!route_ctrl(SIOCADDRT, rt))
+		return 0;
+
+	free(rt->rt_dev);
+	rt->rt_dev = NULL;
+
+	return -1;
+}
--- xl2tpd/xl2tpd-control.c
+++ xl2tpd/xl2tpd-control.c
@@ -39,7 +39,7 @@
  * xl2tpd-control capture the output, instead of creating tmp files?
  */
 /* result filename format including absolute path and formatting %i for pid */
-#define RESULT_FILENAME_FORMAT "/var/run/xl2tpd/xl2tpd-control-%i.out"
+#define RESULT_FILENAME_FORMAT "/var/run/xl2tpd-control-%i.out"
 
 #define ERROR_LEVEL 1
 #define DEBUG_LEVEL 2
