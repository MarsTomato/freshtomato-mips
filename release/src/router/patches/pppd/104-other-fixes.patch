--- pppd/chat/chat.c
+++ pppd/chat/chat.c
@@ -199,8 +199,9 @@ struct termios saved_tty_parameters;
 
 char *abort_string[MAX_ABORTS], *fail_reason = (char *)0,
 	fail_buffer[50];
-int n_aborts = 0, abort_next = 0, timeout_next = 0, echo_next = 0;
+int n_aborts = 0, abort_next = 0, timeout_next = 0, echo_next = 0, hex_next = 0;
 int clear_abort_next = 0;
+int hex = -1;
 
 char *report_string[MAX_REPORTS] ;
 char  report_buffer[256] ;
@@ -615,7 +616,7 @@ void set_tty_parameters()
     saved_tty_parameters = t;
     have_tty_parameters  = 1;
 
-    t.c_iflag     |= IGNBRK | ISTRIP | IGNPAR;
+    t.c_iflag     |= IGNBRK | IGNPAR;
     t.c_oflag      = 0;
     t.c_lflag      = 0;
     t.c_cc[VERASE] =
@@ -971,6 +972,11 @@ char *s;
 	return;
     }
 
+    if (strcmp(s, "HEX") == 0) {
+	++hex_next;
+	return;
+    }
+
 /*
  * Fetch the expect and reply string.
  */
@@ -1180,6 +1186,12 @@ register char *s;
 
 	return;
     }
+    
+    if (hex_next) {
+	hex_next = 0;
+	hex = (strcmp(s, "ON") == 0);
+	return;
+    }
 
     /*
      * The syntax @filename means read the string to send from the
@@ -1236,7 +1248,7 @@ int get_char()
 
     switch (status) {
     case 1:
-	return ((int)c & 0x7F);
+	return ((int)c & 0xFF);
 
     default:
 	msgf("warning: read() on stdin returned %d", status);
@@ -1433,7 +1445,9 @@ register char *string;
 	}
 
 	if (Verbose) {
-	   if (c == '\n')
+	   if ((hex == 2) || (hex == 0))
+	       fprintf(stderr, "%.2X", c);
+	   else if (c == '\n')
 	       fputc( '\n', stderr );
 	   else if (c != '\r')
 	       fprintf( stderr, "%s", character(c) );
@@ -1479,6 +1493,10 @@ register char *string;
 
 	    alarm(0);
 	    alarmed = 0;
+	    if (hex == 1)
+	      hex = 2;
+	    if (hex == 0)
+	      hex = -1;
 	    return (1);
 	}
 
--- pppd/pppd/auth.c
+++ pppd/pppd/auth.c
@@ -560,6 +560,9 @@ void start_link(unit)
 void start_link(unit)
     int unit;
 {
+    /* we are called via link_terminated, must be ignored */
+    if (phase == PHASE_DISCONNECT)
+	return;
     status = EXIT_CONNECT_FAILED;
     new_phase(PHASE_SERIALCONN);
 
@@ -1202,6 +1205,10 @@ check_idle(arg)
     if (idle_time_hook != 0) {
 	tlim = idle_time_hook(&idle);
     } else {
+	/* replace itime with idle.xmit_idle for only outgoing traffic is counted */
+	if (tx_only) 
+		itime = idle.xmit_idle;
+	else
 	itime = MIN(idle.xmit_idle, idle.recv_idle);
 	tlim = idle_time_limit - itime;
     }
@@ -2369,7 +2376,8 @@ auth_script(script)
     argv[3] = user_name;
     argv[4] = devnam;
     argv[5] = strspeed;
-    argv[6] = NULL;
+    argv[6] = ipparam;
+    argv[7] = NULL;
 
     auth_script_pid = run_program(script, argv, 0, auth_script_done, NULL, 0);
 }
--- pppd/pppd/plugins/pppol2tp/pppol2tp.c
+++ pppd/pppd/plugins/pppol2tp/pppol2tp.c
@@ -117,14 +117,8 @@ static option_t pppol2tp_options[] = {
 
 static int setdevname_pppol2tp(char **argv)
 {
-	union {
-		char buffer[128];
-		struct sockaddr pppol2tp;
-	} s;
-	int len = sizeof(s);
-	char **a;
-	int tmp;
-	int tmp_len = sizeof(tmp);
+	struct sockaddr_pppol2tp sax;
+	int len = sizeof(sax);
 
 	if (device_got_set)
 		return 0;
@@ -132,21 +126,21 @@ static int setdevname_pppol2tp(char **argv)
 	if (!int_option(*argv, &pppol2tp_fd))
 		return 0;
 
-	if(getsockname(pppol2tp_fd, (struct sockaddr *)&s, &len) < 0) {
+	if(getsockname(pppol2tp_fd, (struct sockaddr *)&sax, &len) < 0) {
 		fatal("Given FD for PPPoL2TP socket invalid (%s)",
 		      strerror(errno));
 	}
-	if(s.pppol2tp.sa_family != AF_PPPOX) {
-		fatal("Socket of not a PPPoX socket");
+	if(sax.sa_family != AF_PPPOX || sax.sa_protocol != PX_PROTO_OL2TP) {
+		fatal("Socket is not a PPPoL2TP socket");
 	}
 
 	/* Do a test getsockopt() to ensure that the kernel has the necessary
 	 * feature available.
-	 */
+	 * driver returns -ENOTCONN until session established!
 	if (getsockopt(pppol2tp_fd, SOL_PPPOL2TP, PPPOL2TP_SO_DEBUG,
 		       &tmp, &tmp_len) < 0) {
 		fatal("PPPoL2TP kernel driver not installed");
-	}
+	} */
 
 	pppol2tp_fd_str = strdup(*argv);
 	if (pppol2tp_fd_str == NULL)
@@ -179,10 +173,16 @@ static int setdevname_pppol2tp(char **argv)
 
 static int connect_pppol2tp(void)
 {
+	struct sockaddr_pppol2tp sax;
+	int len = sizeof(sax);
+
 	if(pppol2tp_fd == -1) {
 		fatal("No PPPoL2TP FD specified");
 	}
 
+	getsockname(pppol2tp_fd, (struct sockaddr *)&sax, &len);
+	sprintf(ppp_devnam,"l2tp (%s)",inet_ntoa(sax.pppol2tp.addr.sin_addr));
+
 	return pppol2tp_fd;
 }
 
--- pppd/pppd/ipv6cp.c
+++ pppd/pppd/ipv6cp.c
@@ -1089,7 +1089,9 @@ endswitch:
     return (rc);			/* Return final code */
 }
 
-
+#if defined(SOL2) || defined(__linux__)
+int ether_to_eui64(eui64_t *p_eui64);
+#endif
 /*
  * ipv6_check_options - check that any IP-related options are OK,
  * and assign appropriate defaults.
--- pppd/pppd/main.c
+++ pppd/pppd/main.c
@@ -1687,7 +1687,7 @@ device_script(program, in, out, dont_wait)
     if (log_to_fd >= 0)
 	errfd = log_to_fd;
     else
-	errfd = open(_PATH_CONNERRS, O_WRONLY | O_APPEND | O_CREAT, 0600);
+	errfd = open(_PATH_CONNERRS, O_WRONLY | O_APPEND | O_CREAT, 0644);
 
     ++conn_running;
     pid = safe_fork(in, out, errfd);
