From 469447ef26b3f002ef673112f7f9cdb15cbfe3c0 Mon Sep 17 00:00:00 2001
From: Augusto Bott <augusto@bott.com.br>
Date: Tue, 3 Apr 2012 09:35:33 +0200
Subject: [PATCH] PPTP Server for Tomato

---

diff -daurpN pppd/pppd/auth.c pppd/pppd/auth.c
--- pppd/pppd/auth.c
+++ pppd/pppd/auth.c
@@ -226,6 +226,7 @@ bool refuse_eap = 0;		/* Don't wanna aut
 #ifdef CHAPMS
 bool refuse_mschap = 0;		/* Don't wanna auth. ourselves with MS-CHAP */
 bool refuse_mschap_v2 = 0;	/* Don't wanna auth. ourselves with MS-CHAPv2 */
+bool ms_ignore_domain = 0;
 #else
 bool refuse_mschap = 1;		/* Don't wanna auth. ourselves with MS-CHAP */
 bool refuse_mschap_v2 = 1;	/* Don't wanna auth. ourselves with MS-CHAPv2 */
@@ -296,6 +297,8 @@ option_t auth_options[] = {
       "Require CHAP authentication from peer",
       OPT_ALIAS | OPT_PRIOSUB | OPT_A2OR | MDTYPE_MD5,
       &lcp_wantoptions[0].chap_mdtype },
+    { "chap-secrets", o_string, &chapseccustom,
+      "Specify custom chap-secrets file", OPT_PRIO },
 #ifdef CHAPMS
     { "require-mschap", o_bool, &auth_required,
       "Require MS-CHAP authentication from peer",
@@ -313,6 +316,9 @@ option_t auth_options[] = {
       "Require MS-CHAPv2 authentication from peer",
       OPT_ALIAS | OPT_PRIOSUB | OPT_A2OR | MDTYPE_MICROSOFT_V2,
       &lcp_wantoptions[0].chap_mdtype },
+    { "ms-ignore-domain", o_bool, &ms_ignore_domain,
+      "Ignore any MS domain prefix in the username", 1 },
+
 #endif
 
     { "refuse-pap", o_bool, &refuse_pap,
@@ -1652,7 +1658,7 @@ have_chap_secret(client, server, need_ip
 	}
     }
 
-    filename = _PATH_CHAPFILE;
+    filename = chapseccustom ? chapseccustom : _PATH_CHAPFILE;
     f = fopen(filename, "r");
     if (f == NULL)
 	return 0;
@@ -1747,7 +1753,7 @@ get_secret(unit, client, server, secret,
 	    return 0;
 	}
     } else {
-	filename = _PATH_CHAPFILE;
+	filename = chapseccustom ? chapseccustom : _PATH_CHAPFILE;
 	addrs = NULL;
 	secbuf[0] = 0;
 
diff -daurpN pppd/pppd/chap-new.c pppd/pppd/chap-new.c
--- pppd/pppd/chap-new.c
+++ pppd/pppd/chap-new.c
@@ -414,7 +414,13 @@ chap_verify_response(char *name, char *o
 	int ok;
 	unsigned char secret[MAXSECRETLEN];
 	int secret_len;
-
+#ifdef CHAPMS
+	char nametmp[MAXNAMELEN];
+	if (ms_ignore_domain && strrchr(name, '\\')) {
+		strcpy(nametmp, strrchr(name, '\\') + 1);
+		strcpy(name, nametmp);
+	}
+#endif
 	/* Get the secret that the peer is supposed to know */
 	if (!get_secret(0, name, ourname, (char *)secret, &secret_len, 1)) {
 		error("No CHAP secret found for authenticating %q", name);
diff -daurpN pppd/pppd/ipv6cp.c pppd/pppd/ipv6cp.c
--- pppd/pppd/ipv6cp.c
+++ pppd/pppd/ipv6cp.c
@@ -175,6 +175,8 @@ ipv6cp_options ipv6cp_gotoptions[NUM_PPP
 ipv6cp_options ipv6cp_allowoptions[NUM_PPP];	/* Options we allow peer to request */
 ipv6cp_options ipv6cp_hisoptions[NUM_PPP];	/* Options that we ack'd */
 int no_ifaceid_neg = 0;
+char path_ipv6up[MAXPATHLEN];			/* pathname of ipv6-up script */
+char path_ipv6down[MAXPATHLEN];			/* pathname of ipv6-down script */
 
 /* local vars */
 static int ipv6cp_is_up;
@@ -262,6 +264,13 @@ static option_t ipv6cp_option_list[] = {
     { "ipv6cp-max-failure", o_int, &ipv6cp_fsm[0].maxnakloops,
       "Set max #conf-naks for IPv6CP", OPT_PRIO },
 
+    { "ipv6-up-script", o_string, path_ipv6up,
+      "Set pathname of ipv6-up script",
+      OPT_PRIV|OPT_STATIC, NULL, MAXPATHLEN },
+    { "ipv6-down-script", o_string, path_ipv6down,
+      "Set pathname of ipv6-down script",
+      OPT_PRIV|OPT_STATIC, NULL, MAXPATHLEN },
+
    { NULL }
 };
 
@@ -1273,7 +1282,7 @@ ipv6cp_up(f)
      */
     if (ipv6cp_script_state == s_down && ipv6cp_script_pid == 0) {
 	ipv6cp_script_state = s_up;
-	ipv6cp_script(_PATH_IPV6UP);
+	ipv6cp_script(path_ipv6up);
     }
 }
 
@@ -1325,7 +1334,7 @@ ipv6cp_down(f)
     /* Execute the ipv6-down script */
     if (ipv6cp_script_state == s_up && ipv6cp_script_pid == 0) {
 	ipv6cp_script_state = s_down;
-	ipv6cp_script(_PATH_IPV6DOWN);
+	ipv6cp_script(path_ipv6down);
     }
 }
 
@@ -1368,13 +1377,13 @@ ipv6cp_script_done(arg)
     case s_up:
 	if (ipv6cp_fsm[0].state != OPENED) {
 	    ipv6cp_script_state = s_down;
-	    ipv6cp_script(_PATH_IPV6DOWN);
+	    ipv6cp_script(path_ipv6down);
 	}
 	break;
     case s_down:
 	if (ipv6cp_fsm[0].state == OPENED) {
 	    ipv6cp_script_state = s_up;
-	    ipv6cp_script(_PATH_IPV6UP);
+	    ipv6cp_script(path_ipv6up);
 	}
 	break;
     }
diff -daurpN pppd/pppd/ipv6cp.h pppd/pppd/ipv6cp.h
--- pppd/pppd/ipv6cp.h
+++ pppd/pppd/ipv6cp.h
@@ -168,3 +168,6 @@ extern ipv6cp_options ipv6cp_allowoption
 extern ipv6cp_options ipv6cp_hisoptions[];
 
 extern struct protent ipv6cp_protent;
+
+extern char path_ipv6up[MAXPATHLEN];	/* pathname of ipv6-up script */
+extern char path_ipv6down[MAXPATHLEN];	/* pathname of ipv6-down script */
diff -daurpN pppd/pppd/main.c pppd/pppd/main.c
--- pppd/pppd/main.c
+++ pppd/pppd/main.c
@@ -317,6 +317,10 @@ main(argc, argv)
 
     strlcpy(path_ipup, _PATH_IPUP, sizeof(path_ipup));
     strlcpy(path_ipdown, _PATH_IPDOWN, sizeof(path_ipdown));
+#ifdef INET6
+    strlcpy(path_ipv6up, _PATH_IPV6UP, sizeof(path_ipv6up));
+    strlcpy(path_ipv6down, _PATH_IPV6DOWN, sizeof(path_ipv6down));
+#endif
 
     link_stats_valid = 0;
     new_phase(PHASE_INITIALIZE);
@@ -1320,6 +1324,9 @@ static void check_time(void)
 	struct sysinfo i;
     struct callout *p;
 	
+	if(nochecktime)
+		return;
+
 	gettimeofday(&t, NULL);
 	sysinfo(&i);
 	new_diff = t.tv_sec - i.uptime;
diff -daurpN pppd/pppd/options.c pppd/pppd/options.c
--- pppd/pppd/options.c
+++ pppd/pppd/options.c
@@ -90,6 +90,7 @@ struct option_value {
 /*
  * Option variables and default values.
  */
+bool	nochecktime = 0;	/* Don't check time */
 int	debug = 0;		/* Debug flag */
 int	kdebugflag = 0;		/* Tell kernel to print debug messages */
 int	default_device = 1;	/* Using /dev/tty or equivalent */
@@ -104,6 +105,8 @@ bool	persist = 0;		/* Reopen link after
 char	our_name[MAXNAMELEN];	/* Our name for authentication purposes */
 bool	demand = 0;		/* do dial-on-demand */
 char	*ipparam = NULL;	/* Extra parameter for ip up/down scripts */
+char	*chapseccustom = NULL;	/* Custom chap-secrets file */
+
 int	idle_time_limit = 0;	/* Disconnect if idle for this many seconds */
 int	holdoff = 30;		/* # seconds to pause before reconnecting */
 bool	holdoff_specified;	/* true if a holdoff value has been given */
@@ -197,6 +200,8 @@ static struct option_list *extra_options
  * Valid arguments.
  */
 option_t general_options[] = {
+    { "nochecktime", o_bool, &nochecktime,
+      "Don't check time", OPT_PRIO | 1 },
     { "debug", o_int, &debug,
       "Increase debugging level", OPT_INC | OPT_NOARG | 1 },
     { "-d", o_int, &debug,
diff -daurpN pppd/pppd/pppd.h pppd/pppd/pppd.h
--- pppd/pppd/pppd.h
+++ pppd/pppd/pppd.h
@@ -278,6 +278,7 @@ extern struct notifier *fork_notifier;	/
  * Variables set by command-line options.
  */
 
+extern bool	nochecktime;	/* Don't check time */
 extern int	debug;		/* Debug flag */
 extern int	kdebugflag;	/* Tell kernel to print debug messages */
 extern int	default_device;	/* Using /dev/tty or equivalent */
@@ -308,6 +309,7 @@ extern char	remote_name[MAXNAMELEN]; /*
 extern bool	explicit_remote;/* remote_name specified with remotename opt */
 extern bool	demand;		/* Do dial-on-demand */
 extern char	*ipparam;	/* Extra parameter for ip up/down scripts */
+extern char	*chapseccustom;	/* Custom chap-secrets file */
 extern bool	cryptpap;	/* Others' PAP passwords are encrypted */
 extern int	idle_time_limit;/* Shut down link if idle for this long */
 extern int	holdoff;	/* Dead time before restarting */
@@ -330,6 +332,9 @@ extern char	*bundle_name;	/* bundle name
 extern bool	dump_options;	/* print out option values */
 extern bool	dryrun;		/* check everything, print options, exit */
 extern int	child_wait;	/* # seconds to wait for children at end */
+#ifdef CHAPMS
+extern bool	ms_ignore_domain; /* Ignore any MS domain prefix */
+#endif
 
 #ifdef MAXOCTETS
 extern unsigned int maxoctets;	     /* Maximum octetes per session (in bytes) */
diff -daurpN pppd/pppd/utils.c pppd/pppd/utils.c
--- pppd/pppd/utils.c
+++ pppd/pppd/utils.c
@@ -1048,6 +1048,11 @@ unlock()
 void saveWANStatus(char *currentstatus, int statusindex)
 {
 	FILE *STATUSFILE;
+
+	/* only save with status description */
+	if (strlen(currentstatus) == 0)
+		return;
+
 #ifdef ONWL500G_SHELL
 	if ((req_unit == 0) && (STATUSFILE = fopen("/etc/linuxigd/wanstatus.log", "w"))!=NULL)
 	{
