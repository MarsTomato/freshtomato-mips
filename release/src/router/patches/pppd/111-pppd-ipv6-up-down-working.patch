--- pppd/pppd/ipcp.c
+++ pppd/pppd/ipcp.c
@@ -95,6 +95,9 @@ static int ipcp_is_open;		/* haven't called np_finished() */
 static bool ask_for_local;		/* request our address from peer */
 static char vj_value[8];		/* string form of vj option value */
 static char netmask_str[20];		/* string form of netmask value */
+static char path_ipup[MAXPATHLEN] = _PATH_IPUP; /* pathname of ip-up script */
+static char path_ipdown[MAXPATHLEN] = _PATH_IPDOWN; /* pathname of ip-down script */
+static char path_ippreup[MAXPATHLEN] = _PATH_IPPREUP; /* pathname of ip-pre-up script */
 
 /*
  * Callbacks for fsm code.  (CI = Configuration Information)
@@ -230,6 +233,16 @@ static option_t ipcp_option_list[] = {
       "set local and remote IP addresses",
       OPT_NOARG | OPT_A2PRINTER, (void *) &printipaddr },
 
+    { "ip-up-script", o_string, &path_ipup,
+      "Set pathname of ip-up script",
+      OPT_PRIV|OPT_STATIC, NULL, MAXPATHLEN },
+    { "ip-down-script", o_string, &path_ipdown,
+      "Set pathname of ip-down script",
+      OPT_PRIV|OPT_STATIC, NULL, MAXPATHLEN },
+    { "ip-pre-up-script", o_string, &path_ippreup,
+      "Set pathname of ip-pre-up script",
+      OPT_PRIV|OPT_STATIC, NULL, MAXPATHLEN },
+
     { NULL }
 };
 
@@ -1754,7 +1767,7 @@ ip_demand_conf(u)
     }
     if (!sifaddr(u, wo->ouraddr, wo->hisaddr, GetMask(wo->ouraddr)))
 	return 0;
-    ipcp_script(_PATH_IPPREUP, 1);
+    ipcp_script(path_ippreup, 1);
     if (!sifup(u))
 	return 0;
     if (!sifnpmode(u, PPP_IP, NPMODE_QUEUE))
@@ -1901,7 +1914,7 @@ ipcp_up(f)
 #endif
 
 	/* run the pre-up script, if any, and wait for it to finish */
-	ipcp_script(_PATH_IPPREUP, 1);
+	ipcp_script(path_ippreup, 1);
 
 	/* bring the interface up for IP */
 	if (!sifup(f->unit)) {
--- pppd/pppd/ipv6cp.c
+++ pppd/pppd/ipv6cp.c
@@ -175,11 +175,11 @@ ipv6cp_options ipv6cp_gotoptions[NUM_PPP];	/* Options that peer ack'd */
 ipv6cp_options ipv6cp_allowoptions[NUM_PPP];	/* Options we allow peer to request */
 ipv6cp_options ipv6cp_hisoptions[NUM_PPP];	/* Options that we ack'd */
 int no_ifaceid_neg = 0;
-char path_ipv6up[MAXPATHLEN];			/* pathname of ipv6-up script */
-char path_ipv6down[MAXPATHLEN];			/* pathname of ipv6-down script */
 
 /* local vars */
 static int ipv6cp_is_up;
+static char path_ipv6up[MAXPATHLEN] = _PATH_IPV6UP; /* pathname of ipv6-up script */
+static char path_ipv6down[MAXPATHLEN] = _PATH_IPV6DOWN; /* pathname of ipv6-down script */
 
 /* Hook for a plugin to know when IPv6 protocol has come up */
 void (*ipv6_up_hook) __P((void)) = NULL;
@@ -264,10 +264,10 @@ static option_t ipv6cp_option_list[] = {
     { "ipv6cp-max-failure", o_int, &ipv6cp_fsm[0].maxnakloops,
       "Set max #conf-naks for IPv6CP", OPT_PRIO },
 
-    { "ipv6-up-script", o_string, path_ipv6up,
+    { "ipv6-up-script", o_string, &path_ipv6up,
       "Set pathname of ipv6-up script",
       OPT_PRIV|OPT_STATIC, NULL, MAXPATHLEN },
-    { "ipv6-down-script", o_string, path_ipv6down,
+    { "ipv6-down-script", o_string, &path_ipv6down,
       "Set pathname of ipv6-down script",
       OPT_PRIV|OPT_STATIC, NULL, MAXPATHLEN },
 
--- pppd/pppd/ipv6cp.h
+++ pppd/pppd/ipv6cp.h
@@ -168,6 +168,3 @@ extern ipv6cp_options ipv6cp_allowoptions[];
 extern ipv6cp_options ipv6cp_hisoptions[];
 
 extern struct protent ipv6cp_protent;
-
-extern char path_ipv6up[MAXPATHLEN];	/* pathname of ipv6-up script */
-extern char path_ipv6down[MAXPATHLEN];	/* pathname of ipv6-down script */
--- pppd/pppd/main.c
+++ pppd/pppd/main.c
@@ -313,13 +313,6 @@ main(argc, argv)
     struct protent *protp;
     char numbuf[16];
 
-    strlcpy(path_ipup, _PATH_IPUP, sizeof(path_ipup));
-    strlcpy(path_ipdown, _PATH_IPDOWN, sizeof(path_ipdown));
-#ifdef INET6
-    strlcpy(path_ipv6up, _PATH_IPV6UP, sizeof(path_ipv6up));
-    strlcpy(path_ipv6down, _PATH_IPV6DOWN, sizeof(path_ipv6down));
-#endif
-
     link_stats_valid = 0;
     new_phase(PHASE_INITIALIZE);
 
--- pppd/pppd/options.c
+++ pppd/pppd/options.c
@@ -117,8 +117,6 @@ bool	tune_kernel;		/* may alter kernel settings */
 int	connect_delay = 1000;	/* wait this many ms after connect script */
 int	req_unit = -1;		/* requested interface unit */
 int	req_minunit = -1;	/* requested minimal interface unit */
-char	path_ipup[MAXPATHLEN];	/* pathname of ip-up script */
-char	path_ipdown[MAXPATHLEN];/* pathname of ip-down script */
 bool	multilink = 0;		/* Enable multilink operation */
 char	*bundle_name = NULL;	/* bundle name for multilink */
 bool	dump_options;		/* print out option values */
@@ -300,13 +298,6 @@ option_t general_options[] = {
       "Number of seconds to wait for child processes at exit",
       OPT_PRIO },
 
-    { "ip-up-script", o_string, path_ipup,
-      "Set pathname of ip-up script",
-      OPT_PRIV|OPT_STATIC, NULL, MAXPATHLEN },
-    { "ip-down-script", o_string, path_ipdown,
-      "Set pathname of ip-down script",
-      OPT_PRIV|OPT_STATIC, NULL, MAXPATHLEN },
-
     { "set", o_special, (void *)user_setenv,
       "Set user environment variable",
       OPT_A2PRINTER | OPT_NOPRINT, (void *)user_setprint },
--- pppd/pppd/pppd.h
+++ pppd/pppd/pppd.h
@@ -323,8 +323,6 @@ extern int	connect_delay;	/* Time to delay after connect script */
 extern int	max_data_rate;	/* max bytes/sec through charshunt */
 extern int	req_unit;	/* interface unit number to use */
 extern int	req_minunit;	/* interface minimal unit number to use */
-extern char	path_ipup[MAXPATHLEN]; /* pathname of ip-up script */
-extern char	path_ipdown[MAXPATHLEN]; /* pathname of ip-down script */
 extern bool	multilink;	/* enable multilink operation */
 extern bool	noendpoint;	/* don't send or accept endpt. discrim. */
 extern char	*bundle_name;	/* bundle name for multilink */
