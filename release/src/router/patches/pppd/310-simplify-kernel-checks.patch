diff --git pppd/pppd/plugins/pppoatm/pppoatm.c pppd/pppd/plugins/pppoatm/pppoatm.c
index 5a3ecd6..fb4c4a6 100644
--- pppd/pppd/plugins/pppoatm/pppoatm.c
+++ pppd/pppd/plugins/pppoatm/pppoatm.c
@@ -171,14 +171,6 @@ static void disconnect_pppoatm(void)
 
 void plugin_init(void)
 {
-#ifdef linux
-	extern int new_style_driver;	/* From sys-linux.c */
-	if (!ppp_available() && !new_style_driver)
-		fatal("Kernel doesn't support ppp_generic - "
-		    "needed for PPPoATM");
-#else
-	fatal("No PPPoATM support on this OS");
-#endif
 	add_options(pppoa_options);
 }
 
diff --git pppd/pppd/plugins/pppoe/plugin.c pppd/pppd/plugins/pppoe/plugin.c
index de9b816..71cb220 100644
--- pppd/pppd/plugins/pppoe/plugin.c
+++ pppd/pppd/plugins/pppoe/plugin.c
@@ -58,9 +58,6 @@ static char const RCSID[] =
 
 char pppd_version[] = VERSION;
 
-/* From sys-linux.c in pppd -- MUST FIX THIS! */
-extern int new_style_driver;
-
 char *pppd_pppoe_service = NULL;
 static char *acName = NULL;
 static char *existingSession = NULL;
@@ -407,10 +404,6 @@ PPPoEDevnameHook(char *cmd, char **argv, int doit)
 void
 plugin_init(void)
 {
-    if (!ppp_available() && !new_style_driver) {
-	fatal("Linux kernel does not support PPPoE -- are you running 2.4.x?");
-    }
-
     add_options(Options);
 
     info("PPPoE plugin from pppd %s", VERSION);
diff --git pppd/pppd/plugins/pppol2tp/pppol2tp.c pppd/pppd/plugins/pppol2tp/pppol2tp.c
index 97ea85d..deed188 100644
--- pppd/pppd/plugins/pppol2tp/pppol2tp.c
+++ pppd/pppd/plugins/pppol2tp/pppol2tp.c
@@ -490,12 +490,7 @@ static void pppol2tp_cleanup(void)
 
 void plugin_init(void)
 {
-#if defined(__linux__)
-	extern int new_style_driver;	/* From sys-linux.c */
-	if (!ppp_available() && !new_style_driver)
-		fatal("Kernel doesn't support ppp_generic - "
-		    "needed for PPPoL2TP");
-#else
+#if !defined(__linux__)
 	fatal("No PPPoL2TP support on this OS");
 #endif
 	add_options(pppol2tp_options);
diff --git pppd/pppd/sys-linux.c pppd/pppd/sys-linux.c
index f7d5ed9..578a8c0 100644
--- pppd/pppd/sys-linux.c
+++ pppd/pppd/sys-linux.c
@@ -206,7 +206,7 @@ static int driver_is_old       = 0;
 static int restore_term        = 0;	/* 1 => we've munged the terminal */
 static struct termios inittermios;	/* Initial TTY termios */
 
-int new_style_driver = 0;
+static const int new_style_driver = 1;
 
 static char loop_name[20];
 static unsigned char inbuf[512]; /* buffer for chars read from loopback */
@@ -225,8 +225,8 @@ static int	looped;			/* 1 if using loop */
 static int	link_mtu;		/* mtu for the link (not bundle) */
 
 static struct utsname utsname;	/* for the kernel version */
-static int kernel_version;
 #define KVERSION(j,n,p)	((j)*1000000 + (n)*1000 + (p))
+static const int kernel_version = KVERSION(2,6,37);
 
 #define MAX_IFS		100
 
@@ -1445,11 +1445,12 @@ int ccp_fatal_error (int unit)
  *
  * path_to_procfs - find the path to the proc file system mount point
  */
-static char proc_path[MAXPATHLEN];
-static int proc_path_len;
+static char proc_path[MAXPATHLEN] = "/proc";
+static int proc_path_len = 5;
 
 static char *path_to_procfs(const char *tail)
 {
+#if 0
     struct mntent *mntent;
     FILE *fp;
 
@@ -1471,6 +1472,7 @@ static char *path_to_procfs(const char *tail)
 	    fclose (fp);
 	}
     }
+#endif
 
     strlcpy(proc_path + proc_path_len, tail,
 	    sizeof(proc_path) - proc_path_len);
@@ -2355,15 +2357,19 @@ int ppp_available(void)
     int    my_version, my_modification, my_patch;
     int osmaj, osmin, ospatch;
 
+#if 0
     /* get the kernel version now, since we are called before sys_init */
     uname(&utsname);
     osmaj = osmin = ospatch = 0;
     sscanf(utsname.release, "%d.%d.%d", &osmaj, &osmin, &ospatch);
     kernel_version = KVERSION(osmaj, osmin, ospatch);
+#endif
 
     fd = open("/dev/ppp", O_RDWR);
     if (fd >= 0) {
+#if 0
 	new_style_driver = 1;
+#endif
 
 	/* XXX should get from driver */
 	driver_version = 2;
@@ -2423,6 +2429,7 @@ int ppp_available(void)
 
     if (ok && ((ifr.ifr_hwaddr.sa_family & ~0xFF) != ARPHRD_PPP))
 	ok = 0;
+	return ok;
 
 /*
  *  This is the PPP device. Validate the version of the driver at this
@@ -3098,6 +3105,7 @@ get_pty(int *master_fdp, int *slave_fdp, char *slave_name, int uid)
     }
 #endif /* TIOCGPTN */
 
+#if 0
     if (sfd < 0) {
 	/* the old way - scan through the pty name space */
 	for (i = 0; i < 64; ++i) {
@@ -3116,6 +3124,7 @@ get_pty(int *master_fdp, int *slave_fdp, char *slave_name, int uid)
 	    }
 	}
     }
+#endif
 
     if (sfd < 0)
 	return 0;
