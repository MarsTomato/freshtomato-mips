--- wsdd2/wsd.c
+++ wsdd2/wsd.c
@@ -136,6 +136,7 @@
 	}
 }
 
+#ifndef TOMATO
 static struct {
 	const char *key, *_default;
 	char *value;
@@ -149,6 +150,21 @@
 	{ .key	= "presentationurl:",	._default = NULL},
 	{}
 };
+#else
+static struct {
+	const char *key, *_default;
+	char *value;
+} bootinfo[] = {
+	{ .key	= "vendor:",	._default = "FRESHTOMATO"},
+	{ .key	= "model:",	._default = "FreshTomato"},
+	{ .key	= "serial:",	._default = "0"},
+	{ .key	= "sku:",	._default = "FreshTomato router"},
+	{ .key	= "vendorurl:",	._default = "https://freshtomato.org"},
+	{ .key	= "modelurl:",	._default = "https://freshtomato.org"},
+	{ .key	= "presentationurl:",	._default = "http://freshtomato.org"},
+	{}
+};
+#endif /* TOMATO */
 
 int set_getresp(const char *str, const char **next)
 {
@@ -722,7 +738,11 @@
 {
 	const char resp_hdr_fmt[] =
 		"HTTP/1.1 %s\r\n"
+#ifdef TOMATO
+		"Server: FreshTomato WSD Server\r\n"
+#else
 		"Server: NETGEAR WSD Server\r\n"
+#endif
 		"Date: %s\r\n"
 		"Connection: close\r\n"
 		"Content-Type: application/soap+xml\r\n"
--- wsdd2/wsdd2.c
+++ wsdd2/wsdd2.c
@@ -23,6 +23,7 @@
 #define _GNU_SOURCE // asprintf()
 
 #include "wsdd.h"
+#include "ifaddrs.c"
 
 #include <stddef.h> // NULL
 #include <limits.h> // HOST_NAME_MAX
@@ -386,7 +387,7 @@
 		break;
 	}
 
-	ep->sock = socket(ep->family, ep->type | SOCK_CLOEXEC, ep->protocol);
+	ep->sock = socket(ep->family, ep->type, ep->protocol);
 	if (ep->sock < 0) {
 		ep->errstr = __FUNCTION__ ": Can't open socket";
 		ep->_errno = errno;
@@ -581,6 +582,7 @@
 	}
 }
 
+#ifndef TOMATO
 static char *get_smbparm(const char *name, const char *_default)
 {
 #define __FUNCTION__	"get_smbparm"
@@ -616,6 +618,93 @@
 	return result;
 #undef __FUNCTION__
 }
+#else
+char *get_smbparm(const char *name, const char *_default)
+{
+#define __FUNCTION__    "get_smbparm"
+	char buf[256], *result;
+	FILE *fp;
+	char parm[64];
+	char value[64];
+	char *p, *dstp, *dstv;
+	int stage = 0, c = 0;
+
+	*value = '\0';
+	*parm = '\0';
+
+	if (!(fp = fopen("/etc/smb.conf","r"))) {
+		DEBUG(0, W, __FUNCTION__ ": can't access smb.conf");
+		return strdup(_default);
+	}
+
+	while (fgets(buf, sizeof(buf), fp)) {
+		p = buf;
+		dstp = parm;
+		dstv = value;
+
+		/* Retrieve name */
+		while (*p && c < 63) {
+			if (stage == 0 && isspace(*p)) {
+				p++;
+				continue;
+			}
+			else
+				stage = 1;
+
+			if (*p == '=') {
+				p++; /* Skip it */
+				break;
+			}
+			*dstp++ = *p++;
+			c++;
+		}
+		*dstp = '\0';
+
+		/* Trim trailing whitespace */
+		for (dstp = parm + strlen(parm) - 1; parm < dstp && isspace(*dstp); dstp--)
+			*dstp = '\0';
+
+		/* Is is the desired parameter? */
+		if (strcmp(parm, name))
+			continue;
+
+		/* Retrieve value */
+		stage = 0;
+		c = 0;
+
+		while (*p && c < 63) {
+			if (stage == 0 && isspace(*p)) {
+				p++;
+				continue;
+			}
+			else
+				stage = 1;
+
+			if (*p == '\n')
+				break;
+
+			*dstv++ = *p++;
+			c++;
+		}
+		*dstv = '\0';
+
+		/* Trim trailing whitespace */
+		for (dstv = value + strlen(value) - 1; value < dstv && isspace(*dstv); dstv--)
+			*dstv = '\0';
+
+		break;
+	}
+	fclose(fp);
+
+	if (!*value)
+		result = strdup(_default);
+	else
+		result = strdup(value);
+
+	return result;
+#undef __FUNCTION__
+}
+#endif /* TOMATO */
 
 static void help(const char *prog, int ec, const char *fmt, ...)
 {
--- wsdd2/wsdd.h
+++ wsdd2/wsdd.h
@@ -27,7 +27,9 @@
 #include <net/if.h> // IFNAMSIZ
 #include <arpa/inet.h> // ntohs()
 #include <netinet/in.h> // struct sockaddr_in, struct ip_mreq
+#ifndef TOMATO
 #include <linux/in.h> // struct ip_mreqn
+#endif
 #include <linux/netlink.h> // struct sockaddr_nl
 #include <time.h> // time_t, time()
 
