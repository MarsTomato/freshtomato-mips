--- vsftpd/builddefs.h
+++ vsftpd/builddefs.h
@@ -1,9 +1,17 @@
 #ifndef VSF_BUILDDEFS_H
 #define VSF_BUILDDEFS_H
 
+#include <tomato_config.h>
+
 #undef VSF_BUILD_TCPWRAPPERS
-#define VSF_BUILD_PAM
-#undef VSF_BUILD_SSL
+#undef VSF_BUILD_PAM
+
+#ifdef TCONFIG_FTP_SSL
+	#define VSF_BUILD_SSL
+#else
+	#undef VSF_BUILD_SSL
+#endif
+
 
 #endif /* VSF_BUILDDEFS_H */
 
--- vsftpd/Makefile
+++ vsftpd/Makefile
@@ -1,16 +1,33 @@
+include ../common.mak
+
 # Makefile for systems with GNU tools
-CC 	=	gcc
-INSTALL	=	install
+
+#CC 	=	gcc
+#INSTALL	=	install
 IFLAGS  = -idirafter dummyinc
 #CFLAGS = -g
-CFLAGS	=	-O2 -fPIE -fstack-protector --param=ssp-buffer-size=4 \
-	-Wall -W -Wshadow -Werror -Wformat-security \
-	-D_FORTIFY_SOURCE=2 \
-	#-pedantic -Wconversion
+CFLAGS	= -O2 -Wall $(EXTRACFLAGS) -ffunction-sections -fdata-sections -W -Wshadow #-pedantic -Werror -Wconversion
+LDFLAGS = -ffunction-sections -fdata-sections -Wl,--gc-sections
+
+#LIBS	=	`./vsf_findlibs.sh`
+#LINK	=	-Wl,-s
+LIBS	=	-lcrypt -lnsl
+LINK	=
+
+CFLAGS	+=	-I$(TOP)/shared
+
+ifeq ($(TCONFIG_FTP_SSL),y)
+ifeq ($(TCONFIG_OPENSSL11),y)
+LIBS	+=	-pthread
+OPENSSLDIR = $(TOP)/openssl-1.1
+else
+OPENSSLDIR = $(TOP)/openssl
+endif
+OPENSSLINC = $(OPENSSLDIR)/include
+LIBS	+=	-L$(OPENSSLDIR)/ -lssl -lcrypto
+CFLAGS	+=	-I$(OPENSSLINC)
+endif
 
-LIBS	=	`./vsf_findlibs.sh`
-LINK	=	-Wl,-s
-LDFLAGS	=	-fPIE -pie -Wl,-z,relro -Wl,-z,now
 
 OBJS	=	main.o utility.o prelogin.o ftpcmdio.o postlogin.o privsock.o \
 		tunables.o ftpdataio.o secbuf.o ls.o \
--- vsftpd/parseconf.c
+++ vsftpd/parseconf.c
@@ -36,6 +36,7 @@ parseconf_bool_array[] =
   { "anon_upload_enable", &tunable_anon_upload_enable },
   { "anon_mkdir_write_enable", &tunable_anon_mkdir_write_enable },
   { "anon_other_write_enable", &tunable_anon_other_write_enable },
+  { "anon_allow_writable_root", &tunable_anon_allow_writable_root },
   { "chown_uploads", &tunable_chown_uploads },
   { "connect_from_port_20", &tunable_connect_from_port_20 },
   { "xferlog_enable", &tunable_xferlog_enable },
@@ -183,6 +184,7 @@ parseconf_str_array[] =
   { "ca_certs_file", &tunable_ca_certs_file },
   { "ssl_sni_hostname", &tunable_ssl_sni_hostname },
   { "cmds_denied", &tunable_cmds_denied },
+  { "passwd_file", &tunable_passwd_file },
   { 0, 0 }
 };
 
--- vsftpd/secutil.c
+++ vsftpd/secutil.c
@@ -129,16 +129,17 @@ vsf_secutil_change_credentials(const str
   {
     vsf_sysutil_set_no_procs();
   }
-  /* Misconfiguration check: don't ever chroot() to a directory writable by
-   * the current user.
-   */
-  if ((options & VSF_SECUTIL_OPTION_CHROOT) &&
-      !(options & VSF_SECUTIL_OPTION_ALLOW_WRITEABLE_ROOT))
-  {
-    if (vsf_sysutil_write_access("/"))
-    {
-      die("vsftpd: refusing to run with writable root inside chroot()");
-    }
-  }
+// check removed (for now) as tomato lacks of other users then root
+//  /* Misconfiguration check: don't ever chroot() to a directory writable by
+//   * the current user.
+//   */
+//  if ((options & VSF_SECUTIL_OPTION_CHROOT) &&
+//      !(options & VSF_SECUTIL_OPTION_ALLOW_WRITEABLE_ROOT))
+//  {
+//    if (vsf_sysutil_write_access("/"))
+//    {
+//      die("vsftpd: refusing to run with writable root inside chroot()");
+//    }
+//  }
 }
 
--- vsftpd/ssl.c
+++ vsftpd/ssl.c
@@ -28,6 +28,7 @@
 #include <openssl/err.h>
 #include <openssl/rand.h>
 #include <openssl/bio.h>
+#include <openssl/ec.h>
 #include <errno.h>
 #include <limits.h>
 
--- vsftpd/sysutil.c
+++ vsftpd/sysutil.c
@@ -2301,6 +2301,38 @@ vsf_sysutil_getpwuid(const int uid)
   return (struct vsf_sysutil_user*) getpwuid((unsigned int) uid);
 }
 
+/* hack to reload getpwnam -- uClibc implementation alike */
+struct passwd *getpwnam(const char *name)
+{
+    FILE *f;
+    static char line_buff[256 /*PWD_BUFFER_SIZE*/];
+    static struct passwd pwdbuf;
+    struct passwd *pwd;
+
+    if (tunable_passwd_file == NULL)
+    {
+        if (getpwnam_r(name, &pwdbuf, line_buff, sizeof(line_buff), &pwd) == 0) {
+            return &pwdbuf;
+        }
+        return NULL;
+    }
+
+    f = fopen(tunable_passwd_file, "r");
+    if (f != NULL)
+    {
+        while (fgetpwent_r(f, &pwdbuf, line_buff, sizeof(line_buff), &pwd) == 0) {
+            if (!strncmp(pwdbuf.pw_name, name, 256)) {
+                fclose(f);
+                return &pwdbuf;
+            }
+        }
+        fclose(f);
+    }
+
+    return NULL;
+}
+
+
 struct vsf_sysutil_user*
 vsf_sysutil_getpwnam(const char* p_user)
 {
--- vsftpd/tunables.c
+++ vsftpd/tunables.c
@@ -17,6 +17,7 @@ int tunable_write_enable;
 int tunable_anon_upload_enable;
 int tunable_anon_mkdir_write_enable;
 int tunable_anon_other_write_enable;
+int tunable_anon_allow_writable_root;
 int tunable_chown_uploads;
 int tunable_connect_from_port_20;
 int tunable_xferlog_enable;
@@ -146,6 +147,7 @@ const char* tunable_ssl_ciphers;
 const char* tunable_dsa_private_key_file;
 const char* tunable_ca_certs_file;
 const char* tunable_ssl_sni_hostname;
+const char* tunable_passwd_file;
 
 static void install_str_setting(const char* p_value, const char** p_storage);
 
@@ -161,6 +163,7 @@ tunables_load_defaults()
   tunable_anon_upload_enable = 0;
   tunable_anon_mkdir_write_enable = 0;
   tunable_anon_other_write_enable = 0;
+  tunable_anon_allow_writable_root = 0;
   tunable_chown_uploads = 0;
   tunable_connect_from_port_20 = 0;
   tunable_xferlog_enable = 0;
@@ -261,7 +264,7 @@ tunables_load_defaults()
   /* -rw------- */
   tunable_chown_upload_mode = 0600;
 
-  install_str_setting("/usr/share/empty", &tunable_secure_chroot_dir);
+  install_str_setting("/var/run/vsftpd", &tunable_secure_chroot_dir);
   install_str_setting("ftp", &tunable_ftp_username);
   install_str_setting("root", &tunable_chown_username);
   install_str_setting("/var/log/xferlog", &tunable_xferlog_file);
@@ -288,14 +291,15 @@ tunables_load_defaults()
   install_str_setting(0, &tunable_user_sub_token);
   install_str_setting("/etc/vsftpd.email_passwords",
                       &tunable_email_password_file);
-  install_str_setting("/usr/share/ssl/certs/vsftpd.pem",
+  install_str_setting("/var/run/vsftpd/vsftpd.pem",
                       &tunable_rsa_cert_file);
   install_str_setting(0, &tunable_dsa_cert_file);
   install_str_setting("ECDHE-RSA-AES256-GCM-SHA384", &tunable_ssl_ciphers);
   install_str_setting(0, &tunable_rsa_private_key_file);
   install_str_setting(0, &tunable_dsa_private_key_file);
   install_str_setting(0, &tunable_ca_certs_file);
   install_str_setting(0, &tunable_ssl_sni_hostname);
+  install_str_setting(0, &tunable_passwd_file);
 }
 
 void
--- vsftpd/tunables.h
+++ vsftpd/tunables.h
@@ -18,6 +18,7 @@ extern int tunable_write_enable;
 extern int tunable_anon_upload_enable;        /* Enable STOR for anon users */
 extern int tunable_anon_mkdir_write_enable;   /* MKD for anon */
 extern int tunable_anon_other_write_enable;   /* APPE DELE RMD RNFR for anon */
+extern int tunable_anon_allow_writable_root;  /* allow writable / for anon */
 extern int tunable_chown_uploads;             /* chown() anon uploaded files */
 extern int tunable_connect_from_port_20;      /* PORT connects from port 20 */
 extern int tunable_xferlog_enable;            /* Log transfers to a file */
@@ -149,6 +150,7 @@ extern const char* tunable_rsa_private_k
 extern const char* tunable_ca_certs_file;
 extern const char* tunable_ssl_sni_hostname;
 extern const char* tunable_cmds_denied;
+extern const char* tunable_passwd_file;
 
 #endif /* VSF_TUNABLES_H */
 
