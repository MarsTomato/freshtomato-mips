--- busybox/Makefile
+++ busybox/Makefile
@@ -471,6 +471,8 @@
 		coreutils/libcoreutils/ \
 		debianutils/ \
 		e2fsprogs/ \
+		e2fsprogs/e2p/ \
+		e2fsprogs/ext2fs/ \
 		editors/ \
 		findutils/ \
 		init/ \
--- busybox/modutils/modprobe.c
+++ busybox/modutils/modprobe.c
@@ -417,7 +417,7 @@
 		if (option_mask32 & OPT_REMOVE) {
 			/* modprobe -r */
 			if (m2->flags & MODULE_FLAG_LOADED) {
-				rc = bb_delete_module(m2->modname, O_EXCL);
+				rc = bb_delete_module(m2->modname, O_NONBLOCK | O_EXCL);
 				if (rc) {
 					if (first) {
 						bb_perror_msg("can't unload module '%s'",
--- busybox/networking/udhcp/dhcpc.c
+++ busybox/networking/udhcp/dhcpc.c
@@ -60,6 +60,7 @@
 	"request\0"        Required_argument "r"
 	"script\0"         Required_argument "s"
 	"timeout\0"        Required_argument "T"
+	"version\0"        No_argument       "v"
 	"retries\0"        Required_argument "t"
 	"tryagain\0"       Required_argument "A"
 	"syslog\0"         No_argument       "S"
@@ -113,7 +114,7 @@
 	[OPTION_IP              ] = sizeof("255.255.255.255 "),
 	[OPTION_IP_PAIR         ] = sizeof("255.255.255.255 ") * 2,
 	[OPTION_STATIC_ROUTES   ] = sizeof("255.255.255.255/32 255.255.255.255 "),
-	[OPTION_6RD             ] = sizeof("132 128 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff 255.255.255.255 "),
+	[OPTION_6RD             ] = sizeof("132 128 FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF 255.255.255.255 "),
 	[OPTION_STRING          ] = 1,
 	[OPTION_STRING_HOST     ] = 1,
 #if ENABLE_FEATURE_UDHCP_RFC3397
@@ -1095,11 +1096,11 @@
 	bb_error_msg("performing DHCP renew");
 	switch (state) {
 	case BOUND:
-		change_listen_mode(LISTEN_KERNEL);
+		change_listen_mode(LISTEN_RAW);
 	case RENEWING:
 	case REBINDING:
-		state = RENEW_REQUESTED;
-		break;
+		//state = RENEW_REQUESTED;
+		//break;
 	case RENEW_REQUESTED: /* impatient are we? fine, square 1 */
 		udhcp_run_script(NULL, "deconfig");
 	case REQUESTING:
@@ -1232,6 +1233,7 @@
 //usage:     "\n			-x lease:3600 - option 51 (lease time)"
 //usage:     "\n			-x 0x3d:0100BEEFC0FFEE - option 61 (client id)"
 //usage:     "\n	-F NAME		Ask server to update DNS mapping for NAME"
+//usage:     "\n	-H,-h NAME	Send NAME as client hostname (default none)"
 //usage:     "\n	-V VENDOR	Vendor identifier (default 'udhcp VERSION')"
 //usage:     "\n	-C		Don't send MAC as client identifier"
 //usage:	IF_UDHCP_VERBOSE(
@@ -1521,7 +1523,7 @@
 				/* 1/2 lease passed, enter renewing state */
 				state = RENEWING;
 				client_config.first_secs = 0; /* make secs field count from 0 */
-				change_listen_mode(LISTEN_KERNEL);
+				change_listen_mode(LISTEN_RAW);
 				log1("entering renew state");
 				/* fall right through */
 			case RENEW_REQUESTED: /* manual (SIGUSR1) renew */
@@ -1578,7 +1580,7 @@
 		switch (udhcp_sp_read(&rfds)) {
 		case SIGUSR1:
 			client_config.first_secs = 0; /* make secs field count from 0 */
-			already_waited_sec = 0;
+			//already_waited_sec = 0;	/* breaks tomato renew button */
 			perform_renew();
 			if (state == RENEW_REQUESTED) {
 				/* We might be either on the same network
@@ -1591,8 +1593,8 @@
 				 * (Ab)use -A TIMEOUT value (usually 20 sec)
 				 * as a cap on the timeout.
 				 */
-				if (timeout > tryagain_timeout)
-					timeout = tryagain_timeout;
+				//if (timeout > tryagain_timeout)	/* breaks tomato renew button */
+					//timeout = tryagain_timeout;	/* breaks tomato renew button */
 				goto case_RENEW_REQUESTED;
 			}
 			/* Start things over */
--- busybox/libbb/bb_strtonum.c
+++ busybox/libbb/bb_strtonum.c
@@ -62,7 +62,8 @@
 
 	/* strtoul("  -4200000000") returns 94967296, errno 0 (!) */
 	/* I don't think that this is right. Preventing this... */
-	if (!isalnum(arg[0])) return ret_ERANGE();
+	char first = (arg[0] != '-' ? arg[0] : arg[1]);
+	if (!isalnum(first)) return ret_ERANGE();
 
 	/* not 100% correct for lib func, but convenient for the caller */
 	errno = 0;
--- busybox/libbb/udp_io.c
+++ busybox/libbb/udp_io.c
@@ -162,8 +162,11 @@
 		}
 # if ENABLE_FEATURE_IPV6 && defined(IPV6_PKTINFO)
 		if (cmsgptr->cmsg_level == IPPROTO_IPV6
-		 && cmsgptr->cmsg_type == IPV6_PKTINFO
-		) {
+		 && (cmsgptr->cmsg_type == IPV6_PKTINFO
+#if defined(IPV6_2292PKTINFO) && defined(IPV6_RECVPKTINFO)
+		     || cmsgptr->cmsg_type == IPV6_2292PKTINFO
+#endif
+		)) {
 			const int IPI6_ADDR_OFF = offsetof(struct in6_pktinfo, ipi6_addr);
 			to->sa_family = AF_INET6;
 			/*#  define pktinfo(cmsgptr) ( (struct in6_pktinfo*)(CMSG_DATA(cmsgptr)) )*/
--- busybox/util-linux/volume_id/util2.c
+++ busybox/util-linux/volume_id/util2.c
@@ -0,0 +1,11 @@
+/* util.c is now split apart, for the benefit of Tomato.  So it can
+ * pull in just enough busybox code to read disc labels, without
+ * dragging in other un-needed stuff.
+ * It would be better if Tomato could use "busybox.so", but busybox
+ * can't currently build a shared .so configuration.
+ */
+
+//kbuild:lib-$(CONFIG_VOLUMEID) += util2.o
+
+#define UTIL2
+#include "util.c"
--- busybox/util-linux/volume_id/util.c
+++ busybox/util-linux/volume_id/util.c
@@ -20,6 +20,7 @@
 
 #include "volume_id_internal.h"
 
+#ifdef UTIL2
 void volume_id_set_unicode16(char *str, size_t len, const uint8_t *buf, enum endian endianess, size_t count)
 {
 	unsigned i, j;
@@ -57,7 +58,9 @@
 	}
 	str[j] = '\0';
 }
+#endif
 
+#ifndef UTIL2
 #ifdef UNUSED
 static const char *usage_to_string(enum volume_id_usage usage_id)
 {
@@ -112,6 +115,9 @@
 }
 #endif
 
+#endif
+#ifdef UTIL2
+
 void volume_id_set_label_string(struct volume_id *id, const uint8_t *buf, size_t count)
 {
 	unsigned i;
@@ -263,3 +269,4 @@
 	id->seekbuf_len = 0;
 	id->seekbuf_off = 0; /* paranoia */
 }
+#endif
