--- busybox/modutils/modprobe.c
+++ busybox/modutils/modprobe.c
@@ -452,7 +452,7 @@
 		if (option_mask32 & OPT_REMOVE) {
 			/* modprobe -r */
 			if (m2->flags & MODULE_FLAG_LOADED) {
-				rc = bb_delete_module(m2->modname, O_EXCL);
+				rc = bb_delete_module(m2->modname, O_NONBLOCK | O_EXCL);
 				if (rc) {
 					if (first) {
 						bb_perror_msg("can't unload module '%s'",
--- busybox/networking/udhcp/dhcpc.c
+++ busybox/networking/udhcp/dhcpc.c
@@ -66,6 +66,7 @@
 	"request\0"        Required_argument "r"
 	"script\0"         Required_argument "s"
 	"timeout\0"        Required_argument "T"
+	"version\0"        No_argument       "v"
 	"retries\0"        Required_argument "t"
 	"tryagain\0"       Required_argument "A"
 	"syslog\0"         No_argument       "S"
@@ -121,7 +122,7 @@
 	[OPTION_IP              ] = sizeof("255.255.255.255 "),
 	[OPTION_IP_PAIR         ] = sizeof("255.255.255.255 ") * 2,
 	[OPTION_STATIC_ROUTES   ] = sizeof("255.255.255.255/32 255.255.255.255 "),
-	[OPTION_6RD             ] = sizeof("132 128 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff 255.255.255.255 "),
+	[OPTION_6RD             ] = sizeof("132 128 FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF 255.255.255.255 "),
 	[OPTION_STRING          ] = 1,
 	[OPTION_STRING_HOST     ] = 1,
 #if ENABLE_FEATURE_UDHCP_RFC3397
@@ -1118,11 +1119,11 @@
 	bb_info_msg("performing DHCP renew");
 	switch (client_data.state) {
 	case BOUND:
-		change_listen_mode(LISTEN_KERNEL);
+		change_listen_mode(LISTEN_RAW);
 	case RENEWING:
 	case REBINDING:
-		client_data.state = RENEW_REQUESTED;
-		break;
+		//client_data.state = RENEW_REQUESTED;
+		//break;
 	case RENEW_REQUESTED: /* impatient are we? fine, square 1 */
 		udhcp_run_script(NULL, "deconfig");
 	case REQUESTING:
@@ -1228,6 +1229,7 @@
 //usage:     "\n			-x 0x3d:0100BEEFC0FFEE - option 61 (client id)"
 //usage:     "\n			-x 14:'\"dumpfile\"' - option 14 (shell-quoted)"
 //usage:     "\n	-F NAME		Ask server to update DNS mapping for NAME"
+//usage:     "\n	-H,-h NAME	Send NAME as client hostname (default none)"
 //usage:     "\n	-V VENDOR	Vendor identifier (default 'udhcp VERSION')"
 //usage:     "\n	-C		Don't send MAC as client identifier"
 //usage:	IF_UDHCP_VERBOSE(
@@ -1520,7 +1522,7 @@
 				/* 1/2 lease passed, enter renewing state */
 				client_data.state = RENEWING;
 				client_data.first_secs = 0; /* make secs field count from 0 */
-				change_listen_mode(LISTEN_KERNEL);
+				change_listen_mode(LISTEN_RAW);
 				log1("entering renew state");
 				/* fall right through */
 			case RENEW_REQUESTED: /* manual (SIGUSR1) renew */
@@ -1589,7 +1591,7 @@
 		switch (udhcp_sp_read()) {
 		case SIGUSR1:
 			client_data.first_secs = 0; /* make secs field count from 0 */
-			already_waited_sec = 0;
+			//already_waited_sec = 0;	/* breaks tomato renew button */
 			perform_renew();
 			if (client_data.state == RENEW_REQUESTED) {
 				/* We might be either on the same network
@@ -1600,8 +1602,8 @@
 				 * is not too big, or else we can send
 				 * futile renew requests for hours.
 				 */
-				if (timeout > 60)
-					timeout = 60;
+				//if (timeout > 60)	/* breaks tomato renew button */
+					//timeout = 60;	/* breaks tomato renew button */
 				goto case_RENEW_REQUESTED;
 			}
 			/* Start things over */
--- busybox/libbb/bb_strtonum.c
+++ busybox/libbb/bb_strtonum.c
@@ -61,7 +61,8 @@
 
 	/* strtoul("  -4200000000") returns 94967296, errno 0 (!) */
 	/* I don't think that this is right. Preventing this... */
-	if (!isalnum(arg[0])) return ret_ERANGE();
+	char first = (arg[0] != '-' ? arg[0] : arg[1]);
+	if (!isalnum(first)) return ret_ERANGE();
 
 	/* not 100% correct for lib func, but convenient for the caller */
 	errno = 0;
--- busybox/util-linux/volume_id/util2.c
+++ busybox/util-linux/volume_id/util2.c
@@ -0,0 +1,11 @@
+/* util.c is now split apart, for the benefit of Tomato.  So it can
+ * pull in just enough busybox code to read disc labels, without
+ * dragging in other un-needed stuff.
+ * It would be better if Tomato could use "busybox.so", but busybox
+ * can't currently build a shared .so configuration.
+ */
+
+//kbuild:lib-$(CONFIG_VOLUMEID) += util2.o
+
+#define UTIL2
+#include "util.c"
--- busybox/util-linux/volume_id/util.c
+++ busybox/util-linux/volume_id/util.c
@@ -20,6 +20,7 @@
 
 #include "volume_id_internal.h"
 
+#ifdef UTIL2
 void volume_id_set_unicode16(char *str, size_t len, const uint8_t *buf, enum endian endianess, size_t count)
 {
 	unsigned i, j;
@@ -57,7 +58,9 @@
 	}
 	str[j] = '\0';
 }
+#endif
 
+#ifndef UTIL2
 #ifdef UNUSED
 static const char *usage_to_string(enum volume_id_usage usage_id)
 {
@@ -112,6 +115,9 @@
 }
 #endif
 
+#endif
+#ifdef UTIL2
+
 void volume_id_set_label_string(struct volume_id *id, const uint8_t *buf, size_t count)
 {
 	unsigned i;
@@ -263,3 +269,4 @@
 	id->seekbuf_len = 0;
 	id->seekbuf_off = 0; /* paranoia */
 }
+#endif
