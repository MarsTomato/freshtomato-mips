--- busybox/modutils/insmod.c
+++ busybox/modutils/insmod.c
@@ -21,6 +21,7 @@
 
 #include "libbb.h"
 #include "modutils.h"
+#include <fnmatch.h>
 
 /* 2.6 style insmod has no options and required filename
  * (not module name - .ko can't be omitted) */
@@ -45,10 +46,34 @@
 //usage:	)
 //usage:#endif
 
+static char *m_filename;
+
+static int FAST_FUNC check_module_name_match(const char *filename,
+		struct stat *statbuf UNUSED_PARAM,
+		void *userdata, int depth UNUSED_PARAM)
+{
+	char *fullname = (char *) userdata;
+	char *tmp;
+
+	if (fullname[0] == '\0')
+		return FALSE;
+
+	tmp = bb_get_last_path_component_nostrip(filename);
+	if (strcmp(tmp, fullname) == 0) {
+		/* Stop searching if we find a match */
+		m_filename = xstrdup(filename);
+		return FALSE;
+	}
+	return TRUE;
+}
+
 int insmod_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int insmod_main(int argc UNUSED_PARAM, char **argv)
 {
+	struct stat st;
 	char *filename;
+	FILE *fp = NULL;
+	int pos;
 	int rc;
 
 	/* Compat note:
@@ -68,9 +93,46 @@
 	if (!filename)
 		bb_show_usage();
 
+	m_filename = NULL;
+
+	pos = strlen(filename) - 2;
+	if (ENABLE_FEATURE_2_4_MODULES && get_linux_version_code() < KERNEL_VERSION(2,6,0)) {
+		if (pos < 0) pos = 0;
+		if (strncmp(&filename[pos], ".o", 2) !=0)
+			filename = xasprintf("%s.o", filename);
+	} else {
+		if (--pos < 0) pos = 0;
+		if (strncmp(&filename[pos], ".ko", 3) !=0)
+			filename = xasprintf("%s.ko", filename);
+	}
+
+	/* Get a filedesc for the module.  Check if we have a complete path */
+	if ((stat(filename, &st) < 0) || (!S_ISREG(st.st_mode)) ||
+	    (fp = fopen_for_read(filename)) == NULL) {
+		/* Hmm.  Could not open it. Search /lib/modules/ */
+		int r;
+		char *module_dir = xmalloc_readlink(CONFIG_DEFAULT_MODULES_DIR);
+		if (!module_dir)
+			module_dir = xstrdup(CONFIG_DEFAULT_MODULES_DIR);
+
+		r = recursive_action(module_dir, ACTION_RECURSE,
+		                     check_module_name_match, NULL, filename, 0);
+		free(module_dir);
+
+		if (r)
+			bb_error_msg_and_die("'%s': module not found", filename);
+		if ((m_filename == NULL) || ((fp = fopen_for_read(m_filename)) == NULL))
+			bb_error_msg_and_die("'%s': module not found", filename);
+
+		filename = m_filename;
+	}
+	if (fp != NULL)
+		fclose(fp);
+
 	rc = bb_init_module(filename, parse_cmdline_module_options(argv, /*quote_spaces:*/ 0));
 	if (rc)
 		bb_error_msg("can't insert '%s': %s", filename, moderror(rc));
 
+	free(m_filename);
 	return rc;
 }
--- busybox/modutils/modutils-24.c
+++ busybox/modutils/modutils-24.c
@@ -3826,7 +3826,7 @@
 		/* Load module into memory and unzip if compressed */
 		image = xmalloc_open_zipped_read_close(m_filename, &image_size);
 		if (!image)
-			return EXIT_FAILURE;
+			return (-errno);
 	}
 
 	m_name = xstrdup(bb_basename(m_filename));
@@ -3857,8 +3857,10 @@
 				"\twhile this kernel is version %s",
 				flag_force_load ? "warning: " : "",
 				m_name, m_strversion, uts.release);
-			if (!flag_force_load)
+			if (!flag_force_load) {
+				exit_status = ESRCH;
 				goto out;
+			}
 		}
 	}
 #endif
