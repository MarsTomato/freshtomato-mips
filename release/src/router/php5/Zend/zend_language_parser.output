Terminals unused in grammar

   T_CHARACTER
   T_BAD_CHARACTER
   "comment (T_COMMENT)"
   "doc comment (T_DOC_COMMENT)"
   "open tag (T_OPEN_TAG)"
   "open tag with echo (T_OPEN_TAG_WITH_ECHO)"
   "close tag (T_CLOSE_TAG)"
   "whitespace (T_WHITESPACE)"


State 232 conflicts: 1 shift/reduce
State 743 conflicts: 2 shift/reduce


Grammar

    0 $accept: start "end of file"

    1 start: top_statement_list

    2 $@1: /* empty */

    3 top_statement_list: top_statement_list $@1 top_statement
    4                   | /* empty */

    5 namespace_name: "identifier (T_STRING)"
    6               | namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"

    7 top_statement: statement
    8              | function_declaration_statement
    9              | class_declaration_statement
   10              | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'
   11              | "namespace (T_NAMESPACE)" namespace_name ';'

   12 $@2: /* empty */

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' $@2 top_statement_list '}'

   14 $@3: /* empty */

   15 top_statement: "namespace (T_NAMESPACE)" '{' $@3 top_statement_list '}'
   16              | "use (T_USE)" use_declarations ';'
   17              | "use (T_USE)" "function (T_FUNCTION)" use_function_declarations ';'
   18              | "use (T_USE)" "const (T_CONST)" use_const_declarations ';'
   19              | constant_declaration ';'

   20 use_declarations: use_declarations ',' use_declaration
   21                 | use_declaration

   22 use_declaration: namespace_name
   23                | namespace_name "as (T_AS)" "identifier (T_STRING)"
   24                | "\\ (T_NS_SEPARATOR)" namespace_name
   25                | "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)"

   26 use_function_declarations: use_function_declarations ',' use_function_declaration
   27                          | use_function_declaration

   28 use_function_declaration: namespace_name
   29                         | namespace_name "as (T_AS)" "identifier (T_STRING)"
   30                         | "\\ (T_NS_SEPARATOR)" namespace_name
   31                         | "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)"

   32 use_const_declarations: use_const_declarations ',' use_const_declaration
   33                       | use_const_declaration

   34 use_const_declaration: namespace_name
   35                      | namespace_name "as (T_AS)" "identifier (T_STRING)"
   36                      | "\\ (T_NS_SEPARATOR)" namespace_name
   37                      | "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)"

   38 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' static_scalar
   39                     | "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar

   40 $@4: /* empty */

   41 inner_statement_list: inner_statement_list $@4 inner_statement
   42                     | /* empty */

   43 inner_statement: statement
   44                | function_declaration_statement
   45                | class_declaration_statement
   46                | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'

   47 statement: unticked_statement
   48          | "identifier (T_STRING)" ':'

   49 unticked_statement: '{' inner_statement_list '}'

   50 $@5: /* empty */

   51 $@6: /* empty */

   52 unticked_statement: "if (T_IF)" parenthesis_expr $@5 statement $@6 elseif_list else_single

   53 $@7: /* empty */

   54 $@8: /* empty */

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

   56 $@9: /* empty */

   57 @10: /* empty */

   58 unticked_statement: "while (T_WHILE)" $@9 parenthesis_expr @10 while_statement

   59 $@11: /* empty */

   60 $@12: /* empty */

   61 unticked_statement: "do (T_DO)" $@11 statement "while (T_WHILE)" $@12 parenthesis_expr ';'

   62 $@13: /* empty */

   63 $@14: /* empty */

   64 $@15: /* empty */

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement

   66 $@16: /* empty */

   67 unticked_statement: "switch (T_SWITCH)" parenthesis_expr $@16 switch_case_list
   68                   | "break (T_BREAK)" ';'
   69                   | "break (T_BREAK)" expr ';'
   70                   | "continue (T_CONTINUE)" ';'
   71                   | "continue (T_CONTINUE)" expr ';'
   72                   | "return (T_RETURN)" ';'
   73                   | "return (T_RETURN)" expr_without_variable ';'
   74                   | "return (T_RETURN)" variable ';'
   75                   | yield_expr ';'
   76                   | "global (T_GLOBAL)" global_var_list ';'
   77                   | "static (T_STATIC)" static_var_list ';'
   78                   | "echo (T_ECHO)" echo_expr_list ';'
   79                   | T_INLINE_HTML
   80                   | expr ';'
   81                   | "unset (T_UNSET)" '(' unset_variables ')' ';'

   82 $@17: /* empty */

   83 $@18: /* empty */

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement

   85 $@19: /* empty */

   86 $@20: /* empty */

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement

   88 $@21: /* empty */

   89 unticked_statement: "declare (T_DECLARE)" $@21 '(' declare_list ')' declare_statement
   90                   | ';'

   91 $@22: /* empty */

   92 $@23: /* empty */

   93 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list '}' catch_statement $@23 finally_statement
   94                   | "throw (T_THROW)" expr ';'
   95                   | "goto (T_GOTO)" "identifier (T_STRING)" ';'

   96 catch_statement: /* empty */

   97 $@24: /* empty */

   98 $@25: /* empty */

   99 $@26: /* empty */

  100 $@27: /* empty */

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 additional_catches

  102 finally_statement: /* empty */

  103 $@28: /* empty */

  104 finally_statement: "finally (T_FINALLY)" $@28 '{' inner_statement_list '}'

  105 additional_catches: non_empty_additional_catches
  106                   | /* empty */

  107 non_empty_additional_catches: additional_catch
  108                             | non_empty_additional_catches additional_catch

  109 @29: /* empty */

  110 $@30: /* empty */

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' $@30 '{' inner_statement_list '}'

  112 unset_variables: unset_variable
  113                | unset_variables ',' unset_variable

  114 unset_variable: variable

  115 function_declaration_statement: unticked_function_declaration_statement

  116 class_declaration_statement: unticked_class_declaration_statement

  117 is_reference: /* empty */
  118             | '&'

  119 is_variadic: /* empty */
  120            | "... (T_ELLIPSIS)"

  121 $@31: /* empty */

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 '(' parameter_list ')' '{' inner_statement_list '}'

  123 $@32: /* empty */

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@32 implements_list '{' class_statement_list '}'

  125 $@33: /* empty */

  126 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@33 interface_extends_list '{' class_statement_list '}'

  127 class_entry_type: "class (T_CLASS)"
  128                 | "abstract (T_ABSTRACT)" "class (T_CLASS)"
  129                 | "trait (T_TRAIT)"
  130                 | "final (T_FINAL)" "class (T_CLASS)"

  131 extends_from: /* empty */
  132             | "extends (T_EXTENDS)" fully_qualified_class_name

  133 interface_entry: "interface (T_INTERFACE)"

  134 interface_extends_list: /* empty */
  135                       | "extends (T_EXTENDS)" interface_list

  136 implements_list: /* empty */
  137                | "implements (T_IMPLEMENTS)" interface_list

  138 interface_list: fully_qualified_class_name
  139               | interface_list ',' fully_qualified_class_name

  140 foreach_optional_arg: /* empty */
  141                     | "=> (T_DOUBLE_ARROW)" foreach_variable

  142 foreach_variable: variable
  143                 | '&' variable

  144 $@34: /* empty */

  145 foreach_variable: "list (T_LIST)" '(' $@34 assignment_list ')'

  146 for_statement: statement
  147              | ':' inner_statement_list "endfor (T_ENDFOR)" ';'

  148 foreach_statement: statement
  149                  | ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';'

  150 declare_statement: statement
  151                  | ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

  152 declare_list: "identifier (T_STRING)" '=' static_scalar
  153             | declare_list ',' "identifier (T_STRING)" '=' static_scalar

  154 switch_case_list: '{' case_list '}'
  155                 | '{' ';' case_list '}'
  156                 | ':' case_list "endswitch (T_ENDSWITCH)" ';'
  157                 | ':' ';' case_list "endswitch (T_ENDSWITCH)" ';'

  158 case_list: /* empty */

  159 $@35: /* empty */

  160 case_list: case_list "case (T_CASE)" expr case_separator $@35 inner_statement_list

  161 $@36: /* empty */

  162 case_list: case_list "default (T_DEFAULT)" case_separator $@36 inner_statement_list

  163 case_separator: ':'
  164               | ';'

  165 while_statement: statement
  166                | ':' inner_statement_list "endwhile (T_ENDWHILE)" ';'

  167 elseif_list: /* empty */

  168 $@37: /* empty */

  169 elseif_list: elseif_list "elseif (T_ELSEIF)" parenthesis_expr $@37 statement

  170 new_elseif_list: /* empty */

  171 $@38: /* empty */

  172 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" parenthesis_expr ':' $@38 inner_statement_list

  173 else_single: /* empty */
  174            | "else (T_ELSE)" statement

  175 new_else_single: /* empty */
  176                | "else (T_ELSE)" ':' inner_statement_list

  177 parameter_list: non_empty_parameter_list
  178               | /* empty */

  179 non_empty_parameter_list: parameter
  180                         | non_empty_parameter_list ',' parameter

  181 parameter: optional_class_type is_reference is_variadic "variable (T_VARIABLE)"
  182          | optional_class_type is_reference is_variadic "variable (T_VARIABLE)" '=' static_scalar

  183 optional_class_type: /* empty */
  184                    | "array (T_ARRAY)"
  185                    | "callable (T_CALLABLE)"
  186                    | fully_qualified_class_name

  187 function_call_parameter_list: '(' ')'
  188                             | '(' non_empty_function_call_parameter_list ')'
  189                             | '(' yield_expr ')'

  190 non_empty_function_call_parameter_list: function_call_parameter
  191                                       | non_empty_function_call_parameter_list ',' function_call_parameter

  192 function_call_parameter: expr_without_variable
  193                        | variable
  194                        | '&' w_variable
  195                        | "... (T_ELLIPSIS)" expr

  196 global_var_list: global_var_list ',' global_var
  197                | global_var

  198 global_var: "variable (T_VARIABLE)"
  199           | '$' r_variable
  200           | '$' '{' expr '}'

  201 static_var_list: static_var_list ',' "variable (T_VARIABLE)"
  202                | static_var_list ',' "variable (T_VARIABLE)" '=' static_scalar
  203                | "variable (T_VARIABLE)"
  204                | "variable (T_VARIABLE)" '=' static_scalar

  205 class_statement_list: class_statement_list class_statement
  206                     | /* empty */

  207 $@39: /* empty */

  208 class_statement: variable_modifiers $@39 class_variable_declaration ';'
  209                | class_constant_declaration ';'
  210                | trait_use_statement

  211 $@40: /* empty */

  212 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@40 '(' parameter_list ')' method_body

  213 trait_use_statement: "use (T_USE)" trait_list trait_adaptations

  214 trait_list: fully_qualified_class_name
  215           | trait_list ',' fully_qualified_class_name

  216 trait_adaptations: ';'
  217                  | '{' trait_adaptation_list '}'

  218 trait_adaptation_list: /* empty */
  219                      | non_empty_trait_adaptation_list

  220 non_empty_trait_adaptation_list: trait_adaptation_statement
  221                                | non_empty_trait_adaptation_list trait_adaptation_statement

  222 trait_adaptation_statement: trait_precedence ';'
  223                           | trait_alias ';'

  224 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" trait_reference_list

  225 trait_reference_list: fully_qualified_class_name
  226                     | trait_reference_list ',' fully_qualified_class_name

  227 trait_method_reference: "identifier (T_STRING)"
  228                       | trait_method_reference_fully_qualified

  229 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  230 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers "identifier (T_STRING)"
  231            | trait_method_reference "as (T_AS)" member_modifier

  232 trait_modifiers: /* empty */
  233                | member_modifier

  234 method_body: ';'
  235            | '{' inner_statement_list '}'

  236 variable_modifiers: non_empty_member_modifiers
  237                   | "var (T_VAR)"

  238 method_modifiers: /* empty */
  239                 | non_empty_member_modifiers

  240 non_empty_member_modifiers: member_modifier
  241                           | non_empty_member_modifiers member_modifier

  242 member_modifier: "public (T_PUBLIC)"
  243                | "protected (T_PROTECTED)"
  244                | "private (T_PRIVATE)"
  245                | "static (T_STATIC)"
  246                | "abstract (T_ABSTRACT)"
  247                | "final (T_FINAL)"

  248 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)"
  249                           | class_variable_declaration ',' "variable (T_VARIABLE)" '=' static_scalar
  250                           | "variable (T_VARIABLE)"
  251                           | "variable (T_VARIABLE)" '=' static_scalar

  252 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' static_scalar
  253                           | "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar

  254 echo_expr_list: echo_expr_list ',' expr
  255               | expr

  256 for_expr: /* empty */
  257         | non_empty_for_expr

  258 $@41: /* empty */

  259 non_empty_for_expr: non_empty_for_expr ',' $@41 expr
  260                   | expr

  261 chaining_method_or_property: chaining_method_or_property variable_property
  262                            | variable_property

  263 chaining_dereference: chaining_dereference '[' dim_offset ']'
  264                     | '[' dim_offset ']'

  265 $@42: /* empty */

  266 chaining_instance_call: chaining_dereference $@42 chaining_method_or_property
  267                       | chaining_dereference
  268                       | chaining_method_or_property

  269 instance_call: /* empty */

  270 $@43: /* empty */

  271 instance_call: $@43 chaining_instance_call

  272 $@44: /* empty */

  273 new_expr: "new (T_NEW)" class_name_reference $@44 ctor_arguments

  274 $@45: /* empty */

  275 expr_without_variable: "list (T_LIST)" '(' $@45 assignment_list ')' '=' expr
  276                      | variable '=' expr
  277                      | variable '=' '&' variable

  278 $@46: /* empty */

  279 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  280                      | "clone (T_CLONE)" expr
  281                      | variable "+= (T_PLUS_EQUAL)" expr
  282                      | variable "-= (T_MINUS_EQUAL)" expr
  283                      | variable "*= (T_MUL_EQUAL)" expr
  284                      | variable "**= (T_POW_EQUAL)" expr
  285                      | variable "/= (T_DIV_EQUAL)" expr
  286                      | variable ".= (T_CONCAT_EQUAL)" expr
  287                      | variable "%= (T_MOD_EQUAL)" expr
  288                      | variable "&= (T_AND_EQUAL)" expr
  289                      | variable "|= (T_OR_EQUAL)" expr
  290                      | variable "^= (T_XOR_EQUAL)" expr
  291                      | variable "<<= (T_SL_EQUAL)" expr
  292                      | variable ">>= (T_SR_EQUAL)" expr
  293                      | rw_variable "++ (T_INC)"
  294                      | "++ (T_INC)" rw_variable
  295                      | rw_variable "-- (T_DEC)"
  296                      | "-- (T_DEC)" rw_variable

  297 $@47: /* empty */

  298 expr_without_variable: expr "|| (T_BOOLEAN_OR)" $@47 expr

  299 $@48: /* empty */

  300 expr_without_variable: expr "&& (T_BOOLEAN_AND)" $@48 expr

  301 $@49: /* empty */

  302 expr_without_variable: expr "or (T_LOGICAL_OR)" $@49 expr

  303 $@50: /* empty */

  304 expr_without_variable: expr "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr "xor (T_LOGICAL_XOR)" expr
  306                      | expr '|' expr
  307                      | expr '&' expr
  308                      | expr '^' expr
  309                      | expr '.' expr
  310                      | expr '+' expr
  311                      | expr '-' expr
  312                      | expr '*' expr
  313                      | expr "** (T_POW)" expr
  314                      | expr '/' expr
  315                      | expr '%' expr
  316                      | expr "<< (T_SL)" expr
  317                      | expr ">> (T_SR)" expr
  318                      | '+' expr
  319                      | '-' expr
  320                      | '!' expr
  321                      | '~' expr
  322                      | expr "=== (T_IS_IDENTICAL)" expr
  323                      | expr "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr "== (T_IS_EQUAL)" expr
  325                      | expr "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr '<' expr
  327                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr '>' expr
  329                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr "instanceof (T_INSTANCEOF)" class_name_reference
  331                      | parenthesis_expr
  332                      | new_expr

  333 @51: /* empty */

  334 expr_without_variable: '(' new_expr ')' @51 instance_call

  335 $@52: /* empty */

  336 $@53: /* empty */

  337 expr_without_variable: expr '?' $@52 expr ':' $@53 expr

  338 $@54: /* empty */

  339 expr_without_variable: expr '?' ':' $@54 expr
  340                      | internal_functions_in_yacc
  341                      | "(int) (T_INT_CAST)" expr
  342                      | "(double) (T_DOUBLE_CAST)" expr
  343                      | "(string) (T_STRING_CAST)" expr
  344                      | "(array) (T_ARRAY_CAST)" expr
  345                      | "(object) (T_OBJECT_CAST)" expr
  346                      | "(bool) (T_BOOL_CAST)" expr
  347                      | "(unset) (T_UNSET_CAST)" expr
  348                      | "exit (T_EXIT)" exit_expr

  349 $@55: /* empty */

  350 expr_without_variable: '@' $@55 expr
  351                      | scalar
  352                      | combined_scalar_offset
  353                      | combined_scalar
  354                      | '`' backticks_expr '`'
  355                      | "print (T_PRINT)" expr
  356                      | "yield (T_YIELD)"

  357 @56: /* empty */

  358 expr_without_variable: function is_reference @56 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

  359 @57: /* empty */

  360 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

  361 yield_expr: "yield (T_YIELD)" expr_without_variable
  362           | "yield (T_YIELD)" variable
  363           | "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" expr_without_variable
  364           | "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" variable

  365 combined_scalar_offset: combined_scalar '[' dim_offset ']'
  366                       | combined_scalar_offset '[' dim_offset ']'
  367                       | "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '[' dim_offset ']'
  368                       | general_constant '[' dim_offset ']'

  369 combined_scalar: "array (T_ARRAY)" '(' array_pair_list ')'
  370                | '[' array_pair_list ']'

  371 function: "function (T_FUNCTION)"

  372 lexical_vars: /* empty */
  373             | "use (T_USE)" '(' lexical_var_list ')'

  374 lexical_var_list: lexical_var_list ',' "variable (T_VARIABLE)"
  375                 | lexical_var_list ',' '&' "variable (T_VARIABLE)"
  376                 | "variable (T_VARIABLE)"
  377                 | '&' "variable (T_VARIABLE)"

  378 @58: /* empty */

  379 function_call: namespace_name @58 function_call_parameter_list

  380 @59: /* empty */

  381 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name @59 function_call_parameter_list

  382 @60: /* empty */

  383 function_call: "\\ (T_NS_SEPARATOR)" namespace_name @60 function_call_parameter_list

  384 @61: /* empty */

  385 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name @61 function_call_parameter_list

  386 $@62: /* empty */

  387 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@62 function_call_parameter_list

  388 $@63: /* empty */

  389 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name $@63 function_call_parameter_list

  390 $@64: /* empty */

  391 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@64 function_call_parameter_list

  392 $@65: /* empty */

  393 function_call: variable_without_objects $@65 function_call_parameter_list

  394 class_name: "static (T_STATIC)"
  395           | namespace_name
  396           | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  397           | "\\ (T_NS_SEPARATOR)" namespace_name

  398 fully_qualified_class_name: namespace_name
  399                           | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  400                           | "\\ (T_NS_SEPARATOR)" namespace_name

  401 class_name_reference: class_name
  402                     | dynamic_class_name_reference

  403 $@66: /* empty */

  404 $@67: /* empty */

  405 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" $@66 object_property $@67 dynamic_class_name_variable_properties
  406                             | base_variable

  407 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties dynamic_class_name_variable_property
  408                                       | /* empty */

  409 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" object_property

  410 exit_expr: /* empty */
  411          | '(' ')'
  412          | parenthesis_expr

  413 backticks_expr: /* empty */
  414               | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  415               | encaps_list

  416 ctor_arguments: /* empty */
  417               | function_call_parameter_list

  418 common_scalar: "integer number (T_LNUMBER)"
  419              | "floating-point number (T_DNUMBER)"
  420              | "quoted-string (T_CONSTANT_ENCAPSED_STRING)"
  421              | "__LINE__ (T_LINE)"
  422              | "__FILE__ (T_FILE)"
  423              | "__DIR__ (T_DIR)"
  424              | "__TRAIT__ (T_TRAIT_C)"
  425              | "__METHOD__ (T_METHOD_C)"
  426              | "__FUNCTION__ (T_FUNC_C)"
  427              | "__NAMESPACE__ (T_NS_C)"
  428              | "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  429              | "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)"

  430 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  431 static_scalar: static_scalar_value

  432 static_scalar_value: common_scalar
  433                    | static_class_name_scalar
  434                    | namespace_name
  435                    | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  436                    | "\\ (T_NS_SEPARATOR)" namespace_name
  437                    | "array (T_ARRAY)" '(' static_array_pair_list ')'
  438                    | '[' static_array_pair_list ']'
  439                    | static_class_constant
  440                    | "__CLASS__ (T_CLASS_C)"
  441                    | static_operation

  442 static_operation: static_scalar_value '[' static_scalar_value ']'
  443                 | static_scalar_value '+' static_scalar_value
  444                 | static_scalar_value '-' static_scalar_value
  445                 | static_scalar_value '*' static_scalar_value
  446                 | static_scalar_value "** (T_POW)" static_scalar_value
  447                 | static_scalar_value '/' static_scalar_value
  448                 | static_scalar_value '%' static_scalar_value
  449                 | '!' static_scalar_value
  450                 | '~' static_scalar_value
  451                 | static_scalar_value '|' static_scalar_value
  452                 | static_scalar_value '&' static_scalar_value
  453                 | static_scalar_value '^' static_scalar_value
  454                 | static_scalar_value "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value '.' static_scalar_value
  457                 | static_scalar_value "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value '<' static_scalar_value
  467                 | static_scalar_value '>' static_scalar_value
  468                 | static_scalar_value "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value '?' ':' static_scalar_value
  471                 | static_scalar_value '?' static_scalar_value ':' static_scalar_value
  472                 | '+' static_scalar_value
  473                 | '-' static_scalar_value
  474                 | '(' static_scalar_value ')'

  475 general_constant: class_constant
  476                 | namespace_name
  477                 | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  478                 | "\\ (T_NS_SEPARATOR)" namespace_name

  479 scalar: "variable name (T_STRING_VARNAME)"
  480       | general_constant
  481       | class_name_scalar
  482       | common_scalar
  483       | '"' encaps_list '"'
  484       | "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)"
  485       | "__CLASS__ (T_CLASS_C)"

  486 static_array_pair_list: /* empty */
  487                       | non_empty_static_array_pair_list possible_comma

  488 possible_comma: /* empty */
  489               | ','

  490 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar_value "=> (T_DOUBLE_ARROW)" static_scalar_value
  491                                 | non_empty_static_array_pair_list ',' static_scalar_value
  492                                 | static_scalar_value "=> (T_DOUBLE_ARROW)" static_scalar_value
  493                                 | static_scalar_value

  494 expr: r_variable
  495     | expr_without_variable

  496 parenthesis_expr: '(' expr ')'
  497                 | '(' yield_expr ')'

  498 r_variable: variable

  499 w_variable: variable

  500 rw_variable: variable

  501 $@68: /* empty */

  502 $@69: /* empty */

  503 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@68 object_property $@69 method_or_not variable_properties
  504         | base_variable_with_function_calls

  505 variable_properties: variable_properties variable_property
  506                    | /* empty */

  507 $@70: /* empty */

  508 variable_property: "-> (T_OBJECT_OPERATOR)" object_property $@70 method_or_not

  509 array_method_dereference: array_method_dereference '[' dim_offset ']'
  510                         | method '[' dim_offset ']'

  511 @71: /* empty */

  512 method: @71 function_call_parameter_list

  513 method_or_not: method
  514              | array_method_dereference
  515              | /* empty */

  516 variable_without_objects: reference_variable
  517                         | simple_indirect_reference reference_variable

  518 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  519              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

  520 variable_class_name: reference_variable

  521 array_function_dereference: array_function_dereference '[' dim_offset ']'

  522 $@72: /* empty */

  523 array_function_dereference: function_call $@72 '[' dim_offset ']'

  524 base_variable_with_function_calls: base_variable
  525                                  | array_function_dereference
  526                                  | function_call

  527 base_variable: reference_variable
  528              | simple_indirect_reference reference_variable
  529              | static_member

  530 reference_variable: reference_variable '[' dim_offset ']'
  531                   | reference_variable '{' expr '}'
  532                   | compound_variable

  533 compound_variable: "variable (T_VARIABLE)"
  534                  | '$' '{' expr '}'

  535 dim_offset: /* empty */
  536           | expr

  537 object_property: object_dim_list

  538 $@73: /* empty */

  539 object_property: variable_without_objects $@73

  540 object_dim_list: object_dim_list '[' dim_offset ']'
  541                | object_dim_list '{' expr '}'
  542                | variable_name

  543 variable_name: "identifier (T_STRING)"
  544              | '{' expr '}'

  545 simple_indirect_reference: '$'
  546                          | simple_indirect_reference '$'

  547 assignment_list: assignment_list ',' assignment_list_element
  548                | assignment_list_element

  549 assignment_list_element: variable

  550 $@74: /* empty */

  551 assignment_list_element: "list (T_LIST)" '(' $@74 assignment_list ')'
  552                        | /* empty */

  553 array_pair_list: /* empty */
  554                | non_empty_array_pair_list possible_comma

  555 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" expr
  556                          | non_empty_array_pair_list ',' expr
  557                          | expr "=> (T_DOUBLE_ARROW)" expr
  558                          | expr
  559                          | non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  560                          | non_empty_array_pair_list ',' '&' w_variable
  561                          | expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  562                          | '&' w_variable

  563 encaps_list: encaps_list encaps_var
  564            | encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  565            | encaps_var
  566            | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var

  567 encaps_var: "variable (T_VARIABLE)"

  568 $@75: /* empty */

  569 encaps_var: "variable (T_VARIABLE)" '[' $@75 encaps_var_offset ']'
  570           | "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"
  571           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}'
  572           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}'
  573           | "{$ (T_CURLY_OPEN)" variable '}'

  574 encaps_var_offset: "identifier (T_STRING)"
  575                  | "number (T_NUM_STRING)"
  576                  | "variable (T_VARIABLE)"

  577 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')'
  578                           | "empty (T_EMPTY)" '(' variable ')'
  579                           | "empty (T_EMPTY)" '(' expr_without_variable ')'
  580                           | "include (T_INCLUDE)" expr
  581                           | "include_once (T_INCLUDE_ONCE)" expr
  582                           | "eval (T_EVAL)" '(' expr ')'
  583                           | "require (T_REQUIRE)" expr
  584                           | "require_once (T_REQUIRE_ONCE)" expr

  585 isset_variables: isset_variable

  586 $@76: /* empty */

  587 isset_variables: isset_variables ',' $@76 isset_variable

  588 isset_variable: variable
  589               | expr_without_variable

  590 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"
  591               | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  592 static_class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)"

  593 class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)"


Terminals, with rules where they appear

"end of file" (0) 0
'!' (33) 320 449
'"' (34) 483
'$' (36) 199 200 534 545 546
'%' (37) 315 448
'&' (38) 118 143 194 277 279 307 375 377 452 559 560 561 562
'(' (40) 10 46 65 81 84 87 89 101 111 122 145 187 188 189 212 275 334
    358 360 369 373 411 437 474 496 497 551 577 578 579 582
')' (41) 10 46 65 81 84 87 89 101 111 122 145 187 188 189 212 275 334
    358 360 369 373 411 437 474 496 497 551 577 578 579 582
'*' (42) 312 445
'+' (43) 310 318 443 472
',' (44) 20 26 32 38 113 139 153 180 191 196 201 202 215 226 248 249
    252 254 259 374 375 489 490 491 547 555 556 559 560 587
'-' (45) 311 319 444 473
'.' (46) 309 456
'/' (47) 314 447
':' (58) 48 55 147 149 151 156 157 163 166 172 176 337 339 470 471
';' (59) 10 11 16 17 18 19 46 55 61 65 68 69 70 71 72 73 74 75 76 77
    78 80 81 90 94 95 147 149 151 155 156 157 164 166 208 209 216 222
    223 234
'<' (60) 326 466
'=' (61) 38 39 152 153 182 202 204 249 251 252 253 275 276 277 279
'>' (62) 328 467
'?' (63) 337 339 470 471
'@' (64) 350
'[' (91) 263 264 365 366 367 368 370 438 442 509 510 521 523 530 540
    569 572
']' (93) 263 264 365 366 367 368 370 438 442 509 510 521 523 530 540
    569 572
'^' (94) 308 453
'`' (96) 354
'{' (123) 13 15 49 93 101 104 111 122 124 126 154 155 200 217 235 358
    360 531 534 541 544
'|' (124) 306 451
'}' (125) 13 15 49 93 101 104 111 122 124 126 154 155 200 217 235 358
    360 531 534 541 544 571 572 573
'~' (126) 321 450
error (256)
"require_once (T_REQUIRE_ONCE)" (258) 584
"require (T_REQUIRE)" (259) 583
"eval (T_EVAL)" (260) 582
"include_once (T_INCLUDE_ONCE)" (261) 581
"include (T_INCLUDE)" (262) 580
"or (T_LOGICAL_OR)" (263) 302 459
"xor (T_LOGICAL_XOR)" (264) 305 457
"and (T_LOGICAL_AND)" (265) 304 458
"print (T_PRINT)" (266) 355
"yield (T_YIELD)" (267) 356 361 362 363 364
"**= (T_POW_EQUAL)" (268) 284
">>= (T_SR_EQUAL)" (269) 292
"<<= (T_SL_EQUAL)" (270) 291
"^= (T_XOR_EQUAL)" (271) 290
"|= (T_OR_EQUAL)" (272) 289
"&= (T_AND_EQUAL)" (273) 288
"%= (T_MOD_EQUAL)" (274) 287
".= (T_CONCAT_EQUAL)" (275) 286
"/= (T_DIV_EQUAL)" (276) 285
"*= (T_MUL_EQUAL)" (277) 283
"-= (T_MINUS_EQUAL)" (278) 282
"+= (T_PLUS_EQUAL)" (279) 281
"|| (T_BOOLEAN_OR)" (280) 298 461
"&& (T_BOOLEAN_AND)" (281) 300 460
"!== (T_IS_NOT_IDENTICAL)" (282) 323 463
"=== (T_IS_IDENTICAL)" (283) 322 462
"!= (T_IS_NOT_EQUAL)" (284) 325 465
"== (T_IS_EQUAL)" (285) 324 464
">= (T_IS_GREATER_OR_EQUAL)" (286) 329 469
"<= (T_IS_SMALLER_OR_EQUAL)" (287) 327 468
">> (T_SR)" (288) 317 455
"<< (T_SL)" (289) 316 454
"instanceof (T_INSTANCEOF)" (290) 330
"(unset) (T_UNSET_CAST)" (291) 347
"(bool) (T_BOOL_CAST)" (292) 346
"(object) (T_OBJECT_CAST)" (293) 345
"(array) (T_ARRAY_CAST)" (294) 344
"(string) (T_STRING_CAST)" (295) 343
"(double) (T_DOUBLE_CAST)" (296) 342
"(int) (T_INT_CAST)" (297) 341
"-- (T_DEC)" (298) 295 296
"++ (T_INC)" (299) 293 294
"** (T_POW)" (300) 313 446
"clone (T_CLONE)" (301) 280
"new (T_NEW)" (302) 273 279
"exit (T_EXIT)" (303) 348
"if (T_IF)" (304) 52 55
"elseif (T_ELSEIF)" (305) 169 172
"else (T_ELSE)" (306) 174 176
"endif (T_ENDIF)" (307) 55
"integer number (T_LNUMBER)" (308) 418
"floating-point number (T_DNUMBER)" (309) 419
"identifier (T_STRING)" (310) 5 6 23 25 29 31 35 37 38 39 48 95 122
    124 126 152 153 212 227 229 230 252 253 430 543 570 574 590 591
"variable name (T_STRING_VARNAME)" (311) 479 572
"variable (T_VARIABLE)" (312) 101 111 181 182 198 201 202 203 204 248
    249 250 251 374 375 376 377 533 567 569 570 576
"number (T_NUM_STRING)" (313) 575
T_INLINE_HTML (314) 79
T_CHARACTER (315)
T_BAD_CHARACTER (316)
"quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" (317) 414
    428 564 566
"quoted-string (T_CONSTANT_ENCAPSED_STRING)" (318) 367 420
"echo (T_ECHO)" (319) 78
"do (T_DO)" (320) 61
"while (T_WHILE)" (321) 58 61
"endwhile (T_ENDWHILE)" (322) 166
"for (T_FOR)" (323) 65
"endfor (T_ENDFOR)" (324) 147
"foreach (T_FOREACH)" (325) 84 87
"endforeach (T_ENDFOREACH)" (326) 149
"declare (T_DECLARE)" (327) 89
"enddeclare (T_ENDDECLARE)" (328) 151
"as (T_AS)" (329) 23 25 29 31 35 37 84 87 230 231
"switch (T_SWITCH)" (330) 67
"endswitch (T_ENDSWITCH)" (331) 156 157
"case (T_CASE)" (332) 160
"default (T_DEFAULT)" (333) 162
"break (T_BREAK)" (334) 68 69
"continue (T_CONTINUE)" (335) 70 71
"goto (T_GOTO)" (336) 95
"function (T_FUNCTION)" (337) 17 371
"const (T_CONST)" (338) 18 39 253
"return (T_RETURN)" (339) 72 73 74
"try (T_TRY)" (340) 93
"catch (T_CATCH)" (341) 101 111
"finally (T_FINALLY)" (342) 104
"throw (T_THROW)" (343) 94
"use (T_USE)" (344) 16 17 18 213 373
"insteadof (T_INSTEADOF)" (345) 224
"global (T_GLOBAL)" (346) 76
"public (T_PUBLIC)" (347) 242
"protected (T_PROTECTED)" (348) 243
"private (T_PRIVATE)" (349) 244
"final (T_FINAL)" (350) 130 247
"abstract (T_ABSTRACT)" (351) 128 246
"static (T_STATIC)" (352) 77 245 360 394
"var (T_VAR)" (353) 237
"unset (T_UNSET)" (354) 81
"isset (T_ISSET)" (355) 577
"empty (T_EMPTY)" (356) 578 579
"__halt_compiler (T_HALT_COMPILER)" (357) 10 46
"class (T_CLASS)" (358) 127 128 130 592 593
"trait (T_TRAIT)" (359) 129
"interface (T_INTERFACE)" (360) 133
"extends (T_EXTENDS)" (361) 132 135
"implements (T_IMPLEMENTS)" (362) 137
"-> (T_OBJECT_OPERATOR)" (363) 405 409 503 508 570
"=> (T_DOUBLE_ARROW)" (364) 141 363 364 490 492 555 557 559 561
"list (T_LIST)" (365) 145 275 551
"array (T_ARRAY)" (366) 184 369 437
"callable (T_CALLABLE)" (367) 185
"__CLASS__ (T_CLASS_C)" (368) 440 485
"__TRAIT__ (T_TRAIT_C)" (369) 424
"__METHOD__ (T_METHOD_C)" (370) 425
"__FUNCTION__ (T_FUNC_C)" (371) 426
"__LINE__ (T_LINE)" (372) 421
"__FILE__ (T_FILE)" (373) 422
"comment (T_COMMENT)" (374)
"doc comment (T_DOC_COMMENT)" (375)
"open tag (T_OPEN_TAG)" (376)
"open tag with echo (T_OPEN_TAG_WITH_ECHO)" (377)
"close tag (T_CLOSE_TAG)" (378)
"whitespace (T_WHITESPACE)" (379)
"heredoc start (T_START_HEREDOC)" (380) 428 429 484
"heredoc end (T_END_HEREDOC)" (381) 428 429 484
"${ (T_DOLLAR_OPEN_CURLY_BRACES)" (382) 571 572
"{$ (T_CURLY_OPEN)" (383) 573
":: (T_PAAMAYIM_NEKUDOTAYIM)" (384) 229 385 387 389 391 430 518 519
    590 591 592 593
"namespace (T_NAMESPACE)" (385) 11 13 15 381 396 399 435 477
"__NAMESPACE__ (T_NS_C)" (386) 427
"__DIR__ (T_DIR)" (387) 423
"\\ (T_NS_SEPARATOR)" (388) 6 24 25 30 31 36 37 381 383 396 397 399
    400 435 436 477 478
"... (T_ELLIPSIS)" (389) 120 195


Nonterminals, with rules where they appear

$accept (163)
    on left: 0
start (164)
    on left: 1, on right: 0
top_statement_list (165)
    on left: 3 4, on right: 1 3 13 15
$@1 (166)
    on left: 2, on right: 3
namespace_name (167)
    on left: 5 6, on right: 6 11 13 22 23 24 25 28 29 30 31 34 35 36
    37 379 381 383 395 396 397 398 399 400 434 435 436 476 477 478
top_statement (168)
    on left: 7 8 9 10 11 13 15 16 17 18 19, on right: 3
$@2 (169)
    on left: 12, on right: 13
$@3 (170)
    on left: 14, on right: 15
use_declarations (171)
    on left: 20 21, on right: 16 20
use_declaration (172)
    on left: 22 23 24 25, on right: 20 21
use_function_declarations (173)
    on left: 26 27, on right: 17 26
use_function_declaration (174)
    on left: 28 29 30 31, on right: 26 27
use_const_declarations (175)
    on left: 32 33, on right: 18 32
use_const_declaration (176)
    on left: 34 35 36 37, on right: 32 33
constant_declaration (177)
    on left: 38 39, on right: 19 38
inner_statement_list (178)
    on left: 41 42, on right: 41 49 55 93 101 104 111 122 147 149 151
    160 162 166 172 176 235 358 360
$@4 (179)
    on left: 40, on right: 41
inner_statement (180)
    on left: 43 44 45 46, on right: 41
statement (181)
    on left: 47 48, on right: 7 43 52 61 146 148 150 165 169 174
unticked_statement (182)
    on left: 49 52 55 58 61 65 67 68 69 70 71 72 73 74 75 76 77 78
    79 80 81 84 87 89 90 93 94 95, on right: 47
$@5 (183)
    on left: 50, on right: 52
$@6 (184)
    on left: 51, on right: 52
$@7 (185)
    on left: 53, on right: 55
$@8 (186)
    on left: 54, on right: 55
$@9 (187)
    on left: 56, on right: 58
@10 (188)
    on left: 57, on right: 58
$@11 (189)
    on left: 59, on right: 61
$@12 (190)
    on left: 60, on right: 61
$@13 (191)
    on left: 62, on right: 65
$@14 (192)
    on left: 63, on right: 65
$@15 (193)
    on left: 64, on right: 65
$@16 (194)
    on left: 66, on right: 67
$@17 (195)
    on left: 82, on right: 84
$@18 (196)
    on left: 83, on right: 84
$@19 (197)
    on left: 85, on right: 87
$@20 (198)
    on left: 86, on right: 87
$@21 (199)
    on left: 88, on right: 89
$@22 (200)
    on left: 91, on right: 93
$@23 (201)
    on left: 92, on right: 93
catch_statement (202)
    on left: 96 101, on right: 93
$@24 (203)
    on left: 97, on right: 101
$@25 (204)
    on left: 98, on right: 101
$@26 (205)
    on left: 99, on right: 101
$@27 (206)
    on left: 100, on right: 101
finally_statement (207)
    on left: 102 104, on right: 93
$@28 (208)
    on left: 103, on right: 104
additional_catches (209)
    on left: 105 106, on right: 101
non_empty_additional_catches (210)
    on left: 107 108, on right: 105 108
additional_catch (211)
    on left: 111, on right: 107 108
@29 (212)
    on left: 109, on right: 111
$@30 (213)
    on left: 110, on right: 111
unset_variables (214)
    on left: 112 113, on right: 81 113
unset_variable (215)
    on left: 114, on right: 112 113
function_declaration_statement (216)
    on left: 115, on right: 8 44
class_declaration_statement (217)
    on left: 116, on right: 9 45
is_reference (218)
    on left: 117 118, on right: 122 181 182 212 358 360
is_variadic (219)
    on left: 119 120, on right: 181 182
unticked_function_declaration_statement (220)
    on left: 122, on right: 115
$@31 (221)
    on left: 121, on right: 122
unticked_class_declaration_statement (222)
    on left: 124 126, on right: 116
$@32 (223)
    on left: 123, on right: 124
$@33 (224)
    on left: 125, on right: 126
class_entry_type (225)
    on left: 127 128 129 130, on right: 124
extends_from (226)
    on left: 131 132, on right: 124
interface_entry (227)
    on left: 133, on right: 126
interface_extends_list (228)
    on left: 134 135, on right: 126
implements_list (229)
    on left: 136 137, on right: 124
interface_list (230)
    on left: 138 139, on right: 135 137 139
foreach_optional_arg (231)
    on left: 140 141, on right: 84 87
foreach_variable (232)
    on left: 142 143 145, on right: 84 87 141
$@34 (233)
    on left: 144, on right: 145
for_statement (234)
    on left: 146 147, on right: 65
foreach_statement (235)
    on left: 148 149, on right: 84 87
declare_statement (236)
    on left: 150 151, on right: 89
declare_list (237)
    on left: 152 153, on right: 89 153
switch_case_list (238)
    on left: 154 155 156 157, on right: 67
case_list (239)
    on left: 158 160 162, on right: 154 155 156 157 160 162
$@35 (240)
    on left: 159, on right: 160
$@36 (241)
    on left: 161, on right: 162
case_separator (242)
    on left: 163 164, on right: 160 162
while_statement (243)
    on left: 165 166, on right: 58
elseif_list (244)
    on left: 167 169, on right: 52 169
$@37 (245)
    on left: 168, on right: 169
new_elseif_list (246)
    on left: 170 172, on right: 55 172
$@38 (247)
    on left: 171, on right: 172
else_single (248)
    on left: 173 174, on right: 52
new_else_single (249)
    on left: 175 176, on right: 55
parameter_list (250)
    on left: 177 178, on right: 122 212 358 360
non_empty_parameter_list (251)
    on left: 179 180, on right: 177 180
parameter (252)
    on left: 181 182, on right: 179 180
optional_class_type (253)
    on left: 183 184 185 186, on right: 181 182
function_call_parameter_list (254)
    on left: 187 188 189, on right: 379 381 383 385 387 389 391 393
    417 512
non_empty_function_call_parameter_list (255)
    on left: 190 191, on right: 188 191
function_call_parameter (256)
    on left: 192 193 194 195, on right: 190 191
global_var_list (257)
    on left: 196 197, on right: 76 196
global_var (258)
    on left: 198 199 200, on right: 196 197
static_var_list (259)
    on left: 201 202 203 204, on right: 77 201 202
class_statement_list (260)
    on left: 205 206, on right: 124 126 205
class_statement (261)
    on left: 208 209 210 212, on right: 205
$@39 (262)
    on left: 207, on right: 208
$@40 (263)
    on left: 211, on right: 212
trait_use_statement (264)
    on left: 213, on right: 210
trait_list (265)
    on left: 214 215, on right: 213 215
trait_adaptations (266)
    on left: 216 217, on right: 213
trait_adaptation_list (267)
    on left: 218 219, on right: 217
non_empty_trait_adaptation_list (268)
    on left: 220 221, on right: 219 221
trait_adaptation_statement (269)
    on left: 222 223, on right: 220 221
trait_precedence (270)
    on left: 224, on right: 222
trait_reference_list (271)
    on left: 225 226, on right: 224 226
trait_method_reference (272)
    on left: 227 228, on right: 230 231
trait_method_reference_fully_qualified (273)
    on left: 229, on right: 224 228
trait_alias (274)
    on left: 230 231, on right: 223
trait_modifiers (275)
    on left: 232 233, on right: 230
method_body (276)
    on left: 234 235, on right: 212
variable_modifiers (277)
    on left: 236 237, on right: 208
method_modifiers (278)
    on left: 238 239, on right: 212
non_empty_member_modifiers (279)
    on left: 240 241, on right: 236 239 241
member_modifier (280)
    on left: 242 243 244 245 246 247, on right: 231 233 240 241
class_variable_declaration (281)
    on left: 248 249 250 251, on right: 208 248 249
class_constant_declaration (282)
    on left: 252 253, on right: 209 252
echo_expr_list (283)
    on left: 254 255, on right: 78 254
for_expr (284)
    on left: 256 257, on right: 65
non_empty_for_expr (285)
    on left: 259 260, on right: 257 259
$@41 (286)
    on left: 258, on right: 259
chaining_method_or_property (287)
    on left: 261 262, on right: 261 266 268
chaining_dereference (288)
    on left: 263 264, on right: 263 266 267
chaining_instance_call (289)
    on left: 266 267 268, on right: 271
$@42 (290)
    on left: 265, on right: 266
instance_call (291)
    on left: 269 271, on right: 334
$@43 (292)
    on left: 270, on right: 271
new_expr (293)
    on left: 273, on right: 332 334
$@44 (294)
    on left: 272, on right: 273
expr_without_variable (295)
    on left: 275 276 277 279 280 281 282 283 284 285 286 287 288 289
    290 291 292 293 294 295 296 298 300 302 304 305 306 307 308 309
    310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325
    326 327 328 329 330 331 332 334 337 339 340 341 342 343 344 345
    346 347 348 350 351 352 353 354 355 356 358 360, on right: 73 87
    192 361 363 495 579 589
$@45 (296)
    on left: 274, on right: 275
$@46 (297)
    on left: 278, on right: 279
$@47 (298)
    on left: 297, on right: 298
$@48 (299)
    on left: 299, on right: 300
$@49 (300)
    on left: 301, on right: 302
$@50 (301)
    on left: 303, on right: 304
@51 (302)
    on left: 333, on right: 334
$@52 (303)
    on left: 335, on right: 337
$@53 (304)
    on left: 336, on right: 337
$@54 (305)
    on left: 338, on right: 339
$@55 (306)
    on left: 349, on right: 350
@56 (307)
    on left: 357, on right: 358
@57 (308)
    on left: 359, on right: 360
yield_expr (309)
    on left: 361 362 363 364, on right: 75 189 497
combined_scalar_offset (310)
    on left: 365 366 367 368, on right: 352 366
combined_scalar (311)
    on left: 369 370, on right: 353 365
function (312)
    on left: 371, on right: 122 212 358 360
lexical_vars (313)
    on left: 372 373, on right: 358 360
lexical_var_list (314)
    on left: 374 375 376 377, on right: 373 374 375
function_call (315)
    on left: 379 381 383 385 387 389 391 393, on right: 523 526
@58 (316)
    on left: 378, on right: 379
@59 (317)
    on left: 380, on right: 381
@60 (318)
    on left: 382, on right: 383
@61 (319)
    on left: 384, on right: 385
$@62 (320)
    on left: 386, on right: 387
$@63 (321)
    on left: 388, on right: 389
$@64 (322)
    on left: 390, on right: 391
$@65 (323)
    on left: 392, on right: 393
class_name (324)
    on left: 394 395 396 397, on right: 385 387 401 430 518 590 592
    593
fully_qualified_class_name (325)
    on left: 398 399 400, on right: 101 111 132 138 139 186 214 215
    225 226 229
class_name_reference (326)
    on left: 401 402, on right: 273 279 330
dynamic_class_name_reference (327)
    on left: 405 406, on right: 402
$@66 (328)
    on left: 403, on right: 405
$@67 (329)
    on left: 404, on right: 405
dynamic_class_name_variable_properties (330)
    on left: 407 408, on right: 405 407
dynamic_class_name_variable_property (331)
    on left: 409, on right: 407
exit_expr (332)
    on left: 410 411 412, on right: 348
backticks_expr (333)
    on left: 413 414 415, on right: 354
ctor_arguments (334)
    on left: 416 417, on right: 273 279
common_scalar (335)
    on left: 418 419 420 421 422 423 424 425 426 427 428 429, on right:
    432 482
static_class_constant (336)
    on left: 430, on right: 439
static_scalar (337)
    on left: 431, on right: 38 39 152 153 182 202 204 249 251 252 253
static_scalar_value (338)
    on left: 432 433 434 435 436 437 438 439 440 441, on right: 431
    442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457
    458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473
    474 490 491 492 493
static_operation (339)
    on left: 442 443 444 445 446 447 448 449 450 451 452 453 454 455
    456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471
    472 473 474, on right: 441
general_constant (340)
    on left: 475 476 477 478, on right: 368 480
scalar (341)
    on left: 479 480 481 482 483 484 485, on right: 351
static_array_pair_list (342)
    on left: 486 487, on right: 437 438
possible_comma (343)
    on left: 488 489, on right: 487 554
non_empty_static_array_pair_list (344)
    on left: 490 491 492 493, on right: 487 490 491
expr (345)
    on left: 494 495, on right: 69 71 80 94 160 195 200 254 255 259
    260 275 276 280 281 282 283 284 285 286 287 288 289 290 291 292
    298 300 302 304 305 306 307 308 309 310 311 312 313 314 315 316
    317 318 319 320 321 322 323 324 325 326 327 328 329 330 337 339
    341 342 343 344 345 346 347 350 355 363 364 496 531 534 536 541
    544 555 556 557 558 559 561 571 572 580 581 582 583 584
parenthesis_expr (346)
    on left: 496 497, on right: 52 55 58 61 67 169 172 331 412
r_variable (347)
    on left: 498, on right: 199 494
w_variable (348)
    on left: 499, on right: 194 559 560 561 562
rw_variable (349)
    on left: 500, on right: 293 294 295 296
variable (350)
    on left: 503 504, on right: 74 84 114 142 143 193 276 277 279 281
    282 283 284 285 286 287 288 289 290 291 292 362 364 498 499 500
    549 573 578 588
$@68 (351)
    on left: 501, on right: 503
$@69 (352)
    on left: 502, on right: 503
variable_properties (353)
    on left: 505 506, on right: 503 505
variable_property (354)
    on left: 508, on right: 261 262 505
$@70 (355)
    on left: 507, on right: 508
array_method_dereference (356)
    on left: 509 510, on right: 509 514
method (357)
    on left: 512, on right: 510 513
@71 (358)
    on left: 511, on right: 512
method_or_not (359)
    on left: 513 514 515, on right: 503 508
variable_without_objects (360)
    on left: 516 517, on right: 387 391 393 518 519 539
static_member (361)
    on left: 518 519, on right: 529
variable_class_name (362)
    on left: 520, on right: 389 391 519 591
array_function_dereference (363)
    on left: 521 523, on right: 521 525
$@72 (364)
    on left: 522, on right: 523
base_variable_with_function_calls (365)
    on left: 524 525 526, on right: 503 504
base_variable (366)
    on left: 527 528 529, on right: 405 406 524
reference_variable (367)
    on left: 530 531 532, on right: 516 517 520 527 528 530 531
compound_variable (368)
    on left: 533 534, on right: 532
dim_offset (369)
    on left: 535 536, on right: 263 264 365 366 367 368 509 510 521
    523 530 540
object_property (370)
    on left: 537 539, on right: 405 409 503 508
$@73 (371)
    on left: 538, on right: 539
object_dim_list (372)
    on left: 540 541 542, on right: 537 540 541
variable_name (373)
    on left: 543 544, on right: 385 389 542
simple_indirect_reference (374)
    on left: 545 546, on right: 517 528 546
assignment_list (375)
    on left: 547 548, on right: 145 275 547 551
assignment_list_element (376)
    on left: 549 551 552, on right: 547 548
$@74 (377)
    on left: 550, on right: 551
array_pair_list (378)
    on left: 553 554, on right: 369 370
non_empty_array_pair_list (379)
    on left: 555 556 557 558 559 560 561 562, on right: 554 555 556
    559 560
encaps_list (380)
    on left: 563 564 565 566, on right: 415 483 484 563 564
encaps_var (381)
    on left: 567 569 570 571 572 573, on right: 563 565 566
$@75 (382)
    on left: 568, on right: 569
encaps_var_offset (383)
    on left: 574 575 576, on right: 569
internal_functions_in_yacc (384)
    on left: 577 578 579 580 581 582 583 584, on right: 340
isset_variables (385)
    on left: 585 587, on right: 577 587
$@76 (386)
    on left: 586, on right: 587
isset_variable (387)
    on left: 588 589, on right: 585 587
class_constant (388)
    on left: 590 591, on right: 475
static_class_name_scalar (389)
    on left: 592, on right: 433
class_name_scalar (390)
    on left: 593, on right: 481


state 0

    0 $accept: . start "end of file"

    $default  reduce using rule 4 (top_statement_list)

    start               go to state 1
    top_statement_list  go to state 2


state 1

    0 $accept: start . "end of file"

    "end of file"  shift, and go to state 3


state 2

    1 start: top_statement_list .
    3 top_statement_list: top_statement_list . $@1 top_statement

    "end of file"  reduce using rule 1 (start)
    $default       reduce using rule 2 ($@1)

    $@1  go to state 4


state 3

    0 $accept: start "end of file" .

    $default  accept


state 4

    3 top_statement_list: top_statement_list $@1 . top_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "const (T_CONST)"                             shift, and go to state 49
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "use (T_USE)"                                 shift, and go to state 53
    "global (T_GLOBAL)"                           shift, and go to state 54
    "final (T_FINAL)"                             shift, and go to state 55
    "abstract (T_ABSTRACT)"                       shift, and go to state 56
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 61
    "class (T_CLASS)"                             shift, and go to state 62
    "trait (T_TRAIT)"                             shift, and go to state 63
    "interface (T_INTERFACE)"                     shift, and go to state 64
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 74
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                           go to state 84
    top_statement                            go to state 85
    constant_declaration                     go to state 86
    statement                                go to state 87
    unticked_statement                       go to state 88
    function_declaration_statement           go to state 89
    class_declaration_statement              go to state 90
    unticked_function_declaration_statement  go to state 91
    unticked_class_declaration_statement     go to state 92
    class_entry_type                         go to state 93
    interface_entry                          go to state 94
    new_expr                                 go to state 95
    expr_without_variable                    go to state 96
    yield_expr                               go to state 97
    combined_scalar_offset                   go to state 98
    combined_scalar                          go to state 99
    function                                 go to state 100
    function_call                            go to state 101
    class_name                               go to state 102
    common_scalar                            go to state 103
    general_constant                         go to state 104
    scalar                                   go to state 105
    expr                                     go to state 106
    parenthesis_expr                         go to state 107
    r_variable                               go to state 108
    rw_variable                              go to state 109
    variable                                 go to state 110
    variable_without_objects                 go to state 111
    static_member                            go to state 112
    variable_class_name                      go to state 113
    array_function_dereference               go to state 114
    base_variable_with_function_calls        go to state 115
    base_variable                            go to state 116
    reference_variable                       go to state 117
    compound_variable                        go to state 118
    simple_indirect_reference                go to state 119
    internal_functions_in_yacc               go to state 120
    class_constant                           go to state 121
    class_name_scalar                        go to state 122


state 5

  584 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 128
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 6

  583 internal_functions_in_yacc: "require (T_REQUIRE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 129
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 7

  582 internal_functions_in_yacc: "eval (T_EVAL)" . '(' expr ')'

    '('  shift, and go to state 130


state 8

  581 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 131
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 9

  580 internal_functions_in_yacc: "include (T_INCLUDE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 132
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 10

  355 expr_without_variable: "print (T_PRINT)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 133
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 11

  356 expr_without_variable: "yield (T_YIELD)" .
  361 yield_expr: "yield (T_YIELD)" . expr_without_variable
  362           | "yield (T_YIELD)" . variable
  363           | "yield (T_YIELD)" . expr "=> (T_DOUBLE_ARROW)" expr_without_variable
  364           | "yield (T_YIELD)" . expr "=> (T_DOUBLE_ARROW)" variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 356 (expr_without_variable)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 134
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 135
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 136
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 12

  318 expr_without_variable: '+' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 137
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 13

  319 expr_without_variable: '-' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 138
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 14

  320 expr_without_variable: '!' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 139
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 15

  321 expr_without_variable: '~' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 140
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 16

  350 expr_without_variable: '@' . $@55 expr

    $default  reduce using rule 349 ($@55)

    $@55  go to state 141


state 17

  347 expr_without_variable: "(unset) (T_UNSET_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 142
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 18

  346 expr_without_variable: "(bool) (T_BOOL_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 143
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 19

  345 expr_without_variable: "(object) (T_OBJECT_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 144
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 20

  344 expr_without_variable: "(array) (T_ARRAY_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 145
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 21

  343 expr_without_variable: "(string) (T_STRING_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 146
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 22

  342 expr_without_variable: "(double) (T_DOUBLE_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 147
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 23

  341 expr_without_variable: "(int) (T_INT_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 148
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 24

  296 expr_without_variable: "-- (T_DEC)" . rw_variable

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    function_call                      go to state 101
    class_name                         go to state 153
    rw_variable                        go to state 154
    variable                           go to state 155
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 25

  294 expr_without_variable: "++ (T_INC)" . rw_variable

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    function_call                      go to state 101
    class_name                         go to state 153
    rw_variable                        go to state 157
    variable                           go to state 155
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 26

  370 combined_scalar: '[' . array_pair_list ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '&'                                           shift, and go to state 158
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 553 (array_pair_list)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 159
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    array_pair_list                    go to state 160
    non_empty_array_pair_list          go to state 161
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 27

  280 expr_without_variable: "clone (T_CLONE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 162
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 28

  273 new_expr: "new (T_NEW)" . class_name_reference $@44 ctor_arguments

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 163
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 164
    '$'                        shift, and go to state 81

    namespace_name                go to state 165
    class_name                    go to state 166
    class_name_reference          go to state 167
    dynamic_class_name_reference  go to state 168
    static_member                 go to state 112
    variable_class_name           go to state 169
    base_variable                 go to state 170
    reference_variable            go to state 171
    compound_variable             go to state 118
    simple_indirect_reference     go to state 172


state 29

  348 expr_without_variable: "exit (T_EXIT)" . exit_expr

    '('  shift, and go to state 173

    $default  reduce using rule 410 (exit_expr)

    exit_expr         go to state 174
    parenthesis_expr  go to state 175


state 30

   52 unticked_statement: "if (T_IF)" . parenthesis_expr $@5 statement $@6 elseif_list else_single
   55                   | "if (T_IF)" . parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    '('  shift, and go to state 176

    parenthesis_expr  go to state 177


state 31

  418 common_scalar: "integer number (T_LNUMBER)" .

    $default  reduce using rule 418 (common_scalar)


state 32

  419 common_scalar: "floating-point number (T_DNUMBER)" .

    $default  reduce using rule 419 (common_scalar)


state 33

    5 namespace_name: "identifier (T_STRING)" .
   48 statement: "identifier (T_STRING)" . ':'

    ':'  shift, and go to state 178

    $default  reduce using rule 5 (namespace_name)


state 34

  479 scalar: "variable name (T_STRING_VARNAME)" .

    $default  reduce using rule 479 (scalar)


state 35

  533 compound_variable: "variable (T_VARIABLE)" .

    $default  reduce using rule 533 (compound_variable)


state 36

   79 unticked_statement: T_INLINE_HTML .

    $default  reduce using rule 79 (unticked_statement)


state 37

  367 combined_scalar_offset: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" . '[' dim_offset ']'
  420 common_scalar: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .

    '['  shift, and go to state 179

    $default  reduce using rule 420 (common_scalar)


state 38

   78 unticked_statement: "echo (T_ECHO)" . echo_expr_list ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    echo_expr_list                     go to state 180
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 181
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 39

   61 unticked_statement: "do (T_DO)" . $@11 statement "while (T_WHILE)" $@12 parenthesis_expr ';'

    $default  reduce using rule 59 ($@11)

    $@11  go to state 182


state 40

   58 unticked_statement: "while (T_WHILE)" . $@9 parenthesis_expr @10 while_statement

    $default  reduce using rule 56 ($@9)

    $@9  go to state 183


state 41

   65 unticked_statement: "for (T_FOR)" . '(' for_expr ';' $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement

    '('  shift, and go to state 184


state 42

   84 unticked_statement: "foreach (T_FOREACH)" . '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement
   87                   | "foreach (T_FOREACH)" . '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement

    '('  shift, and go to state 185


state 43

   89 unticked_statement: "declare (T_DECLARE)" . $@21 '(' declare_list ')' declare_statement

    $default  reduce using rule 88 ($@21)

    $@21  go to state 186


state 44

   67 unticked_statement: "switch (T_SWITCH)" . parenthesis_expr $@16 switch_case_list

    '('  shift, and go to state 176

    parenthesis_expr  go to state 187


state 45

   68 unticked_statement: "break (T_BREAK)" . ';'
   69                   | "break (T_BREAK)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 188
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 189
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 46

   70 unticked_statement: "continue (T_CONTINUE)" . ';'
   71                   | "continue (T_CONTINUE)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 190
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 191
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 47

   95 unticked_statement: "goto (T_GOTO)" . "identifier (T_STRING)" ';'

    "identifier (T_STRING)"  shift, and go to state 192


state 48

  371 function: "function (T_FUNCTION)" .

    $default  reduce using rule 371 (function)


state 49

   39 constant_declaration: "const (T_CONST)" . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 193


state 50

   72 unticked_statement: "return (T_RETURN)" . ';'
   73                   | "return (T_RETURN)" . expr_without_variable ';'
   74                   | "return (T_RETURN)" . variable ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 194
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 195
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 196
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 197
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 51

   93 unticked_statement: "try (T_TRY)" . $@22 '{' inner_statement_list '}' catch_statement $@23 finally_statement

    $default  reduce using rule 91 ($@22)

    $@22  go to state 198


state 52

   94 unticked_statement: "throw (T_THROW)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 199
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 53

   16 top_statement: "use (T_USE)" . use_declarations ';'
   17              | "use (T_USE)" . "function (T_FUNCTION)" use_function_declarations ';'
   18              | "use (T_USE)" . "const (T_CONST)" use_const_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 124
    "function (T_FUNCTION)"  shift, and go to state 200
    "const (T_CONST)"        shift, and go to state 201
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 202

    namespace_name    go to state 203
    use_declarations  go to state 204
    use_declaration   go to state 205


state 54

   76 unticked_statement: "global (T_GLOBAL)" . global_var_list ';'

    "variable (T_VARIABLE)"  shift, and go to state 206
    '$'                      shift, and go to state 207

    global_var_list  go to state 208
    global_var       go to state 209


state 55

  130 class_entry_type: "final (T_FINAL)" . "class (T_CLASS)"

    "class (T_CLASS)"  shift, and go to state 210


state 56

  128 class_entry_type: "abstract (T_ABSTRACT)" . "class (T_CLASS)"

    "class (T_CLASS)"  shift, and go to state 211


state 57

   77 unticked_statement: "static (T_STATIC)" . static_var_list ';'
  360 expr_without_variable: "static (T_STATIC)" . function is_reference @57 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'
  394 class_name: "static (T_STATIC)" .

    "variable (T_VARIABLE)"  shift, and go to state 212
    "function (T_FUNCTION)"  shift, and go to state 48

    $default  reduce using rule 394 (class_name)

    static_var_list  go to state 213
    function         go to state 214


state 58

   81 unticked_statement: "unset (T_UNSET)" . '(' unset_variables ')' ';'

    '('  shift, and go to state 215


state 59

  577 internal_functions_in_yacc: "isset (T_ISSET)" . '(' isset_variables ')'

    '('  shift, and go to state 216


state 60

  578 internal_functions_in_yacc: "empty (T_EMPTY)" . '(' variable ')'
  579                           | "empty (T_EMPTY)" . '(' expr_without_variable ')'

    '('  shift, and go to state 217


state 61

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 218


state 62

  127 class_entry_type: "class (T_CLASS)" .

    $default  reduce using rule 127 (class_entry_type)


state 63

  129 class_entry_type: "trait (T_TRAIT)" .

    $default  reduce using rule 129 (class_entry_type)


state 64

  133 interface_entry: "interface (T_INTERFACE)" .

    $default  reduce using rule 133 (interface_entry)


state 65

  275 expr_without_variable: "list (T_LIST)" . '(' $@45 assignment_list ')' '=' expr

    '('  shift, and go to state 219


state 66

  369 combined_scalar: "array (T_ARRAY)" . '(' array_pair_list ')'

    '('  shift, and go to state 220


state 67

  485 scalar: "__CLASS__ (T_CLASS_C)" .

    $default  reduce using rule 485 (scalar)


state 68

  424 common_scalar: "__TRAIT__ (T_TRAIT_C)" .

    $default  reduce using rule 424 (common_scalar)


state 69

  425 common_scalar: "__METHOD__ (T_METHOD_C)" .

    $default  reduce using rule 425 (common_scalar)


state 70

  426 common_scalar: "__FUNCTION__ (T_FUNC_C)" .

    $default  reduce using rule 426 (common_scalar)


state 71

  421 common_scalar: "__LINE__ (T_LINE)" .

    $default  reduce using rule 421 (common_scalar)


state 72

  422 common_scalar: "__FILE__ (T_FILE)" .

    $default  reduce using rule 422 (common_scalar)


state 73

  428 common_scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  429              | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"
  484 scalar: "heredoc start (T_START_HEREDOC)" . encaps_list "heredoc end (T_END_HEREDOC)"

    "variable (T_VARIABLE)"                                     shift, and go to state 221
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 222
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 223
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 224
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 225

    encaps_list  go to state 226
    encaps_var   go to state 227


state 74

   11 top_statement: "namespace (T_NAMESPACE)" . namespace_name ';'
   13              | "namespace (T_NAMESPACE)" . namespace_name '{' $@2 top_statement_list '}'
   15              | "namespace (T_NAMESPACE)" . '{' $@3 top_statement_list '}'
  381 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name @59 function_call_parameter_list
  396 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  477 general_constant: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "identifier (T_STRING)"  shift, and go to state 124
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 228
    '{'                      shift, and go to state 229

    namespace_name  go to state 230


state 75

  427 common_scalar: "__NAMESPACE__ (T_NS_C)" .

    $default  reduce using rule 427 (common_scalar)


state 76

  423 common_scalar: "__DIR__ (T_DIR)" .

    $default  reduce using rule 423 (common_scalar)


state 77

  383 function_call: "\\ (T_NS_SEPARATOR)" . namespace_name @60 function_call_parameter_list
  397 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name
  478 general_constant: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 124

    namespace_name  go to state 231


state 78

  334 expr_without_variable: '(' . new_expr ')' @51 instance_call
  496 parenthesis_expr: '(' . expr ')'
  497                 | '(' . yield_expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 232
    expr_without_variable              go to state 96
    yield_expr                         go to state 233
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 234
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 79

   90 unticked_statement: ';' .

    $default  reduce using rule 90 (unticked_statement)


state 80

   49 unticked_statement: '{' . inner_statement_list '}'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 235


state 81

  534 compound_variable: '$' . '{' expr '}'
  545 simple_indirect_reference: '$' .

    '{'  shift, and go to state 236

    $default  reduce using rule 545 (simple_indirect_reference)


state 82

  354 expr_without_variable: '`' . backticks_expr '`'

    "variable (T_VARIABLE)"                                     shift, and go to state 221
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 237
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 224
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 225

    $default  reduce using rule 413 (backticks_expr)

    backticks_expr  go to state 238
    encaps_list     go to state 239
    encaps_var      go to state 227


state 83

  483 scalar: '"' . encaps_list '"'

    "variable (T_VARIABLE)"                                     shift, and go to state 221
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 240
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 224
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 225

    encaps_list  go to state 241
    encaps_var   go to state 227


state 84

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  379 function_call: namespace_name . @58 function_call_parameter_list
  395 class_name: namespace_name .
  476 general_constant: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 395 (class_name)
    '('                            reduce using rule 378 (@58)
    $default                       reduce using rule 476 (general_constant)

    @58  go to state 243


state 85

    3 top_statement_list: top_statement_list $@1 top_statement .

    $default  reduce using rule 3 (top_statement_list)


state 86

   19 top_statement: constant_declaration . ';'
   38 constant_declaration: constant_declaration . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 244
    ';'  shift, and go to state 245


state 87

    7 top_statement: statement .

    $default  reduce using rule 7 (top_statement)


state 88

   47 statement: unticked_statement .

    $default  reduce using rule 47 (statement)


state 89

    8 top_statement: function_declaration_statement .

    $default  reduce using rule 8 (top_statement)


state 90

    9 top_statement: class_declaration_statement .

    $default  reduce using rule 9 (top_statement)


state 91

  115 function_declaration_statement: unticked_function_declaration_statement .

    $default  reduce using rule 115 (function_declaration_statement)


state 92

  116 class_declaration_statement: unticked_class_declaration_statement .

    $default  reduce using rule 116 (class_declaration_statement)


state 93

  124 unticked_class_declaration_statement: class_entry_type . "identifier (T_STRING)" extends_from $@32 implements_list '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 246


state 94

  126 unticked_class_declaration_statement: interface_entry . "identifier (T_STRING)" $@33 interface_extends_list '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 247


state 95

  332 expr_without_variable: new_expr .

    $default  reduce using rule 332 (expr_without_variable)


state 96

  495 expr: expr_without_variable .

    $default  reduce using rule 495 (expr)


state 97

   75 unticked_statement: yield_expr . ';'

    ';'  shift, and go to state 248


state 98

  352 expr_without_variable: combined_scalar_offset .
  366 combined_scalar_offset: combined_scalar_offset . '[' dim_offset ']'

    '['  shift, and go to state 249

    $default  reduce using rule 352 (expr_without_variable)


state 99

  353 expr_without_variable: combined_scalar .
  365 combined_scalar_offset: combined_scalar . '[' dim_offset ']'

    '['  shift, and go to state 250

    $default  reduce using rule 353 (expr_without_variable)


state 100

  122 unticked_function_declaration_statement: function . is_reference "identifier (T_STRING)" $@31 '(' parameter_list ')' '{' inner_statement_list '}'
  358 expr_without_variable: function . is_reference @56 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 251

    $default  reduce using rule 117 (is_reference)

    is_reference  go to state 252


state 101

  523 array_function_dereference: function_call . $@72 '[' dim_offset ']'
  526 base_variable_with_function_calls: function_call .

    '['       reduce using rule 522 ($@72)
    $default  reduce using rule 526 (base_variable_with_function_calls)

    $@72  go to state 253


state 102

  385 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name @61 function_call_parameter_list
  387              | class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@62 function_call_parameter_list
  518 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  590 class_constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"
  593 class_name_scalar: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 254


state 103

  482 scalar: common_scalar .

    $default  reduce using rule 482 (scalar)


state 104

  368 combined_scalar_offset: general_constant . '[' dim_offset ']'
  480 scalar: general_constant .

    '['  shift, and go to state 255

    $default  reduce using rule 480 (scalar)


state 105

  351 expr_without_variable: scalar .

    $default  reduce using rule 351 (expr_without_variable)


state 106

   80 unticked_statement: expr . ';'
  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    ';'                           shift, and go to state 283


state 107

  331 expr_without_variable: parenthesis_expr .

    $default  reduce using rule 331 (expr_without_variable)


state 108

  494 expr: r_variable .

    $default  reduce using rule 494 (expr)


state 109

  293 expr_without_variable: rw_variable . "++ (T_INC)"
  295                      | rw_variable . "-- (T_DEC)"

    "-- (T_DEC)"  shift, and go to state 284
    "++ (T_INC)"  shift, and go to state 285


state 110

  276 expr_without_variable: variable . '=' expr
  277                      | variable . '=' '&' variable
  279                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  281                      | variable . "+= (T_PLUS_EQUAL)" expr
  282                      | variable . "-= (T_MINUS_EQUAL)" expr
  283                      | variable . "*= (T_MUL_EQUAL)" expr
  284                      | variable . "**= (T_POW_EQUAL)" expr
  285                      | variable . "/= (T_DIV_EQUAL)" expr
  286                      | variable . ".= (T_CONCAT_EQUAL)" expr
  287                      | variable . "%= (T_MOD_EQUAL)" expr
  288                      | variable . "&= (T_AND_EQUAL)" expr
  289                      | variable . "|= (T_OR_EQUAL)" expr
  290                      | variable . "^= (T_XOR_EQUAL)" expr
  291                      | variable . "<<= (T_SL_EQUAL)" expr
  292                      | variable . ">>= (T_SR_EQUAL)" expr
  498 r_variable: variable .
  500 rw_variable: variable .

    '='                    shift, and go to state 286
    "**= (T_POW_EQUAL)"    shift, and go to state 287
    ">>= (T_SR_EQUAL)"     shift, and go to state 288
    "<<= (T_SL_EQUAL)"     shift, and go to state 289
    "^= (T_XOR_EQUAL)"     shift, and go to state 290
    "|= (T_OR_EQUAL)"      shift, and go to state 291
    "&= (T_AND_EQUAL)"     shift, and go to state 292
    "%= (T_MOD_EQUAL)"     shift, and go to state 293
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 294
    "/= (T_DIV_EQUAL)"     shift, and go to state 295
    "*= (T_MUL_EQUAL)"     shift, and go to state 296
    "-= (T_MINUS_EQUAL)"   shift, and go to state 297
    "+= (T_PLUS_EQUAL)"    shift, and go to state 298

    "-- (T_DEC)"  reduce using rule 500 (rw_variable)
    "++ (T_INC)"  reduce using rule 500 (rw_variable)
    $default      reduce using rule 498 (r_variable)


state 111

  393 function_call: variable_without_objects . $@65 function_call_parameter_list

    $default  reduce using rule 392 ($@65)

    $@65  go to state 299


state 112

  529 base_variable: static_member .

    $default  reduce using rule 529 (base_variable)


state 113

  389 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name $@63 function_call_parameter_list
  391              | variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@64 function_call_parameter_list
  519 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  591 class_constant: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 300


state 114

  521 array_function_dereference: array_function_dereference . '[' dim_offset ']'
  525 base_variable_with_function_calls: array_function_dereference .

    '['  shift, and go to state 301

    $default  reduce using rule 525 (base_variable_with_function_calls)


state 115

  503 variable: base_variable_with_function_calls . "-> (T_OBJECT_OPERATOR)" $@68 object_property $@69 method_or_not variable_properties
  504         | base_variable_with_function_calls .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 302

    $default  reduce using rule 504 (variable)


state 116

  524 base_variable_with_function_calls: base_variable .

    $default  reduce using rule 524 (base_variable_with_function_calls)


state 117

  516 variable_without_objects: reference_variable .
  520 variable_class_name: reference_variable .
  527 base_variable: reference_variable .
  530 reference_variable: reference_variable . '[' dim_offset ']'
  531                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 303
    '{'  shift, and go to state 304

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 520 (variable_class_name)
    '('                            reduce using rule 516 (variable_without_objects)
    $default                       reduce using rule 527 (base_variable)


state 118

  532 reference_variable: compound_variable .

    $default  reduce using rule 532 (reference_variable)


state 119

  517 variable_without_objects: simple_indirect_reference . reference_variable
  528 base_variable: simple_indirect_reference . reference_variable
  546 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 305

    reference_variable  go to state 306
    compound_variable   go to state 118


state 120

  340 expr_without_variable: internal_functions_in_yacc .

    $default  reduce using rule 340 (expr_without_variable)


state 121

  475 general_constant: class_constant .

    $default  reduce using rule 475 (general_constant)


state 122

  481 scalar: class_name_scalar .

    $default  reduce using rule 481 (scalar)


state 123

  356 expr_without_variable: "yield (T_YIELD)" .

    $default  reduce using rule 356 (expr_without_variable)


state 124

    5 namespace_name: "identifier (T_STRING)" .

    $default  reduce using rule 5 (namespace_name)


state 125

  360 expr_without_variable: "static (T_STATIC)" . function is_reference @57 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'
  394 class_name: "static (T_STATIC)" .

    "function (T_FUNCTION)"  shift, and go to state 48

    $default  reduce using rule 394 (class_name)

    function  go to state 214


state 126

  381 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name @59 function_call_parameter_list
  396 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  477 general_constant: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 228


state 127

  358 expr_without_variable: function . is_reference @56 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 251

    $default  reduce using rule 117 (is_reference)

    is_reference  go to state 307


state 128

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  584 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 584 (internal_functions_in_yacc)


state 129

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  583 internal_functions_in_yacc: "require (T_REQUIRE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 583 (internal_functions_in_yacc)


state 130

  582 internal_functions_in_yacc: "eval (T_EVAL)" '(' . expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 308
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 131

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  581 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 581 (internal_functions_in_yacc)


state 132

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  580 internal_functions_in_yacc: "include (T_INCLUDE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 580 (internal_functions_in_yacc)


state 133

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  355                      | "print (T_PRINT)" expr .

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 355 (expr_without_variable)


state 134

  361 yield_expr: "yield (T_YIELD)" expr_without_variable .
  495 expr: expr_without_variable .

    ')'       reduce using rule 361 (yield_expr)
    ';'       reduce using rule 361 (yield_expr)
    $default  reduce using rule 495 (expr)


state 135

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  363 yield_expr: "yield (T_YIELD)" expr . "=> (T_DOUBLE_ARROW)" expr_without_variable
  364           | "yield (T_YIELD)" expr . "=> (T_DOUBLE_ARROW)" variable

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 309


state 136

  276 expr_without_variable: variable . '=' expr
  277                      | variable . '=' '&' variable
  279                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  281                      | variable . "+= (T_PLUS_EQUAL)" expr
  282                      | variable . "-= (T_MINUS_EQUAL)" expr
  283                      | variable . "*= (T_MUL_EQUAL)" expr
  284                      | variable . "**= (T_POW_EQUAL)" expr
  285                      | variable . "/= (T_DIV_EQUAL)" expr
  286                      | variable . ".= (T_CONCAT_EQUAL)" expr
  287                      | variable . "%= (T_MOD_EQUAL)" expr
  288                      | variable . "&= (T_AND_EQUAL)" expr
  289                      | variable . "|= (T_OR_EQUAL)" expr
  290                      | variable . "^= (T_XOR_EQUAL)" expr
  291                      | variable . "<<= (T_SL_EQUAL)" expr
  292                      | variable . ">>= (T_SR_EQUAL)" expr
  362 yield_expr: "yield (T_YIELD)" variable .
  498 r_variable: variable .
  500 rw_variable: variable .

    '='                    shift, and go to state 286
    "**= (T_POW_EQUAL)"    shift, and go to state 287
    ">>= (T_SR_EQUAL)"     shift, and go to state 288
    "<<= (T_SL_EQUAL)"     shift, and go to state 289
    "^= (T_XOR_EQUAL)"     shift, and go to state 290
    "|= (T_OR_EQUAL)"      shift, and go to state 291
    "&= (T_AND_EQUAL)"     shift, and go to state 292
    "%= (T_MOD_EQUAL)"     shift, and go to state 293
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 294
    "/= (T_DIV_EQUAL)"     shift, and go to state 295
    "*= (T_MUL_EQUAL)"     shift, and go to state 296
    "-= (T_MINUS_EQUAL)"   shift, and go to state 297
    "+= (T_PLUS_EQUAL)"    shift, and go to state 298

    "-- (T_DEC)"  reduce using rule 500 (rw_variable)
    "++ (T_INC)"  reduce using rule 500 (rw_variable)
    ')'           reduce using rule 362 (yield_expr)
    ';'           reduce using rule 362 (yield_expr)
    $default      reduce using rule 498 (r_variable)


state 137

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  318                      | '+' expr .
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "** (T_POW)"  shift, and go to state 282

    $default  reduce using rule 318 (expr_without_variable)


state 138

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  319                      | '-' expr .
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "** (T_POW)"  shift, and go to state 282

    $default  reduce using rule 319 (expr_without_variable)


state 139

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  320                      | '!' expr .
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 281
    "** (T_POW)"                 shift, and go to state 282

    $default  reduce using rule 320 (expr_without_variable)


state 140

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  321                      | '~' expr .
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "** (T_POW)"  shift, and go to state 282

    $default  reduce using rule 321 (expr_without_variable)


state 141

  350 expr_without_variable: '@' $@55 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 310
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 142

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  347                      | "(unset) (T_UNSET_CAST)" expr .

    "** (T_POW)"  shift, and go to state 282

    $default  reduce using rule 347 (expr_without_variable)


state 143

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  346                      | "(bool) (T_BOOL_CAST)" expr .

    "** (T_POW)"  shift, and go to state 282

    $default  reduce using rule 346 (expr_without_variable)


state 144

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  345                      | "(object) (T_OBJECT_CAST)" expr .

    "** (T_POW)"  shift, and go to state 282

    $default  reduce using rule 345 (expr_without_variable)


state 145

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  344                      | "(array) (T_ARRAY_CAST)" expr .

    "** (T_POW)"  shift, and go to state 282

    $default  reduce using rule 344 (expr_without_variable)


state 146

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  343                      | "(string) (T_STRING_CAST)" expr .

    "** (T_POW)"  shift, and go to state 282

    $default  reduce using rule 343 (expr_without_variable)


state 147

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  342                      | "(double) (T_DOUBLE_CAST)" expr .

    "** (T_POW)"  shift, and go to state 282

    $default  reduce using rule 342 (expr_without_variable)


state 148

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  341                      | "(int) (T_INT_CAST)" expr .

    "** (T_POW)"  shift, and go to state 282

    $default  reduce using rule 341 (expr_without_variable)


state 149

  394 class_name: "static (T_STATIC)" .

    $default  reduce using rule 394 (class_name)


state 150

  381 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name @59 function_call_parameter_list
  396 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 311


state 151

  383 function_call: "\\ (T_NS_SEPARATOR)" . namespace_name @60 function_call_parameter_list
  397 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 124

    namespace_name  go to state 312


state 152

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  379 function_call: namespace_name . @58 function_call_parameter_list
  395 class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 395 (class_name)
    $default                       reduce using rule 378 (@58)

    @58  go to state 243


state 153

  385 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name @61 function_call_parameter_list
  387              | class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@62 function_call_parameter_list
  518 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 313


state 154

  296 expr_without_variable: "-- (T_DEC)" rw_variable .

    $default  reduce using rule 296 (expr_without_variable)


state 155

  500 rw_variable: variable .

    $default  reduce using rule 500 (rw_variable)


state 156

  389 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name $@63 function_call_parameter_list
  391              | variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@64 function_call_parameter_list
  519 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 314


state 157

  294 expr_without_variable: "++ (T_INC)" rw_variable .

    $default  reduce using rule 294 (expr_without_variable)


state 158

  562 non_empty_array_pair_list: '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    function_call                      go to state 101
    class_name                         go to state 153
    w_variable                         go to state 315
    variable                           go to state 316
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 159

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  557 non_empty_array_pair_list: expr . "=> (T_DOUBLE_ARROW)" expr
  558                          | expr .
  561                          | expr . "=> (T_DOUBLE_ARROW)" '&' w_variable

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 317

    $default  reduce using rule 558 (non_empty_array_pair_list)


state 160

  370 combined_scalar: '[' array_pair_list . ']'

    ']'  shift, and go to state 318


state 161

  554 array_pair_list: non_empty_array_pair_list . possible_comma
  555 non_empty_array_pair_list: non_empty_array_pair_list . ',' expr "=> (T_DOUBLE_ARROW)" expr
  556                          | non_empty_array_pair_list . ',' expr
  559                          | non_empty_array_pair_list . ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  560                          | non_empty_array_pair_list . ',' '&' w_variable

    ','  shift, and go to state 319

    $default  reduce using rule 488 (possible_comma)

    possible_comma  go to state 320


state 162

  280 expr_without_variable: "clone (T_CLONE)" expr .
  298                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    $default  reduce using rule 280 (expr_without_variable)


state 163

  396 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 321


state 164

  397 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 124

    namespace_name  go to state 322


state 165

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  395 class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    $default  reduce using rule 395 (class_name)


state 166

  401 class_name_reference: class_name .
  518 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 323

    $default  reduce using rule 401 (class_name_reference)


state 167

  273 new_expr: "new (T_NEW)" class_name_reference . $@44 ctor_arguments

    $default  reduce using rule 272 ($@44)

    $@44  go to state 324


state 168

  402 class_name_reference: dynamic_class_name_reference .

    $default  reduce using rule 402 (class_name_reference)


state 169

  519 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 325


state 170

  405 dynamic_class_name_reference: base_variable . "-> (T_OBJECT_OPERATOR)" $@66 object_property $@67 dynamic_class_name_variable_properties
  406                             | base_variable .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 326

    $default  reduce using rule 406 (dynamic_class_name_reference)


state 171

  520 variable_class_name: reference_variable .
  527 base_variable: reference_variable .
  530 reference_variable: reference_variable . '[' dim_offset ']'
  531                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 303
    '{'  shift, and go to state 304

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 520 (variable_class_name)
    $default                       reduce using rule 527 (base_variable)


state 172

  528 base_variable: simple_indirect_reference . reference_variable
  546 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 305

    reference_variable  go to state 327
    compound_variable   go to state 118


state 173

  411 exit_expr: '(' . ')'
  496 parenthesis_expr: '(' . expr ')'
  497                 | '(' . yield_expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ')'                                           shift, and go to state 328
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 233
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 234
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 174

  348 expr_without_variable: "exit (T_EXIT)" exit_expr .

    $default  reduce using rule 348 (expr_without_variable)


state 175

  412 exit_expr: parenthesis_expr .

    $default  reduce using rule 412 (exit_expr)


state 176

  496 parenthesis_expr: '(' . expr ')'
  497                 | '(' . yield_expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 233
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 234
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 177

   52 unticked_statement: "if (T_IF)" parenthesis_expr . $@5 statement $@6 elseif_list else_single
   55                   | "if (T_IF)" parenthesis_expr . ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    ':'  shift, and go to state 329

    $default  reduce using rule 50 ($@5)

    $@5  go to state 330


state 178

   48 statement: "identifier (T_STRING)" ':' .

    $default  reduce using rule 48 (statement)


state 179

  367 combined_scalar_offset: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 535 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 331
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    dim_offset                         go to state 332
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 180

   78 unticked_statement: "echo (T_ECHO)" echo_expr_list . ';'
  254 echo_expr_list: echo_expr_list . ',' expr

    ','  shift, and go to state 333
    ';'  shift, and go to state 334


state 181

  255 echo_expr_list: expr .
  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 255 (echo_expr_list)


state 182

   61 unticked_statement: "do (T_DO)" $@11 . statement "while (T_WHILE)" $@12 parenthesis_expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 335
    unticked_statement                 go to state 88
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 106
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 183

   58 unticked_statement: "while (T_WHILE)" $@9 . parenthesis_expr @10 while_statement

    '('  shift, and go to state 176

    parenthesis_expr  go to state 336


state 184

   65 unticked_statement: "for (T_FOR)" '(' . for_expr ';' $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 256 (for_expr)

    namespace_name                     go to state 84
    for_expr                           go to state 337
    non_empty_for_expr                 go to state 338
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 339
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 185

   84 unticked_statement: "foreach (T_FOREACH)" '(' . variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement
   87                   | "foreach (T_FOREACH)" '(' . expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 340
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 196
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 341
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 186

   89 unticked_statement: "declare (T_DECLARE)" $@21 . '(' declare_list ')' declare_statement

    '('  shift, and go to state 342


state 187

   67 unticked_statement: "switch (T_SWITCH)" parenthesis_expr . $@16 switch_case_list

    $default  reduce using rule 66 ($@16)

    $@16  go to state 343


state 188

   68 unticked_statement: "break (T_BREAK)" ';' .

    $default  reduce using rule 68 (unticked_statement)


state 189

   69 unticked_statement: "break (T_BREAK)" expr . ';'
  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    ';'                           shift, and go to state 344


state 190

   70 unticked_statement: "continue (T_CONTINUE)" ';' .

    $default  reduce using rule 70 (unticked_statement)


state 191

   71 unticked_statement: "continue (T_CONTINUE)" expr . ';'
  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    ';'                           shift, and go to state 345


state 192

   95 unticked_statement: "goto (T_GOTO)" "identifier (T_STRING)" . ';'

    ';'  shift, and go to state 346


state 193

   39 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 347


state 194

   72 unticked_statement: "return (T_RETURN)" ';' .

    $default  reduce using rule 72 (unticked_statement)


state 195

   73 unticked_statement: "return (T_RETURN)" expr_without_variable . ';'
  495 expr: expr_without_variable .

    ';'  shift, and go to state 348

    $default  reduce using rule 495 (expr)


state 196

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282


state 197

   74 unticked_statement: "return (T_RETURN)" variable . ';'
  276 expr_without_variable: variable . '=' expr
  277                      | variable . '=' '&' variable
  279                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  281                      | variable . "+= (T_PLUS_EQUAL)" expr
  282                      | variable . "-= (T_MINUS_EQUAL)" expr
  283                      | variable . "*= (T_MUL_EQUAL)" expr
  284                      | variable . "**= (T_POW_EQUAL)" expr
  285                      | variable . "/= (T_DIV_EQUAL)" expr
  286                      | variable . ".= (T_CONCAT_EQUAL)" expr
  287                      | variable . "%= (T_MOD_EQUAL)" expr
  288                      | variable . "&= (T_AND_EQUAL)" expr
  289                      | variable . "|= (T_OR_EQUAL)" expr
  290                      | variable . "^= (T_XOR_EQUAL)" expr
  291                      | variable . "<<= (T_SL_EQUAL)" expr
  292                      | variable . ">>= (T_SR_EQUAL)" expr
  498 r_variable: variable .
  500 rw_variable: variable .

    '='                    shift, and go to state 286
    "**= (T_POW_EQUAL)"    shift, and go to state 287
    ">>= (T_SR_EQUAL)"     shift, and go to state 288
    "<<= (T_SL_EQUAL)"     shift, and go to state 289
    "^= (T_XOR_EQUAL)"     shift, and go to state 290
    "|= (T_OR_EQUAL)"      shift, and go to state 291
    "&= (T_AND_EQUAL)"     shift, and go to state 292
    "%= (T_MOD_EQUAL)"     shift, and go to state 293
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 294
    "/= (T_DIV_EQUAL)"     shift, and go to state 295
    "*= (T_MUL_EQUAL)"     shift, and go to state 296
    "-= (T_MINUS_EQUAL)"   shift, and go to state 297
    "+= (T_PLUS_EQUAL)"    shift, and go to state 298
    ';'                    shift, and go to state 349

    "-- (T_DEC)"  reduce using rule 500 (rw_variable)
    "++ (T_INC)"  reduce using rule 500 (rw_variable)
    $default      reduce using rule 498 (r_variable)


state 198

   93 unticked_statement: "try (T_TRY)" $@22 . '{' inner_statement_list '}' catch_statement $@23 finally_statement

    '{'  shift, and go to state 350


state 199

   94 unticked_statement: "throw (T_THROW)" expr . ';'
  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    ';'                           shift, and go to state 351


state 200

   17 top_statement: "use (T_USE)" "function (T_FUNCTION)" . use_function_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 124
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 352

    namespace_name             go to state 353
    use_function_declarations  go to state 354
    use_function_declaration   go to state 355


state 201

   18 top_statement: "use (T_USE)" "const (T_CONST)" . use_const_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 124
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 356

    namespace_name          go to state 357
    use_const_declarations  go to state 358
    use_const_declaration   go to state 359


state 202

   24 use_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name
   25                | "\\ (T_NS_SEPARATOR)" . namespace_name "as (T_AS)" "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 124

    namespace_name  go to state 360


state 203

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   22 use_declaration: namespace_name .
   23                | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 361
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    $default  reduce using rule 22 (use_declaration)


state 204

   16 top_statement: "use (T_USE)" use_declarations . ';'
   20 use_declarations: use_declarations . ',' use_declaration

    ','  shift, and go to state 362
    ';'  shift, and go to state 363


state 205

   21 use_declarations: use_declaration .

    $default  reduce using rule 21 (use_declarations)


state 206

  198 global_var: "variable (T_VARIABLE)" .

    $default  reduce using rule 198 (global_var)


state 207

  199 global_var: '$' . r_variable
  200           | '$' . '{' expr '}'

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '{'                        shift, and go to state 364
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    function_call                      go to state 101
    class_name                         go to state 153
    r_variable                         go to state 365
    variable                           go to state 366
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 208

   76 unticked_statement: "global (T_GLOBAL)" global_var_list . ';'
  196 global_var_list: global_var_list . ',' global_var

    ','  shift, and go to state 367
    ';'  shift, and go to state 368


state 209

  197 global_var_list: global_var .

    $default  reduce using rule 197 (global_var_list)


state 210

  130 class_entry_type: "final (T_FINAL)" "class (T_CLASS)" .

    $default  reduce using rule 130 (class_entry_type)


state 211

  128 class_entry_type: "abstract (T_ABSTRACT)" "class (T_CLASS)" .

    $default  reduce using rule 128 (class_entry_type)


state 212

  203 static_var_list: "variable (T_VARIABLE)" .
  204                | "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 369

    $default  reduce using rule 203 (static_var_list)


state 213

   77 unticked_statement: "static (T_STATIC)" static_var_list . ';'
  201 static_var_list: static_var_list . ',' "variable (T_VARIABLE)"
  202                | static_var_list . ',' "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 370
    ';'  shift, and go to state 371


state 214

  360 expr_without_variable: "static (T_STATIC)" function . is_reference @57 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 251

    $default  reduce using rule 117 (is_reference)

    is_reference  go to state 372


state 215

   81 unticked_statement: "unset (T_UNSET)" '(' . unset_variables ')' ';'

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    unset_variables                    go to state 373
    unset_variable                     go to state 374
    function_call                      go to state 101
    class_name                         go to state 153
    variable                           go to state 375
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 216

  577 internal_functions_in_yacc: "isset (T_ISSET)" '(' . isset_variables ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 376
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 196
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 377
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    isset_variables                    go to state 378
    isset_variable                     go to state 379
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 217

  578 internal_functions_in_yacc: "empty (T_EMPTY)" '(' . variable ')'
  579                           | "empty (T_EMPTY)" '(' . expr_without_variable ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 380
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 196
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 381
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 218

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 382


state 219

  275 expr_without_variable: "list (T_LIST)" '(' . $@45 assignment_list ')' '=' expr

    $default  reduce using rule 274 ($@45)

    $@45  go to state 383


state 220

  369 combined_scalar: "array (T_ARRAY)" '(' . array_pair_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '&'                                           shift, and go to state 158
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 553 (array_pair_list)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 159
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    array_pair_list                    go to state 384
    non_empty_array_pair_list          go to state 161
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 221

  567 encaps_var: "variable (T_VARIABLE)" .
  569           | "variable (T_VARIABLE)" . '[' $@75 encaps_var_offset ']'
  570           | "variable (T_VARIABLE)" . "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"

    '['                       shift, and go to state 385
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 386

    $default  reduce using rule 567 (encaps_var)


state 222

  428 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"
  566 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 221
    "heredoc end (T_END_HEREDOC)"      shift, and go to state 387
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 224
    "{$ (T_CURLY_OPEN)"                shift, and go to state 225

    encaps_var  go to state 388


state 223

  429 common_scalar: "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 429 (common_scalar)


state 224

  571 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . expr '}'
  572           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . "variable name (T_STRING_VARNAME)" '[' expr ']' '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 389
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 390
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 225

  573 encaps_var: "{$ (T_CURLY_OPEN)" . variable '}'

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    function_call                      go to state 101
    class_name                         go to state 153
    variable                           go to state 391
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 226

  484 scalar: "heredoc start (T_START_HEREDOC)" encaps_list . "heredoc end (T_END_HEREDOC)"
  563 encaps_list: encaps_list . encaps_var
  564            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 221
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 392
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 393
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 224
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 225

    encaps_var  go to state 394


state 227

  565 encaps_list: encaps_var .

    $default  reduce using rule 565 (encaps_list)


state 228

  381 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name @59 function_call_parameter_list
  396 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name
  477 general_constant: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 124

    namespace_name  go to state 395


state 229

   15 top_statement: "namespace (T_NAMESPACE)" '{' . $@3 top_statement_list '}'

    $default  reduce using rule 14 ($@3)

    $@3  go to state 396


state 230

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   11 top_statement: "namespace (T_NAMESPACE)" namespace_name . ';'
   13              | "namespace (T_NAMESPACE)" namespace_name . '{' $@2 top_statement_list '}'

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242
    ';'                    shift, and go to state 397
    '{'                    shift, and go to state 398


state 231

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  383 function_call: "\\ (T_NS_SEPARATOR)" namespace_name . @60 function_call_parameter_list
  397 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .
  478 general_constant: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 397 (class_name)
    '('                            reduce using rule 382 (@60)
    $default                       reduce using rule 478 (general_constant)

    @60  go to state 399


state 232

  332 expr_without_variable: new_expr .
  334                      | '(' new_expr . ')' @51 instance_call

    ')'  shift, and go to state 400

    ')'       [reduce using rule 332 (expr_without_variable)]
    $default  reduce using rule 332 (expr_without_variable)


state 233

  497 parenthesis_expr: '(' yield_expr . ')'

    ')'  shift, and go to state 401


state 234

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  496 parenthesis_expr: '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    ')'                           shift, and go to state 402


state 235

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
   49 unticked_statement: '{' inner_statement_list . '}'

    '}'  shift, and go to state 403

    $default  reduce using rule 40 ($@4)

    $@4  go to state 404


state 236

  534 compound_variable: '$' '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 405
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 237

  414 backticks_expr: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .
  566 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 221
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 224
    "{$ (T_CURLY_OPEN)"                shift, and go to state 225

    $default  reduce using rule 414 (backticks_expr)

    encaps_var  go to state 388


state 238

  354 expr_without_variable: '`' backticks_expr . '`'

    '`'  shift, and go to state 406


state 239

  415 backticks_expr: encaps_list .
  563 encaps_list: encaps_list . encaps_var
  564            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 221
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 392
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 224
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 225

    $default  reduce using rule 415 (backticks_expr)

    encaps_var  go to state 394


state 240

  566 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 221
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 224
    "{$ (T_CURLY_OPEN)"                shift, and go to state 225

    encaps_var  go to state 388


state 241

  483 scalar: '"' encaps_list . '"'
  563 encaps_list: encaps_list . encaps_var
  564            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 221
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 392
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 224
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 225
    '"'                                                         shift, and go to state 407

    encaps_var  go to state 394


state 242

    6 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 408


state 243

  379 function_call: namespace_name @58 . function_call_parameter_list

    '('  shift, and go to state 409

    function_call_parameter_list  go to state 410


state 244

   38 constant_declaration: constant_declaration ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 411


state 245

   19 top_statement: constant_declaration ';' .

    $default  reduce using rule 19 (top_statement)


state 246

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" . extends_from $@32 implements_list '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 412

    $default  reduce using rule 131 (extends_from)

    extends_from  go to state 413


state 247

  126 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" . $@33 interface_extends_list '{' class_statement_list '}'

    $default  reduce using rule 125 ($@33)

    $@33  go to state 414


state 248

   75 unticked_statement: yield_expr ';' .

    $default  reduce using rule 75 (unticked_statement)


state 249

  366 combined_scalar_offset: combined_scalar_offset '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 535 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 331
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    dim_offset                         go to state 415
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 250

  365 combined_scalar_offset: combined_scalar '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 535 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 331
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    dim_offset                         go to state 416
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 251

  118 is_reference: '&' .

    $default  reduce using rule 118 (is_reference)


state 252

  122 unticked_function_declaration_statement: function is_reference . "identifier (T_STRING)" $@31 '(' parameter_list ')' '{' inner_statement_list '}'
  358 expr_without_variable: function is_reference . @56 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 417

    $default  reduce using rule 357 (@56)

    @56  go to state 418


state 253

  523 array_function_dereference: function_call $@72 . '[' dim_offset ']'

    '['  shift, and go to state 419


state 254

  385 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name @61 function_call_parameter_list
  387              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects $@62 function_call_parameter_list
  518 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects
  590 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"
  593 class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "class (T_CLASS)"

    "identifier (T_STRING)"  shift, and go to state 420
    "variable (T_VARIABLE)"  shift, and go to state 35
    "class (T_CLASS)"        shift, and go to state 421
    '{'                      shift, and go to state 422
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 423
    reference_variable         go to state 424
    compound_variable          go to state 118
    variable_name              go to state 425
    simple_indirect_reference  go to state 426


state 255

  368 combined_scalar_offset: general_constant '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 535 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 331
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    dim_offset                         go to state 427
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 256

  302 expr_without_variable: expr "or (T_LOGICAL_OR)" . $@49 expr

    $default  reduce using rule 301 ($@49)

    $@49  go to state 428


state 257

  305 expr_without_variable: expr "xor (T_LOGICAL_XOR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 429
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 258

  304 expr_without_variable: expr "and (T_LOGICAL_AND)" . $@50 expr

    $default  reduce using rule 303 ($@50)

    $@50  go to state 430


state 259

  337 expr_without_variable: expr '?' . $@52 expr ':' $@53 expr
  339                      | expr '?' . ':' $@54 expr

    ':'  shift, and go to state 431

    $default  reduce using rule 335 ($@52)

    $@52  go to state 432


state 260

  298 expr_without_variable: expr "|| (T_BOOLEAN_OR)" . $@47 expr

    $default  reduce using rule 297 ($@47)

    $@47  go to state 433


state 261

  300 expr_without_variable: expr "&& (T_BOOLEAN_AND)" . $@48 expr

    $default  reduce using rule 299 ($@48)

    $@48  go to state 434


state 262

  306 expr_without_variable: expr '|' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 435
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 263

  308 expr_without_variable: expr '^' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 436
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 264

  307 expr_without_variable: expr '&' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 437
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 265

  323 expr_without_variable: expr "!== (T_IS_NOT_IDENTICAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 438
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 266

  322 expr_without_variable: expr "=== (T_IS_IDENTICAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 439
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 267

  325 expr_without_variable: expr "!= (T_IS_NOT_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 440
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 268

  324 expr_without_variable: expr "== (T_IS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 441
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 269

  326 expr_without_variable: expr '<' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 442
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 270

  328 expr_without_variable: expr '>' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 443
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 271

  329 expr_without_variable: expr ">= (T_IS_GREATER_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 444
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 272

  327 expr_without_variable: expr "<= (T_IS_SMALLER_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 445
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 273

  317 expr_without_variable: expr ">> (T_SR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 446
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 274

  316 expr_without_variable: expr "<< (T_SL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 447
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 275

  310 expr_without_variable: expr '+' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 448
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 276

  311 expr_without_variable: expr '-' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 449
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 277

  309 expr_without_variable: expr '.' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 450
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 278

  312 expr_without_variable: expr '*' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 451
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 279

  314 expr_without_variable: expr '/' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 452
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 280

  315 expr_without_variable: expr '%' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 453
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 281

  330 expr_without_variable: expr "instanceof (T_INSTANCEOF)" . class_name_reference

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 163
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 164
    '$'                        shift, and go to state 81

    namespace_name                go to state 165
    class_name                    go to state 166
    class_name_reference          go to state 454
    dynamic_class_name_reference  go to state 168
    static_member                 go to state 112
    variable_class_name           go to state 169
    base_variable                 go to state 170
    reference_variable            go to state 171
    compound_variable             go to state 118
    simple_indirect_reference     go to state 172


state 282

  313 expr_without_variable: expr "** (T_POW)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 455
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 283

   80 unticked_statement: expr ';' .

    $default  reduce using rule 80 (unticked_statement)


state 284

  295 expr_without_variable: rw_variable "-- (T_DEC)" .

    $default  reduce using rule 295 (expr_without_variable)


state 285

  293 expr_without_variable: rw_variable "++ (T_INC)" .

    $default  reduce using rule 293 (expr_without_variable)


state 286

  276 expr_without_variable: variable '=' . expr
  277                      | variable '=' . '&' variable
  279                      | variable '=' . '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '&'                                           shift, and go to state 456
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 457
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 287

  284 expr_without_variable: variable "**= (T_POW_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 458
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 288

  292 expr_without_variable: variable ">>= (T_SR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 459
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 289

  291 expr_without_variable: variable "<<= (T_SL_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 460
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 290

  290 expr_without_variable: variable "^= (T_XOR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 461
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 291

  289 expr_without_variable: variable "|= (T_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 462
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 292

  288 expr_without_variable: variable "&= (T_AND_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 463
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 293

  287 expr_without_variable: variable "%= (T_MOD_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 464
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 294

  286 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 465
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 295

  285 expr_without_variable: variable "/= (T_DIV_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 466
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 296

  283 expr_without_variable: variable "*= (T_MUL_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 467
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 297

  282 expr_without_variable: variable "-= (T_MINUS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 468
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 298

  281 expr_without_variable: variable "+= (T_PLUS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 469
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 299

  393 function_call: variable_without_objects $@65 . function_call_parameter_list

    '('  shift, and go to state 409

    function_call_parameter_list  go to state 470


state 300

  389 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name $@63 function_call_parameter_list
  391              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects $@64 function_call_parameter_list
  519 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects
  591 class_constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 471
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 422
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 472
    reference_variable         go to state 424
    compound_variable          go to state 118
    variable_name              go to state 473
    simple_indirect_reference  go to state 426


state 301

  521 array_function_dereference: array_function_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 535 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 331
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    dim_offset                         go to state 474
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 302

  503 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" . $@68 object_property $@69 method_or_not variable_properties

    $default  reduce using rule 501 ($@68)

    $@68  go to state 475


state 303

  530 reference_variable: reference_variable '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 535 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 331
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    dim_offset                         go to state 476
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 304

  531 reference_variable: reference_variable '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 477
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 305

  534 compound_variable: '$' . '{' expr '}'
  546 simple_indirect_reference: simple_indirect_reference '$' .

    '{'  shift, and go to state 236

    $default  reduce using rule 546 (simple_indirect_reference)


state 306

  517 variable_without_objects: simple_indirect_reference reference_variable .
  528 base_variable: simple_indirect_reference reference_variable .
  530 reference_variable: reference_variable . '[' dim_offset ']'
  531                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 303
    '{'  shift, and go to state 304

    '('       reduce using rule 517 (variable_without_objects)
    $default  reduce using rule 528 (base_variable)


state 307

  358 expr_without_variable: function is_reference . @56 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    $default  reduce using rule 357 (@56)

    @56  go to state 418


state 308

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  582 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    ')'                           shift, and go to state 478


state 309

  363 yield_expr: "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" . expr_without_variable
  364           | "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" . variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 479
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 196
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 480
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 310

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  350                      | '@' $@55 expr .

    "** (T_POW)"  shift, and go to state 282

    $default  reduce using rule 350 (expr_without_variable)


state 311

  381 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name @59 function_call_parameter_list
  396 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 124

    namespace_name  go to state 481


state 312

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  383 function_call: "\\ (T_NS_SEPARATOR)" namespace_name . @60 function_call_parameter_list
  397 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 397 (class_name)
    $default                       reduce using rule 382 (@60)

    @60  go to state 399


state 313

  385 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name @61 function_call_parameter_list
  387              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects $@62 function_call_parameter_list
  518 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "identifier (T_STRING)"  shift, and go to state 482
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 422
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 423
    reference_variable         go to state 424
    compound_variable          go to state 118
    variable_name              go to state 425
    simple_indirect_reference  go to state 426


state 314

  389 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name $@63 function_call_parameter_list
  391              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects $@64 function_call_parameter_list
  519 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "identifier (T_STRING)"  shift, and go to state 482
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 422
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 472
    reference_variable         go to state 424
    compound_variable          go to state 118
    variable_name              go to state 473
    simple_indirect_reference  go to state 426


state 315

  562 non_empty_array_pair_list: '&' w_variable .

    $default  reduce using rule 562 (non_empty_array_pair_list)


state 316

  499 w_variable: variable .

    $default  reduce using rule 499 (w_variable)


state 317

  557 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" . expr
  561                          | expr "=> (T_DOUBLE_ARROW)" . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '&'                                           shift, and go to state 483
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 484
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 318

  370 combined_scalar: '[' array_pair_list ']' .

    $default  reduce using rule 370 (combined_scalar)


state 319

  489 possible_comma: ',' .
  555 non_empty_array_pair_list: non_empty_array_pair_list ',' . expr "=> (T_DOUBLE_ARROW)" expr
  556                          | non_empty_array_pair_list ',' . expr
  559                          | non_empty_array_pair_list ',' . expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  560                          | non_empty_array_pair_list ',' . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '&'                                           shift, and go to state 485
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 489 (possible_comma)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 486
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 320

  554 array_pair_list: non_empty_array_pair_list possible_comma .

    $default  reduce using rule 554 (array_pair_list)


state 321

  396 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 124

    namespace_name  go to state 487


state 322

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  397 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    $default  reduce using rule 397 (class_name)


state 323

  518 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 488
    reference_variable         go to state 424
    compound_variable          go to state 118
    simple_indirect_reference  go to state 426


state 324

  273 new_expr: "new (T_NEW)" class_name_reference $@44 . ctor_arguments

    '('  shift, and go to state 409

    $default  reduce using rule 416 (ctor_arguments)

    function_call_parameter_list  go to state 489
    ctor_arguments                go to state 490


state 325

  519 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 491
    reference_variable         go to state 424
    compound_variable          go to state 118
    simple_indirect_reference  go to state 426


state 326

  405 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" . $@66 object_property $@67 dynamic_class_name_variable_properties

    $default  reduce using rule 403 ($@66)

    $@66  go to state 492


state 327

  528 base_variable: simple_indirect_reference reference_variable .
  530 reference_variable: reference_variable . '[' dim_offset ']'
  531                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 303
    '{'  shift, and go to state 304

    $default  reduce using rule 528 (base_variable)


state 328

  411 exit_expr: '(' ')' .

    $default  reduce using rule 411 (exit_expr)


state 329

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' . $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 53 ($@7)

    $@7  go to state 493


state 330

   52 unticked_statement: "if (T_IF)" parenthesis_expr $@5 . statement $@6 elseif_list else_single

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 494
    unticked_statement                 go to state 88
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 106
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 331

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  536 dim_offset: expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 536 (dim_offset)


state 332

  367 combined_scalar_offset: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '[' dim_offset . ']'

    ']'  shift, and go to state 495


state 333

  254 echo_expr_list: echo_expr_list ',' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 496
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 334

   78 unticked_statement: "echo (T_ECHO)" echo_expr_list ';' .

    $default  reduce using rule 78 (unticked_statement)


state 335

   61 unticked_statement: "do (T_DO)" $@11 statement . "while (T_WHILE)" $@12 parenthesis_expr ';'

    "while (T_WHILE)"  shift, and go to state 497


state 336

   58 unticked_statement: "while (T_WHILE)" $@9 parenthesis_expr . @10 while_statement

    $default  reduce using rule 57 (@10)

    @10  go to state 498


state 337

   65 unticked_statement: "for (T_FOR)" '(' for_expr . ';' $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement

    ';'  shift, and go to state 499


state 338

  257 for_expr: non_empty_for_expr .
  259 non_empty_for_expr: non_empty_for_expr . ',' $@41 expr

    ','  shift, and go to state 500

    $default  reduce using rule 257 (for_expr)


state 339

  260 non_empty_for_expr: expr .
  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 260 (non_empty_for_expr)


state 340

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable . "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement
  495 expr: expr_without_variable .

    "as (T_AS)"  shift, and go to state 501

    $default  reduce using rule 495 (expr)


state 341

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable . "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement
  276 expr_without_variable: variable . '=' expr
  277                      | variable . '=' '&' variable
  279                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  281                      | variable . "+= (T_PLUS_EQUAL)" expr
  282                      | variable . "-= (T_MINUS_EQUAL)" expr
  283                      | variable . "*= (T_MUL_EQUAL)" expr
  284                      | variable . "**= (T_POW_EQUAL)" expr
  285                      | variable . "/= (T_DIV_EQUAL)" expr
  286                      | variable . ".= (T_CONCAT_EQUAL)" expr
  287                      | variable . "%= (T_MOD_EQUAL)" expr
  288                      | variable . "&= (T_AND_EQUAL)" expr
  289                      | variable . "|= (T_OR_EQUAL)" expr
  290                      | variable . "^= (T_XOR_EQUAL)" expr
  291                      | variable . "<<= (T_SL_EQUAL)" expr
  292                      | variable . ">>= (T_SR_EQUAL)" expr
  498 r_variable: variable .
  500 rw_variable: variable .

    '='                    shift, and go to state 286
    "**= (T_POW_EQUAL)"    shift, and go to state 287
    ">>= (T_SR_EQUAL)"     shift, and go to state 288
    "<<= (T_SL_EQUAL)"     shift, and go to state 289
    "^= (T_XOR_EQUAL)"     shift, and go to state 290
    "|= (T_OR_EQUAL)"      shift, and go to state 291
    "&= (T_AND_EQUAL)"     shift, and go to state 292
    "%= (T_MOD_EQUAL)"     shift, and go to state 293
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 294
    "/= (T_DIV_EQUAL)"     shift, and go to state 295
    "*= (T_MUL_EQUAL)"     shift, and go to state 296
    "-= (T_MINUS_EQUAL)"   shift, and go to state 297
    "+= (T_PLUS_EQUAL)"    shift, and go to state 298
    "as (T_AS)"            shift, and go to state 502

    "-- (T_DEC)"  reduce using rule 500 (rw_variable)
    "++ (T_INC)"  reduce using rule 500 (rw_variable)
    $default      reduce using rule 498 (r_variable)


state 342

   89 unticked_statement: "declare (T_DECLARE)" $@21 '(' . declare_list ')' declare_statement

    "identifier (T_STRING)"  shift, and go to state 503

    declare_list  go to state 504


state 343

   67 unticked_statement: "switch (T_SWITCH)" parenthesis_expr $@16 . switch_case_list

    ':'  shift, and go to state 505
    '{'  shift, and go to state 506

    switch_case_list  go to state 507


state 344

   69 unticked_statement: "break (T_BREAK)" expr ';' .

    $default  reduce using rule 69 (unticked_statement)


state 345

   71 unticked_statement: "continue (T_CONTINUE)" expr ';' .

    $default  reduce using rule 71 (unticked_statement)


state 346

   95 unticked_statement: "goto (T_GOTO)" "identifier (T_STRING)" ';' .

    $default  reduce using rule 95 (unticked_statement)


state 347

   39 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar             go to state 524
    static_scalar_value       go to state 525
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 348

   73 unticked_statement: "return (T_RETURN)" expr_without_variable ';' .

    $default  reduce using rule 73 (unticked_statement)


state 349

   74 unticked_statement: "return (T_RETURN)" variable ';' .

    $default  reduce using rule 74 (unticked_statement)


state 350

   93 unticked_statement: "try (T_TRY)" $@22 '{' . inner_statement_list '}' catch_statement $@23 finally_statement

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 528


state 351

   94 unticked_statement: "throw (T_THROW)" expr ';' .

    $default  reduce using rule 94 (unticked_statement)


state 352

   30 use_function_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name
   31                         | "\\ (T_NS_SEPARATOR)" . namespace_name "as (T_AS)" "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 124

    namespace_name  go to state 529


state 353

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   28 use_function_declaration: namespace_name .
   29                         | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 530
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    $default  reduce using rule 28 (use_function_declaration)


state 354

   17 top_statement: "use (T_USE)" "function (T_FUNCTION)" use_function_declarations . ';'
   26 use_function_declarations: use_function_declarations . ',' use_function_declaration

    ','  shift, and go to state 531
    ';'  shift, and go to state 532


state 355

   27 use_function_declarations: use_function_declaration .

    $default  reduce using rule 27 (use_function_declarations)


state 356

   36 use_const_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name
   37                      | "\\ (T_NS_SEPARATOR)" . namespace_name "as (T_AS)" "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 124

    namespace_name  go to state 533


state 357

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   34 use_const_declaration: namespace_name .
   35                      | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 534
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    $default  reduce using rule 34 (use_const_declaration)


state 358

   18 top_statement: "use (T_USE)" "const (T_CONST)" use_const_declarations . ';'
   32 use_const_declarations: use_const_declarations . ',' use_const_declaration

    ','  shift, and go to state 535
    ';'  shift, and go to state 536


state 359

   33 use_const_declarations: use_const_declaration .

    $default  reduce using rule 33 (use_const_declarations)


state 360

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   24 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name .
   25                | "\\ (T_NS_SEPARATOR)" namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 537
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    $default  reduce using rule 24 (use_declaration)


state 361

   23 use_declaration: namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 538


state 362

   20 use_declarations: use_declarations ',' . use_declaration

    "identifier (T_STRING)"  shift, and go to state 124
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 202

    namespace_name   go to state 203
    use_declaration  go to state 539


state 363

   16 top_statement: "use (T_USE)" use_declarations ';' .

    $default  reduce using rule 16 (top_statement)


state 364

  200 global_var: '$' '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 540
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 365

  199 global_var: '$' r_variable .

    $default  reduce using rule 199 (global_var)


state 366

  498 r_variable: variable .

    $default  reduce using rule 498 (r_variable)


state 367

  196 global_var_list: global_var_list ',' . global_var

    "variable (T_VARIABLE)"  shift, and go to state 206
    '$'                      shift, and go to state 207

    global_var  go to state 541


state 368

   76 unticked_statement: "global (T_GLOBAL)" global_var_list ';' .

    $default  reduce using rule 76 (unticked_statement)


state 369

  204 static_var_list: "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar             go to state 542
    static_scalar_value       go to state 525
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 370

  201 static_var_list: static_var_list ',' . "variable (T_VARIABLE)"
  202                | static_var_list ',' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 543


state 371

   77 unticked_statement: "static (T_STATIC)" static_var_list ';' .

    $default  reduce using rule 77 (unticked_statement)


state 372

  360 expr_without_variable: "static (T_STATIC)" function is_reference . @57 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    $default  reduce using rule 359 (@57)

    @57  go to state 544


state 373

   81 unticked_statement: "unset (T_UNSET)" '(' unset_variables . ')' ';'
  113 unset_variables: unset_variables . ',' unset_variable

    ','  shift, and go to state 545
    ')'  shift, and go to state 546


state 374

  112 unset_variables: unset_variable .

    $default  reduce using rule 112 (unset_variables)


state 375

  114 unset_variable: variable .

    $default  reduce using rule 114 (unset_variable)


state 376

  495 expr: expr_without_variable .
  589 isset_variable: expr_without_variable .

    ','       reduce using rule 589 (isset_variable)
    ')'       reduce using rule 589 (isset_variable)
    $default  reduce using rule 495 (expr)


state 377

  276 expr_without_variable: variable . '=' expr
  277                      | variable . '=' '&' variable
  279                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  281                      | variable . "+= (T_PLUS_EQUAL)" expr
  282                      | variable . "-= (T_MINUS_EQUAL)" expr
  283                      | variable . "*= (T_MUL_EQUAL)" expr
  284                      | variable . "**= (T_POW_EQUAL)" expr
  285                      | variable . "/= (T_DIV_EQUAL)" expr
  286                      | variable . ".= (T_CONCAT_EQUAL)" expr
  287                      | variable . "%= (T_MOD_EQUAL)" expr
  288                      | variable . "&= (T_AND_EQUAL)" expr
  289                      | variable . "|= (T_OR_EQUAL)" expr
  290                      | variable . "^= (T_XOR_EQUAL)" expr
  291                      | variable . "<<= (T_SL_EQUAL)" expr
  292                      | variable . ">>= (T_SR_EQUAL)" expr
  498 r_variable: variable .
  500 rw_variable: variable .
  588 isset_variable: variable .

    '='                    shift, and go to state 286
    "**= (T_POW_EQUAL)"    shift, and go to state 287
    ">>= (T_SR_EQUAL)"     shift, and go to state 288
    "<<= (T_SL_EQUAL)"     shift, and go to state 289
    "^= (T_XOR_EQUAL)"     shift, and go to state 290
    "|= (T_OR_EQUAL)"      shift, and go to state 291
    "&= (T_AND_EQUAL)"     shift, and go to state 292
    "%= (T_MOD_EQUAL)"     shift, and go to state 293
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 294
    "/= (T_DIV_EQUAL)"     shift, and go to state 295
    "*= (T_MUL_EQUAL)"     shift, and go to state 296
    "-= (T_MINUS_EQUAL)"   shift, and go to state 297
    "+= (T_PLUS_EQUAL)"    shift, and go to state 298

    ','           reduce using rule 588 (isset_variable)
    "-- (T_DEC)"  reduce using rule 500 (rw_variable)
    "++ (T_INC)"  reduce using rule 500 (rw_variable)
    ')'           reduce using rule 588 (isset_variable)
    $default      reduce using rule 498 (r_variable)


state 378

  577 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables . ')'
  587 isset_variables: isset_variables . ',' $@76 isset_variable

    ','  shift, and go to state 547
    ')'  shift, and go to state 548


state 379

  585 isset_variables: isset_variable .

    $default  reduce using rule 585 (isset_variables)


state 380

  495 expr: expr_without_variable .
  579 internal_functions_in_yacc: "empty (T_EMPTY)" '(' expr_without_variable . ')'

    ')'  shift, and go to state 549

    $default  reduce using rule 495 (expr)


state 381

  276 expr_without_variable: variable . '=' expr
  277                      | variable . '=' '&' variable
  279                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  281                      | variable . "+= (T_PLUS_EQUAL)" expr
  282                      | variable . "-= (T_MINUS_EQUAL)" expr
  283                      | variable . "*= (T_MUL_EQUAL)" expr
  284                      | variable . "**= (T_POW_EQUAL)" expr
  285                      | variable . "/= (T_DIV_EQUAL)" expr
  286                      | variable . ".= (T_CONCAT_EQUAL)" expr
  287                      | variable . "%= (T_MOD_EQUAL)" expr
  288                      | variable . "&= (T_AND_EQUAL)" expr
  289                      | variable . "|= (T_OR_EQUAL)" expr
  290                      | variable . "^= (T_XOR_EQUAL)" expr
  291                      | variable . "<<= (T_SL_EQUAL)" expr
  292                      | variable . ">>= (T_SR_EQUAL)" expr
  498 r_variable: variable .
  500 rw_variable: variable .
  578 internal_functions_in_yacc: "empty (T_EMPTY)" '(' variable . ')'

    '='                    shift, and go to state 286
    "**= (T_POW_EQUAL)"    shift, and go to state 287
    ">>= (T_SR_EQUAL)"     shift, and go to state 288
    "<<= (T_SL_EQUAL)"     shift, and go to state 289
    "^= (T_XOR_EQUAL)"     shift, and go to state 290
    "|= (T_OR_EQUAL)"      shift, and go to state 291
    "&= (T_AND_EQUAL)"     shift, and go to state 292
    "%= (T_MOD_EQUAL)"     shift, and go to state 293
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 294
    "/= (T_DIV_EQUAL)"     shift, and go to state 295
    "*= (T_MUL_EQUAL)"     shift, and go to state 296
    "-= (T_MINUS_EQUAL)"   shift, and go to state 297
    "+= (T_PLUS_EQUAL)"    shift, and go to state 298
    ')'                    shift, and go to state 550

    "-- (T_DEC)"  reduce using rule 500 (rw_variable)
    "++ (T_INC)"  reduce using rule 500 (rw_variable)
    $default      reduce using rule 498 (r_variable)


state 382

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 551


state 383

  275 expr_without_variable: "list (T_LIST)" '(' $@45 . assignment_list ')' '=' expr

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "list (T_LIST)"            shift, and go to state 552
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    $default  reduce using rule 552 (assignment_list_element)

    namespace_name                     go to state 152
    function_call                      go to state 101
    class_name                         go to state 153
    variable                           go to state 553
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    assignment_list                    go to state 554
    assignment_list_element            go to state 555


state 384

  369 combined_scalar: "array (T_ARRAY)" '(' array_pair_list . ')'

    ')'  shift, and go to state 556


state 385

  569 encaps_var: "variable (T_VARIABLE)" '[' . $@75 encaps_var_offset ']'

    $default  reduce using rule 568 ($@75)

    $@75  go to state 557


state 386

  570 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 558


state 387

  428 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 428 (common_scalar)


state 388

  566 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var .

    $default  reduce using rule 566 (encaps_list)


state 389

  479 scalar: "variable name (T_STRING_VARNAME)" .
  572 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" . '[' expr ']' '}'

    '['  shift, and go to state 559

    $default  reduce using rule 479 (scalar)


state 390

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  571 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    '}'                           shift, and go to state 560


state 391

  573 encaps_var: "{$ (T_CURLY_OPEN)" variable . '}'

    '}'  shift, and go to state 561


state 392

  564 encaps_list: encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .

    $default  reduce using rule 564 (encaps_list)


state 393

  484 scalar: "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 484 (scalar)


state 394

  563 encaps_list: encaps_list encaps_var .

    $default  reduce using rule 563 (encaps_list)


state 395

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  381 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name . @59 function_call_parameter_list
  396 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .
  477 general_constant: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 396 (class_name)
    '('                            reduce using rule 380 (@59)
    $default                       reduce using rule 477 (general_constant)

    @59  go to state 562


state 396

   15 top_statement: "namespace (T_NAMESPACE)" '{' $@3 . top_statement_list '}'

    $default  reduce using rule 4 (top_statement_list)

    top_statement_list  go to state 563


state 397

   11 top_statement: "namespace (T_NAMESPACE)" namespace_name ';' .

    $default  reduce using rule 11 (top_statement)


state 398

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' . $@2 top_statement_list '}'

    $default  reduce using rule 12 ($@2)

    $@2  go to state 564


state 399

  383 function_call: "\\ (T_NS_SEPARATOR)" namespace_name @60 . function_call_parameter_list

    '('  shift, and go to state 409

    function_call_parameter_list  go to state 565


state 400

  334 expr_without_variable: '(' new_expr ')' . @51 instance_call

    $default  reduce using rule 333 (@51)

    @51  go to state 566


state 401

  497 parenthesis_expr: '(' yield_expr ')' .

    $default  reduce using rule 497 (parenthesis_expr)


state 402

  496 parenthesis_expr: '(' expr ')' .

    $default  reduce using rule 496 (parenthesis_expr)


state 403

   49 unticked_statement: '{' inner_statement_list '}' .

    $default  reduce using rule 49 (unticked_statement)


state 404

   41 inner_statement_list: inner_statement_list $@4 . inner_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "final (T_FINAL)"                             shift, and go to state 55
    "abstract (T_ABSTRACT)"                       shift, and go to state 56
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 567
    "class (T_CLASS)"                             shift, and go to state 62
    "trait (T_TRAIT)"                             shift, and go to state 63
    "interface (T_INTERFACE)"                     shift, and go to state 64
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                           go to state 84
    inner_statement                          go to state 568
    statement                                go to state 569
    unticked_statement                       go to state 88
    function_declaration_statement           go to state 570
    class_declaration_statement              go to state 571
    unticked_function_declaration_statement  go to state 91
    unticked_class_declaration_statement     go to state 92
    class_entry_type                         go to state 93
    interface_entry                          go to state 94
    new_expr                                 go to state 95
    expr_without_variable                    go to state 96
    yield_expr                               go to state 97
    combined_scalar_offset                   go to state 98
    combined_scalar                          go to state 99
    function                                 go to state 100
    function_call                            go to state 101
    class_name                               go to state 102
    common_scalar                            go to state 103
    general_constant                         go to state 104
    scalar                                   go to state 105
    expr                                     go to state 106
    parenthesis_expr                         go to state 107
    r_variable                               go to state 108
    rw_variable                              go to state 109
    variable                                 go to state 110
    variable_without_objects                 go to state 111
    static_member                            go to state 112
    variable_class_name                      go to state 113
    array_function_dereference               go to state 114
    base_variable_with_function_calls        go to state 115
    base_variable                            go to state 116
    reference_variable                       go to state 117
    compound_variable                        go to state 118
    simple_indirect_reference                go to state 119
    internal_functions_in_yacc               go to state 120
    class_constant                           go to state 121
    class_name_scalar                        go to state 122


state 405

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  534 compound_variable: '$' '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    '}'                           shift, and go to state 572


state 406

  354 expr_without_variable: '`' backticks_expr '`' .

    $default  reduce using rule 354 (expr_without_variable)


state 407

  483 scalar: '"' encaps_list '"' .

    $default  reduce using rule 483 (scalar)


state 408

    6 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 6 (namespace_name)


state 409

  187 function_call_parameter_list: '(' . ')'
  188                             | '(' . non_empty_function_call_parameter_list ')'
  189                             | '(' . yield_expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '&'                                           shift, and go to state 573
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    "... (T_ELLIPSIS)"                            shift, and go to state 574
    '('                                           shift, and go to state 78
    ')'                                           shift, and go to state 575
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                          go to state 84
    non_empty_function_call_parameter_list  go to state 576
    function_call_parameter                 go to state 577
    new_expr                                go to state 95
    expr_without_variable                   go to state 578
    yield_expr                              go to state 579
    combined_scalar_offset                  go to state 98
    combined_scalar                         go to state 99
    function                                go to state 127
    function_call                           go to state 101
    class_name                              go to state 102
    common_scalar                           go to state 103
    general_constant                        go to state 104
    scalar                                  go to state 105
    expr                                    go to state 196
    parenthesis_expr                        go to state 107
    r_variable                              go to state 108
    rw_variable                             go to state 109
    variable                                go to state 580
    variable_without_objects                go to state 111
    static_member                           go to state 112
    variable_class_name                     go to state 113
    array_function_dereference              go to state 114
    base_variable_with_function_calls       go to state 115
    base_variable                           go to state 116
    reference_variable                      go to state 117
    compound_variable                       go to state 118
    simple_indirect_reference               go to state 119
    internal_functions_in_yacc              go to state 120
    class_constant                          go to state 121
    class_name_scalar                       go to state 122


state 410

  379 function_call: namespace_name @58 function_call_parameter_list .

    $default  reduce using rule 379 (function_call)


state 411

   38 constant_declaration: constant_declaration ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 581


state 412

  132 extends_from: "extends (T_EXTENDS)" . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 124
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    namespace_name              go to state 584
    fully_qualified_class_name  go to state 585


state 413

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from . $@32 implements_list '{' class_statement_list '}'

    $default  reduce using rule 123 ($@32)

    $@32  go to state 586


state 414

  126 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@33 . interface_extends_list '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 587

    $default  reduce using rule 134 (interface_extends_list)

    interface_extends_list  go to state 588


state 415

  366 combined_scalar_offset: combined_scalar_offset '[' dim_offset . ']'

    ']'  shift, and go to state 589


state 416

  365 combined_scalar_offset: combined_scalar '[' dim_offset . ']'

    ']'  shift, and go to state 590


state 417

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" . $@31 '(' parameter_list ')' '{' inner_statement_list '}'

    $default  reduce using rule 121 ($@31)

    $@31  go to state 591


state 418

  358 expr_without_variable: function is_reference @56 . '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '('  shift, and go to state 592


state 419

  523 array_function_dereference: function_call $@72 '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 535 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 331
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    dim_offset                         go to state 593
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 420

  543 variable_name: "identifier (T_STRING)" .
  590 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    '('       reduce using rule 543 (variable_name)
    $default  reduce using rule 590 (class_constant)


state 421

  593 class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)" .

    $default  reduce using rule 593 (class_name_scalar)


state 422

  544 variable_name: '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 594
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 423

  387 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects . $@62 function_call_parameter_list
  518 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    '('       reduce using rule 386 ($@62)
    $default  reduce using rule 518 (static_member)

    $@62  go to state 595


state 424

  516 variable_without_objects: reference_variable .
  530 reference_variable: reference_variable . '[' dim_offset ']'
  531                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 303
    '{'  shift, and go to state 304

    $default  reduce using rule 516 (variable_without_objects)


state 425

  385 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name . @61 function_call_parameter_list

    $default  reduce using rule 384 (@61)

    @61  go to state 596


state 426

  517 variable_without_objects: simple_indirect_reference . reference_variable
  546 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 305

    reference_variable  go to state 597
    compound_variable   go to state 118


state 427

  368 combined_scalar_offset: general_constant '[' dim_offset . ']'

    ']'  shift, and go to state 598


state 428

  302 expr_without_variable: expr "or (T_LOGICAL_OR)" $@49 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 599
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 429

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  305                      | expr "xor (T_LOGICAL_XOR)" expr .
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 305 (expr_without_variable)


state 430

  304 expr_without_variable: expr "and (T_LOGICAL_AND)" $@50 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 600
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 431

  339 expr_without_variable: expr '?' ':' . $@54 expr

    $default  reduce using rule 338 ($@54)

    $@54  go to state 601


state 432

  337 expr_without_variable: expr '?' $@52 . expr ':' $@53 expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 602
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 433

  298 expr_without_variable: expr "|| (T_BOOLEAN_OR)" $@47 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 603
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 434

  300 expr_without_variable: expr "&& (T_BOOLEAN_AND)" $@48 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 604
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 435

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  306                      | expr '|' expr .
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 306 (expr_without_variable)


state 436

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  308                      | expr '^' expr .
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 308 (expr_without_variable)


state 437

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  307                      | expr '&' expr .
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 307 (expr_without_variable)


state 438

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  323                      | expr "!== (T_IS_NOT_IDENTICAL)" expr .
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 323 (expr_without_variable)


state 439

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  322                      | expr "=== (T_IS_IDENTICAL)" expr .
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 322 (expr_without_variable)


state 440

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  325                      | expr "!= (T_IS_NOT_EQUAL)" expr .
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 325 (expr_without_variable)


state 441

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  324                      | expr "== (T_IS_EQUAL)" expr .
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 324 (expr_without_variable)


state 442

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  326                      | expr '<' expr .
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    ">> (T_SR)"                  shift, and go to state 273
    "<< (T_SL)"                  shift, and go to state 274
    '+'                          shift, and go to state 275
    '-'                          shift, and go to state 276
    '.'                          shift, and go to state 277
    '*'                          shift, and go to state 278
    '/'                          shift, and go to state 279
    '%'                          shift, and go to state 280
    "instanceof (T_INSTANCEOF)"  shift, and go to state 281
    "** (T_POW)"                 shift, and go to state 282

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 326 (expr_without_variable)


state 443

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  328                      | expr '>' expr .
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    ">> (T_SR)"                  shift, and go to state 273
    "<< (T_SL)"                  shift, and go to state 274
    '+'                          shift, and go to state 275
    '-'                          shift, and go to state 276
    '.'                          shift, and go to state 277
    '*'                          shift, and go to state 278
    '/'                          shift, and go to state 279
    '%'                          shift, and go to state 280
    "instanceof (T_INSTANCEOF)"  shift, and go to state 281
    "** (T_POW)"                 shift, and go to state 282

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 328 (expr_without_variable)


state 444

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  329                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr .
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    ">> (T_SR)"                  shift, and go to state 273
    "<< (T_SL)"                  shift, and go to state 274
    '+'                          shift, and go to state 275
    '-'                          shift, and go to state 276
    '.'                          shift, and go to state 277
    '*'                          shift, and go to state 278
    '/'                          shift, and go to state 279
    '%'                          shift, and go to state 280
    "instanceof (T_INSTANCEOF)"  shift, and go to state 281
    "** (T_POW)"                 shift, and go to state 282

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 329 (expr_without_variable)


state 445

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  327                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr .
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    ">> (T_SR)"                  shift, and go to state 273
    "<< (T_SL)"                  shift, and go to state 274
    '+'                          shift, and go to state 275
    '-'                          shift, and go to state 276
    '.'                          shift, and go to state 277
    '*'                          shift, and go to state 278
    '/'                          shift, and go to state 279
    '%'                          shift, and go to state 280
    "instanceof (T_INSTANCEOF)"  shift, and go to state 281
    "** (T_POW)"                 shift, and go to state 282

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 327 (expr_without_variable)


state 446

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  317                      | expr ">> (T_SR)" expr .
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '+'                          shift, and go to state 275
    '-'                          shift, and go to state 276
    '.'                          shift, and go to state 277
    '*'                          shift, and go to state 278
    '/'                          shift, and go to state 279
    '%'                          shift, and go to state 280
    "instanceof (T_INSTANCEOF)"  shift, and go to state 281
    "** (T_POW)"                 shift, and go to state 282

    $default  reduce using rule 317 (expr_without_variable)


state 447

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  316                      | expr "<< (T_SL)" expr .
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '+'                          shift, and go to state 275
    '-'                          shift, and go to state 276
    '.'                          shift, and go to state 277
    '*'                          shift, and go to state 278
    '/'                          shift, and go to state 279
    '%'                          shift, and go to state 280
    "instanceof (T_INSTANCEOF)"  shift, and go to state 281
    "** (T_POW)"                 shift, and go to state 282

    $default  reduce using rule 316 (expr_without_variable)


state 448

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  310                      | expr '+' expr .
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '*'                          shift, and go to state 278
    '/'                          shift, and go to state 279
    '%'                          shift, and go to state 280
    "instanceof (T_INSTANCEOF)"  shift, and go to state 281
    "** (T_POW)"                 shift, and go to state 282

    $default  reduce using rule 310 (expr_without_variable)


state 449

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  311                      | expr '-' expr .
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '*'                          shift, and go to state 278
    '/'                          shift, and go to state 279
    '%'                          shift, and go to state 280
    "instanceof (T_INSTANCEOF)"  shift, and go to state 281
    "** (T_POW)"                 shift, and go to state 282

    $default  reduce using rule 311 (expr_without_variable)


state 450

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  309                      | expr '.' expr .
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '*'                          shift, and go to state 278
    '/'                          shift, and go to state 279
    '%'                          shift, and go to state 280
    "instanceof (T_INSTANCEOF)"  shift, and go to state 281
    "** (T_POW)"                 shift, and go to state 282

    $default  reduce using rule 309 (expr_without_variable)


state 451

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  312                      | expr '*' expr .
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 281
    "** (T_POW)"                 shift, and go to state 282

    $default  reduce using rule 312 (expr_without_variable)


state 452

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  314                      | expr '/' expr .
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 281
    "** (T_POW)"                 shift, and go to state 282

    $default  reduce using rule 314 (expr_without_variable)


state 453

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  315                      | expr '%' expr .
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 281
    "** (T_POW)"                 shift, and go to state 282

    $default  reduce using rule 315 (expr_without_variable)


state 454

  330 expr_without_variable: expr "instanceof (T_INSTANCEOF)" class_name_reference .

    $default  reduce using rule 330 (expr_without_variable)


state 455

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  313                      | expr "** (T_POW)" expr .
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "** (T_POW)"  shift, and go to state 282

    $default  reduce using rule 313 (expr_without_variable)


state 456

  277 expr_without_variable: variable '=' '&' . variable
  279                      | variable '=' '&' . "new (T_NEW)" class_name_reference $@46 ctor_arguments

    "new (T_NEW)"              shift, and go to state 605
    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    function_call                      go to state 101
    class_name                         go to state 153
    variable                           go to state 606
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 457

  276 expr_without_variable: variable '=' expr .
  298                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 276 (expr_without_variable)


state 458

  284 expr_without_variable: variable "**= (T_POW_EQUAL)" expr .
  298                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 284 (expr_without_variable)


state 459

  292 expr_without_variable: variable ">>= (T_SR_EQUAL)" expr .
  298                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 292 (expr_without_variable)


state 460

  291 expr_without_variable: variable "<<= (T_SL_EQUAL)" expr .
  298                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 291 (expr_without_variable)


state 461

  290 expr_without_variable: variable "^= (T_XOR_EQUAL)" expr .
  298                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 290 (expr_without_variable)


state 462

  289 expr_without_variable: variable "|= (T_OR_EQUAL)" expr .
  298                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 289 (expr_without_variable)


state 463

  288 expr_without_variable: variable "&= (T_AND_EQUAL)" expr .
  298                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 288 (expr_without_variable)


state 464

  287 expr_without_variable: variable "%= (T_MOD_EQUAL)" expr .
  298                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 287 (expr_without_variable)


state 465

  286 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" expr .
  298                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 286 (expr_without_variable)


state 466

  285 expr_without_variable: variable "/= (T_DIV_EQUAL)" expr .
  298                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 285 (expr_without_variable)


state 467

  283 expr_without_variable: variable "*= (T_MUL_EQUAL)" expr .
  298                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 283 (expr_without_variable)


state 468

  282 expr_without_variable: variable "-= (T_MINUS_EQUAL)" expr .
  298                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 282 (expr_without_variable)


state 469

  281 expr_without_variable: variable "+= (T_PLUS_EQUAL)" expr .
  298                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 281 (expr_without_variable)


state 470

  393 function_call: variable_without_objects $@65 function_call_parameter_list .

    $default  reduce using rule 393 (function_call)


state 471

  543 variable_name: "identifier (T_STRING)" .
  591 class_constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    '('       reduce using rule 543 (variable_name)
    $default  reduce using rule 591 (class_constant)


state 472

  391 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects . $@64 function_call_parameter_list
  519 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    '('       reduce using rule 390 ($@64)
    $default  reduce using rule 519 (static_member)

    $@64  go to state 607


state 473

  389 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name . $@63 function_call_parameter_list

    $default  reduce using rule 388 ($@63)

    $@63  go to state 608


state 474

  521 array_function_dereference: array_function_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 609


state 475

  503 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@68 . object_property $@69 method_or_not variable_properties

    "identifier (T_STRING)"  shift, and go to state 482
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 422
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 610
    reference_variable         go to state 424
    compound_variable          go to state 118
    object_property            go to state 611
    object_dim_list            go to state 612
    variable_name              go to state 613
    simple_indirect_reference  go to state 426


state 476

  530 reference_variable: reference_variable '[' dim_offset . ']'

    ']'  shift, and go to state 614


state 477

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  531 reference_variable: reference_variable '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    '}'                           shift, and go to state 615


state 478

  582 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr ')' .

    $default  reduce using rule 582 (internal_functions_in_yacc)


state 479

  363 yield_expr: "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" expr_without_variable .
  495 expr: expr_without_variable .

    ')'       reduce using rule 363 (yield_expr)
    ';'       reduce using rule 363 (yield_expr)
    $default  reduce using rule 495 (expr)


state 480

  276 expr_without_variable: variable . '=' expr
  277                      | variable . '=' '&' variable
  279                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  281                      | variable . "+= (T_PLUS_EQUAL)" expr
  282                      | variable . "-= (T_MINUS_EQUAL)" expr
  283                      | variable . "*= (T_MUL_EQUAL)" expr
  284                      | variable . "**= (T_POW_EQUAL)" expr
  285                      | variable . "/= (T_DIV_EQUAL)" expr
  286                      | variable . ".= (T_CONCAT_EQUAL)" expr
  287                      | variable . "%= (T_MOD_EQUAL)" expr
  288                      | variable . "&= (T_AND_EQUAL)" expr
  289                      | variable . "|= (T_OR_EQUAL)" expr
  290                      | variable . "^= (T_XOR_EQUAL)" expr
  291                      | variable . "<<= (T_SL_EQUAL)" expr
  292                      | variable . ">>= (T_SR_EQUAL)" expr
  364 yield_expr: "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" variable .
  498 r_variable: variable .
  500 rw_variable: variable .

    '='                    shift, and go to state 286
    "**= (T_POW_EQUAL)"    shift, and go to state 287
    ">>= (T_SR_EQUAL)"     shift, and go to state 288
    "<<= (T_SL_EQUAL)"     shift, and go to state 289
    "^= (T_XOR_EQUAL)"     shift, and go to state 290
    "|= (T_OR_EQUAL)"      shift, and go to state 291
    "&= (T_AND_EQUAL)"     shift, and go to state 292
    "%= (T_MOD_EQUAL)"     shift, and go to state 293
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 294
    "/= (T_DIV_EQUAL)"     shift, and go to state 295
    "*= (T_MUL_EQUAL)"     shift, and go to state 296
    "-= (T_MINUS_EQUAL)"   shift, and go to state 297
    "+= (T_PLUS_EQUAL)"    shift, and go to state 298

    "-- (T_DEC)"  reduce using rule 500 (rw_variable)
    "++ (T_INC)"  reduce using rule 500 (rw_variable)
    ')'           reduce using rule 364 (yield_expr)
    ';'           reduce using rule 364 (yield_expr)
    $default      reduce using rule 498 (r_variable)


state 481

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  381 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name . @59 function_call_parameter_list
  396 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 396 (class_name)
    $default                       reduce using rule 380 (@59)

    @59  go to state 562


state 482

  543 variable_name: "identifier (T_STRING)" .

    $default  reduce using rule 543 (variable_name)


state 483

  561 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    function_call                      go to state 101
    class_name                         go to state 153
    w_variable                         go to state 616
    variable                           go to state 316
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 484

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  557 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 557 (non_empty_array_pair_list)


state 485

  560 non_empty_array_pair_list: non_empty_array_pair_list ',' '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    function_call                      go to state 101
    class_name                         go to state 153
    w_variable                         go to state 617
    variable                           go to state 316
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 486

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  555 non_empty_array_pair_list: non_empty_array_pair_list ',' expr . "=> (T_DOUBLE_ARROW)" expr
  556                          | non_empty_array_pair_list ',' expr .
  559                          | non_empty_array_pair_list ',' expr . "=> (T_DOUBLE_ARROW)" '&' w_variable

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 618

    $default  reduce using rule 556 (non_empty_array_pair_list)


state 487

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  396 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    $default  reduce using rule 396 (class_name)


state 488

  518 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    $default  reduce using rule 518 (static_member)


state 489

  417 ctor_arguments: function_call_parameter_list .

    $default  reduce using rule 417 (ctor_arguments)


state 490

  273 new_expr: "new (T_NEW)" class_name_reference $@44 ctor_arguments .

    $default  reduce using rule 273 (new_expr)


state 491

  519 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    $default  reduce using rule 519 (static_member)


state 492

  405 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" $@66 . object_property $@67 dynamic_class_name_variable_properties

    "identifier (T_STRING)"  shift, and go to state 482
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 422
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 610
    reference_variable         go to state 424
    compound_variable          go to state 118
    object_property            go to state 619
    object_dim_list            go to state 612
    variable_name              go to state 613
    simple_indirect_reference  go to state 426


state 493

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 . inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 620


state 494

   52 unticked_statement: "if (T_IF)" parenthesis_expr $@5 statement . $@6 elseif_list else_single

    $default  reduce using rule 51 ($@6)

    $@6  go to state 621


state 495

  367 combined_scalar_offset: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '[' dim_offset ']' .

    $default  reduce using rule 367 (combined_scalar_offset)


state 496

  254 echo_expr_list: echo_expr_list ',' expr .
  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 254 (echo_expr_list)


state 497

   61 unticked_statement: "do (T_DO)" $@11 statement "while (T_WHILE)" . $@12 parenthesis_expr ';'

    $default  reduce using rule 60 ($@12)

    $@12  go to state 622


state 498

   58 unticked_statement: "while (T_WHILE)" $@9 parenthesis_expr @10 . while_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    ':'                                           shift, and go to state 623
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 624
    unticked_statement                 go to state 88
    while_statement                    go to state 625
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 106
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 499

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' . $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement

    $default  reduce using rule 62 ($@13)

    $@13  go to state 626


state 500

  259 non_empty_for_expr: non_empty_for_expr ',' . $@41 expr

    $default  reduce using rule 258 ($@41)

    $@41  go to state 627


state 501

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" . $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement

    $default  reduce using rule 85 ($@19)

    $@19  go to state 628


state 502

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" . $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement

    $default  reduce using rule 82 ($@17)

    $@17  go to state 629


state 503

  152 declare_list: "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 630


state 504

   89 unticked_statement: "declare (T_DECLARE)" $@21 '(' declare_list . ')' declare_statement
  153 declare_list: declare_list . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 631
    ')'  shift, and go to state 632


state 505

  156 switch_case_list: ':' . case_list "endswitch (T_ENDSWITCH)" ';'
  157                 | ':' . ';' case_list "endswitch (T_ENDSWITCH)" ';'

    ';'  shift, and go to state 633

    $default  reduce using rule 158 (case_list)

    case_list  go to state 634


state 506

  154 switch_case_list: '{' . case_list '}'
  155                 | '{' . ';' case_list '}'

    ';'  shift, and go to state 635

    $default  reduce using rule 158 (case_list)

    case_list  go to state 636


state 507

   67 unticked_statement: "switch (T_SWITCH)" parenthesis_expr $@16 switch_case_list .

    $default  reduce using rule 67 (unticked_statement)


state 508

  472 static_operation: '+' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 637
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 509

  473 static_operation: '-' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 638
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 510

  449 static_operation: '!' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 639
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 511

  450 static_operation: '~' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 640
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 512

  438 static_scalar_value: '[' . static_array_pair_list ']'

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    $default  reduce using rule 486 (static_array_pair_list)

    namespace_name                    go to state 520
    class_name                        go to state 521
    common_scalar                     go to state 522
    static_class_constant             go to state 523
    static_scalar_value               go to state 641
    static_operation                  go to state 526
    static_array_pair_list            go to state 642
    non_empty_static_array_pair_list  go to state 643
    static_class_name_scalar          go to state 527


state 513

  420 common_scalar: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .

    $default  reduce using rule 420 (common_scalar)


state 514

  437 static_scalar_value: "array (T_ARRAY)" . '(' static_array_pair_list ')'

    '('  shift, and go to state 644


state 515

  440 static_scalar_value: "__CLASS__ (T_CLASS_C)" .

    $default  reduce using rule 440 (static_scalar_value)


state 516

  428 common_scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  429              | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"

    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 645
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 223


state 517

  396 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  435 static_scalar_value: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 646


state 518

  397 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name
  436 static_scalar_value: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 124

    namespace_name  go to state 647


state 519

  474 static_operation: '(' . static_scalar_value ')'

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 648
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 520

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  395 class_name: namespace_name .
  434 static_scalar_value: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 395 (class_name)
    $default                       reduce using rule 434 (static_scalar_value)


state 521

  430 static_class_constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"
  592 static_class_name_scalar: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 649


state 522

  432 static_scalar_value: common_scalar .

    $default  reduce using rule 432 (static_scalar_value)


state 523

  439 static_scalar_value: static_class_constant .

    $default  reduce using rule 439 (static_scalar_value)


state 524

   39 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 39 (constant_declaration)


state 525

  431 static_scalar: static_scalar_value .
  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "or (T_LOGICAL_OR)"           shift, and go to state 650
    "xor (T_LOGICAL_XOR)"         shift, and go to state 651
    "and (T_LOGICAL_AND)"         shift, and go to state 652
    '?'                           shift, and go to state 653
    "|| (T_BOOLEAN_OR)"           shift, and go to state 654
    "&& (T_BOOLEAN_AND)"          shift, and go to state 655
    '|'                           shift, and go to state 656
    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    $default  reduce using rule 431 (static_scalar)


state 526

  441 static_scalar_value: static_operation .

    $default  reduce using rule 441 (static_scalar_value)


state 527

  433 static_scalar_value: static_class_name_scalar .

    $default  reduce using rule 433 (static_scalar_value)


state 528

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
   93 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list . '}' catch_statement $@23 finally_statement

    '}'  shift, and go to state 677

    $default  reduce using rule 40 ($@4)

    $@4  go to state 404


state 529

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   30 use_function_declaration: "\\ (T_NS_SEPARATOR)" namespace_name .
   31                         | "\\ (T_NS_SEPARATOR)" namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 678
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    $default  reduce using rule 30 (use_function_declaration)


state 530

   29 use_function_declaration: namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 679


state 531

   26 use_function_declarations: use_function_declarations ',' . use_function_declaration

    "identifier (T_STRING)"  shift, and go to state 124
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 352

    namespace_name            go to state 353
    use_function_declaration  go to state 680


state 532

   17 top_statement: "use (T_USE)" "function (T_FUNCTION)" use_function_declarations ';' .

    $default  reduce using rule 17 (top_statement)


state 533

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   36 use_const_declaration: "\\ (T_NS_SEPARATOR)" namespace_name .
   37                      | "\\ (T_NS_SEPARATOR)" namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 681
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    $default  reduce using rule 36 (use_const_declaration)


state 534

   35 use_const_declaration: namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 682


state 535

   32 use_const_declarations: use_const_declarations ',' . use_const_declaration

    "identifier (T_STRING)"  shift, and go to state 124
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 356

    namespace_name         go to state 357
    use_const_declaration  go to state 683


state 536

   18 top_statement: "use (T_USE)" "const (T_CONST)" use_const_declarations ';' .

    $default  reduce using rule 18 (top_statement)


state 537

   25 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 684


state 538

   23 use_declaration: namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 23 (use_declaration)


state 539

   20 use_declarations: use_declarations ',' use_declaration .

    $default  reduce using rule 20 (use_declarations)


state 540

  200 global_var: '$' '{' expr . '}'
  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    '}'                           shift, and go to state 685


state 541

  196 global_var_list: global_var_list ',' global_var .

    $default  reduce using rule 196 (global_var_list)


state 542

  204 static_var_list: "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 204 (static_var_list)


state 543

  201 static_var_list: static_var_list ',' "variable (T_VARIABLE)" .
  202                | static_var_list ',' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 686

    $default  reduce using rule 201 (static_var_list)


state 544

  360 expr_without_variable: "static (T_STATIC)" function is_reference @57 . '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '('  shift, and go to state 687


state 545

  113 unset_variables: unset_variables ',' . unset_variable

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    unset_variable                     go to state 688
    function_call                      go to state 101
    class_name                         go to state 153
    variable                           go to state 375
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 546

   81 unticked_statement: "unset (T_UNSET)" '(' unset_variables ')' . ';'

    ';'  shift, and go to state 689


state 547

  587 isset_variables: isset_variables ',' . $@76 isset_variable

    $default  reduce using rule 586 ($@76)

    $@76  go to state 690


state 548

  577 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')' .

    $default  reduce using rule 577 (internal_functions_in_yacc)


state 549

  579 internal_functions_in_yacc: "empty (T_EMPTY)" '(' expr_without_variable ')' .

    $default  reduce using rule 579 (internal_functions_in_yacc)


state 550

  578 internal_functions_in_yacc: "empty (T_EMPTY)" '(' variable ')' .

    $default  reduce using rule 578 (internal_functions_in_yacc)


state 551

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 10 (top_statement)


state 552

  551 assignment_list_element: "list (T_LIST)" . '(' $@74 assignment_list ')'

    '('  shift, and go to state 691


state 553

  549 assignment_list_element: variable .

    $default  reduce using rule 549 (assignment_list_element)


state 554

  275 expr_without_variable: "list (T_LIST)" '(' $@45 assignment_list . ')' '=' expr
  547 assignment_list: assignment_list . ',' assignment_list_element

    ','  shift, and go to state 692
    ')'  shift, and go to state 693


state 555

  548 assignment_list: assignment_list_element .

    $default  reduce using rule 548 (assignment_list)


state 556

  369 combined_scalar: "array (T_ARRAY)" '(' array_pair_list ')' .

    $default  reduce using rule 369 (combined_scalar)


state 557

  569 encaps_var: "variable (T_VARIABLE)" '[' $@75 . encaps_var_offset ']'

    "identifier (T_STRING)"  shift, and go to state 694
    "variable (T_VARIABLE)"  shift, and go to state 695
    "number (T_NUM_STRING)"  shift, and go to state 696

    encaps_var_offset  go to state 697


state 558

  570 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 570 (encaps_var)


state 559

  572 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' . expr ']' '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 698
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 560

  571 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}' .

    $default  reduce using rule 571 (encaps_var)


state 561

  573 encaps_var: "{$ (T_CURLY_OPEN)" variable '}' .

    $default  reduce using rule 573 (encaps_var)


state 562

  381 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name @59 . function_call_parameter_list

    '('  shift, and go to state 409

    function_call_parameter_list  go to state 699


state 563

    3 top_statement_list: top_statement_list . $@1 top_statement
   15 top_statement: "namespace (T_NAMESPACE)" '{' $@3 top_statement_list . '}'

    '}'  shift, and go to state 700

    $default  reduce using rule 2 ($@1)

    $@1  go to state 4


state 564

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' $@2 . top_statement_list '}'

    $default  reduce using rule 4 (top_statement_list)

    top_statement_list  go to state 701


state 565

  383 function_call: "\\ (T_NS_SEPARATOR)" namespace_name @60 function_call_parameter_list .

    $default  reduce using rule 383 (function_call)


state 566

  334 expr_without_variable: '(' new_expr ')' @51 . instance_call

    '['                       reduce using rule 270 ($@43)
    "-> (T_OBJECT_OPERATOR)"  reduce using rule 270 ($@43)
    $default                  reduce using rule 269 (instance_call)

    instance_call  go to state 702
    $@43           go to state 703


state 567

   46 inner_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 704


state 568

   41 inner_statement_list: inner_statement_list $@4 inner_statement .

    $default  reduce using rule 41 (inner_statement_list)


state 569

   43 inner_statement: statement .

    $default  reduce using rule 43 (inner_statement)


state 570

   44 inner_statement: function_declaration_statement .

    $default  reduce using rule 44 (inner_statement)


state 571

   45 inner_statement: class_declaration_statement .

    $default  reduce using rule 45 (inner_statement)


state 572

  534 compound_variable: '$' '{' expr '}' .

    $default  reduce using rule 534 (compound_variable)


state 573

  194 function_call_parameter: '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    function_call                      go to state 101
    class_name                         go to state 153
    w_variable                         go to state 705
    variable                           go to state 316
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 574

  195 function_call_parameter: "... (T_ELLIPSIS)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 706
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 575

  187 function_call_parameter_list: '(' ')' .

    $default  reduce using rule 187 (function_call_parameter_list)


state 576

  188 function_call_parameter_list: '(' non_empty_function_call_parameter_list . ')'
  191 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list . ',' function_call_parameter

    ','  shift, and go to state 707
    ')'  shift, and go to state 708


state 577

  190 non_empty_function_call_parameter_list: function_call_parameter .

    $default  reduce using rule 190 (non_empty_function_call_parameter_list)


state 578

  192 function_call_parameter: expr_without_variable .
  495 expr: expr_without_variable .

    ','       reduce using rule 192 (function_call_parameter)
    ')'       reduce using rule 192 (function_call_parameter)
    $default  reduce using rule 495 (expr)


state 579

  189 function_call_parameter_list: '(' yield_expr . ')'

    ')'  shift, and go to state 709


state 580

  193 function_call_parameter: variable .
  276 expr_without_variable: variable . '=' expr
  277                      | variable . '=' '&' variable
  279                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  281                      | variable . "+= (T_PLUS_EQUAL)" expr
  282                      | variable . "-= (T_MINUS_EQUAL)" expr
  283                      | variable . "*= (T_MUL_EQUAL)" expr
  284                      | variable . "**= (T_POW_EQUAL)" expr
  285                      | variable . "/= (T_DIV_EQUAL)" expr
  286                      | variable . ".= (T_CONCAT_EQUAL)" expr
  287                      | variable . "%= (T_MOD_EQUAL)" expr
  288                      | variable . "&= (T_AND_EQUAL)" expr
  289                      | variable . "|= (T_OR_EQUAL)" expr
  290                      | variable . "^= (T_XOR_EQUAL)" expr
  291                      | variable . "<<= (T_SL_EQUAL)" expr
  292                      | variable . ">>= (T_SR_EQUAL)" expr
  498 r_variable: variable .
  500 rw_variable: variable .

    '='                    shift, and go to state 286
    "**= (T_POW_EQUAL)"    shift, and go to state 287
    ">>= (T_SR_EQUAL)"     shift, and go to state 288
    "<<= (T_SL_EQUAL)"     shift, and go to state 289
    "^= (T_XOR_EQUAL)"     shift, and go to state 290
    "|= (T_OR_EQUAL)"      shift, and go to state 291
    "&= (T_AND_EQUAL)"     shift, and go to state 292
    "%= (T_MOD_EQUAL)"     shift, and go to state 293
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 294
    "/= (T_DIV_EQUAL)"     shift, and go to state 295
    "*= (T_MUL_EQUAL)"     shift, and go to state 296
    "-= (T_MINUS_EQUAL)"   shift, and go to state 297
    "+= (T_PLUS_EQUAL)"    shift, and go to state 298

    ','           reduce using rule 193 (function_call_parameter)
    "-- (T_DEC)"  reduce using rule 500 (rw_variable)
    "++ (T_INC)"  reduce using rule 500 (rw_variable)
    ')'           reduce using rule 193 (function_call_parameter)
    $default      reduce using rule 498 (r_variable)


state 581

   38 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar             go to state 710
    static_scalar_value       go to state 525
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 582

  399 fully_qualified_class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 711


state 583

  400 fully_qualified_class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 124

    namespace_name  go to state 712


state 584

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  398 fully_qualified_class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    $default  reduce using rule 398 (fully_qualified_class_name)


state 585

  132 extends_from: "extends (T_EXTENDS)" fully_qualified_class_name .

    $default  reduce using rule 132 (extends_from)


state 586

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@32 . implements_list '{' class_statement_list '}'

    "implements (T_IMPLEMENTS)"  shift, and go to state 713

    $default  reduce using rule 136 (implements_list)

    implements_list  go to state 714


state 587

  135 interface_extends_list: "extends (T_EXTENDS)" . interface_list

    "identifier (T_STRING)"    shift, and go to state 124
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    namespace_name              go to state 584
    interface_list              go to state 715
    fully_qualified_class_name  go to state 716


state 588

  126 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@33 interface_extends_list . '{' class_statement_list '}'

    '{'  shift, and go to state 717


state 589

  366 combined_scalar_offset: combined_scalar_offset '[' dim_offset ']' .

    $default  reduce using rule 366 (combined_scalar_offset)


state 590

  365 combined_scalar_offset: combined_scalar '[' dim_offset ']' .

    $default  reduce using rule 365 (combined_scalar_offset)


state 591

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 . '(' parameter_list ')' '{' inner_statement_list '}'

    '('  shift, and go to state 718


state 592

  358 expr_without_variable: function is_reference @56 '(' . parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 124
    "array (T_ARRAY)"          shift, and go to state 719
    "callable (T_CALLABLE)"    shift, and go to state 720
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    ')'       reduce using rule 178 (parameter_list)
    $default  reduce using rule 183 (optional_class_type)

    namespace_name              go to state 584
    parameter_list              go to state 721
    non_empty_parameter_list    go to state 722
    parameter                   go to state 723
    optional_class_type         go to state 724
    fully_qualified_class_name  go to state 725


state 593

  523 array_function_dereference: function_call $@72 '[' dim_offset . ']'

    ']'  shift, and go to state 726


state 594

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  544 variable_name: '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    '}'                           shift, and go to state 727


state 595

  387 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@62 . function_call_parameter_list

    '('  shift, and go to state 409

    function_call_parameter_list  go to state 728


state 596

  385 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name @61 . function_call_parameter_list

    '('  shift, and go to state 409

    function_call_parameter_list  go to state 729


state 597

  517 variable_without_objects: simple_indirect_reference reference_variable .
  530 reference_variable: reference_variable . '[' dim_offset ']'
  531                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 303
    '{'  shift, and go to state 304

    $default  reduce using rule 517 (variable_without_objects)


state 598

  368 combined_scalar_offset: general_constant '[' dim_offset ']' .

    $default  reduce using rule 368 (combined_scalar_offset)


state 599

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  302                      | expr "or (T_LOGICAL_OR)" $@49 expr .
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 302 (expr_without_variable)


state 600

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  304                      | expr "and (T_LOGICAL_AND)" $@50 expr .
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 304 (expr_without_variable)


state 601

  339 expr_without_variable: expr '?' ':' $@54 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 730
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 602

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  337                      | expr '?' $@52 expr . ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    ':'                           shift, and go to state 731
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282


state 603

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  298                      | expr "|| (T_BOOLEAN_OR)" $@47 expr .
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 298 (expr_without_variable)


state 604

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  300                      | expr "&& (T_BOOLEAN_AND)" $@48 expr .
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 300 (expr_without_variable)


state 605

  279 expr_without_variable: variable '=' '&' "new (T_NEW)" . class_name_reference $@46 ctor_arguments

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 163
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 164
    '$'                        shift, and go to state 81

    namespace_name                go to state 165
    class_name                    go to state 166
    class_name_reference          go to state 732
    dynamic_class_name_reference  go to state 168
    static_member                 go to state 112
    variable_class_name           go to state 169
    base_variable                 go to state 170
    reference_variable            go to state 171
    compound_variable             go to state 118
    simple_indirect_reference     go to state 172


state 606

  277 expr_without_variable: variable '=' '&' variable .

    $default  reduce using rule 277 (expr_without_variable)


state 607

  391 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@64 . function_call_parameter_list

    '('  shift, and go to state 409

    function_call_parameter_list  go to state 733


state 608

  389 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name $@63 . function_call_parameter_list

    '('  shift, and go to state 409

    function_call_parameter_list  go to state 734


state 609

  521 array_function_dereference: array_function_dereference '[' dim_offset ']' .

    $default  reduce using rule 521 (array_function_dereference)


state 610

  539 object_property: variable_without_objects . $@73

    $default  reduce using rule 538 ($@73)

    $@73  go to state 735


state 611

  503 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@68 object_property . $@69 method_or_not variable_properties

    $default  reduce using rule 502 ($@69)

    $@69  go to state 736


state 612

  537 object_property: object_dim_list .
  540 object_dim_list: object_dim_list . '[' dim_offset ']'
  541                | object_dim_list . '{' expr '}'

    '['  shift, and go to state 737
    '{'  shift, and go to state 738

    $default  reduce using rule 537 (object_property)


state 613

  542 object_dim_list: variable_name .

    $default  reduce using rule 542 (object_dim_list)


state 614

  530 reference_variable: reference_variable '[' dim_offset ']' .

    $default  reduce using rule 530 (reference_variable)


state 615

  531 reference_variable: reference_variable '{' expr '}' .

    $default  reduce using rule 531 (reference_variable)


state 616

  561 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" '&' w_variable .

    $default  reduce using rule 561 (non_empty_array_pair_list)


state 617

  560 non_empty_array_pair_list: non_empty_array_pair_list ',' '&' w_variable .

    $default  reduce using rule 560 (non_empty_array_pair_list)


state 618

  555 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" . expr
  559                          | non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '&'                                           shift, and go to state 739
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 740
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 619

  405 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" $@66 object_property . $@67 dynamic_class_name_variable_properties

    $default  reduce using rule 404 ($@67)

    $@67  go to state 741


state 620

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list . $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    "elseif (T_ELSEIF)"  reduce using rule 54 ($@8)
    "else (T_ELSE)"      reduce using rule 54 ($@8)
    "endif (T_ENDIF)"    reduce using rule 54 ($@8)
    $default             reduce using rule 40 ($@4)

    $@4  go to state 404
    $@8  go to state 742


state 621

   52 unticked_statement: "if (T_IF)" parenthesis_expr $@5 statement $@6 . elseif_list else_single

    $default  reduce using rule 167 (elseif_list)

    elseif_list  go to state 743


state 622

   61 unticked_statement: "do (T_DO)" $@11 statement "while (T_WHILE)" $@12 . parenthesis_expr ';'

    '('  shift, and go to state 176

    parenthesis_expr  go to state 744


state 623

  166 while_statement: ':' . inner_statement_list "endwhile (T_ENDWHILE)" ';'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 745


state 624

  165 while_statement: statement .

    $default  reduce using rule 165 (while_statement)


state 625

   58 unticked_statement: "while (T_WHILE)" $@9 parenthesis_expr @10 while_statement .

    $default  reduce using rule 58 (unticked_statement)


state 626

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 . for_expr ';' $@14 for_expr ')' $@15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 256 (for_expr)

    namespace_name                     go to state 84
    for_expr                           go to state 746
    non_empty_for_expr                 go to state 338
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 339
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 627

  259 non_empty_for_expr: non_empty_for_expr ',' $@41 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 747
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 628

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 . foreach_variable foreach_optional_arg ')' $@20 foreach_statement

    '&'                        shift, and go to state 748
    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "list (T_LIST)"            shift, and go to state 749
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    foreach_variable                   go to state 750
    function_call                      go to state 101
    class_name                         go to state 153
    variable                           go to state 751
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 629

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 . foreach_variable foreach_optional_arg ')' $@18 foreach_statement

    '&'                        shift, and go to state 748
    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "list (T_LIST)"            shift, and go to state 749
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    foreach_variable                   go to state 752
    function_call                      go to state 101
    class_name                         go to state 153
    variable                           go to state 751
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 630

  152 declare_list: "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar             go to state 753
    static_scalar_value       go to state 525
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 631

  153 declare_list: declare_list ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 754


state 632

   89 unticked_statement: "declare (T_DECLARE)" $@21 '(' declare_list ')' . declare_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    ':'                                           shift, and go to state 755
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 756
    unticked_statement                 go to state 88
    declare_statement                  go to state 757
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 106
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 633

  157 switch_case_list: ':' ';' . case_list "endswitch (T_ENDSWITCH)" ';'

    $default  reduce using rule 158 (case_list)

    case_list  go to state 758


state 634

  156 switch_case_list: ':' case_list . "endswitch (T_ENDSWITCH)" ';'
  160 case_list: case_list . "case (T_CASE)" expr case_separator $@35 inner_statement_list
  162          | case_list . "default (T_DEFAULT)" case_separator $@36 inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 759
    "case (T_CASE)"            shift, and go to state 760
    "default (T_DEFAULT)"      shift, and go to state 761


state 635

  155 switch_case_list: '{' ';' . case_list '}'

    $default  reduce using rule 158 (case_list)

    case_list  go to state 762


state 636

  154 switch_case_list: '{' case_list . '}'
  160 case_list: case_list . "case (T_CASE)" expr case_separator $@35 inner_statement_list
  162          | case_list . "default (T_DEFAULT)" case_separator $@36 inner_statement_list

    "case (T_CASE)"        shift, and go to state 760
    "default (T_DEFAULT)"  shift, and go to state 761
    '}'                    shift, and go to state 763


state 637

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  472                 | '+' static_scalar_value .

    '*'           shift, and go to state 672
    '/'           shift, and go to state 673
    '%'           shift, and go to state 674
    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    $default  reduce using rule 472 (static_operation)


state 638

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  473                 | '-' static_scalar_value .

    '*'           shift, and go to state 672
    '/'           shift, and go to state 673
    '%'           shift, and go to state 674
    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    $default  reduce using rule 473 (static_operation)


state 639

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  449                 | '!' static_scalar_value .
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    $default  reduce using rule 449 (static_operation)


state 640

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  450                 | '~' static_scalar_value .
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    $default  reduce using rule 450 (static_operation)


state 641

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  492 non_empty_static_array_pair_list: static_scalar_value . "=> (T_DOUBLE_ARROW)" static_scalar_value
  493                                 | static_scalar_value .

    "or (T_LOGICAL_OR)"           shift, and go to state 650
    "xor (T_LOGICAL_XOR)"         shift, and go to state 651
    "and (T_LOGICAL_AND)"         shift, and go to state 652
    '?'                           shift, and go to state 653
    "|| (T_BOOLEAN_OR)"           shift, and go to state 654
    "&& (T_BOOLEAN_AND)"          shift, and go to state 655
    '|'                           shift, and go to state 656
    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 764

    $default  reduce using rule 493 (non_empty_static_array_pair_list)


state 642

  438 static_scalar_value: '[' static_array_pair_list . ']'

    ']'  shift, and go to state 765


state 643

  487 static_array_pair_list: non_empty_static_array_pair_list . possible_comma
  490 non_empty_static_array_pair_list: non_empty_static_array_pair_list . ',' static_scalar_value "=> (T_DOUBLE_ARROW)" static_scalar_value
  491                                 | non_empty_static_array_pair_list . ',' static_scalar_value

    ','  shift, and go to state 766

    $default  reduce using rule 488 (possible_comma)

    possible_comma  go to state 767


state 644

  437 static_scalar_value: "array (T_ARRAY)" '(' . static_array_pair_list ')'

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    $default  reduce using rule 486 (static_array_pair_list)

    namespace_name                    go to state 520
    class_name                        go to state 521
    common_scalar                     go to state 522
    static_class_constant             go to state 523
    static_scalar_value               go to state 641
    static_operation                  go to state 526
    static_array_pair_list            go to state 768
    non_empty_static_array_pair_list  go to state 643
    static_class_name_scalar          go to state 527


state 645

  428 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"

    "heredoc end (T_END_HEREDOC)"  shift, and go to state 387


state 646

  396 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name
  435 static_scalar_value: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 124

    namespace_name  go to state 769


state 647

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  397 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .
  436 static_scalar_value: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 397 (class_name)
    $default                       reduce using rule 436 (static_scalar_value)


state 648

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  474                 | '(' static_scalar_value . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 650
    "xor (T_LOGICAL_XOR)"         shift, and go to state 651
    "and (T_LOGICAL_AND)"         shift, and go to state 652
    '?'                           shift, and go to state 653
    "|| (T_BOOLEAN_OR)"           shift, and go to state 654
    "&& (T_BOOLEAN_AND)"          shift, and go to state 655
    '|'                           shift, and go to state 656
    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676
    ')'                           shift, and go to state 770


state 649

  430 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"
  592 static_class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "class (T_CLASS)"

    "identifier (T_STRING)"  shift, and go to state 771
    "class (T_CLASS)"        shift, and go to state 772


state 650

  459 static_operation: static_scalar_value "or (T_LOGICAL_OR)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 773
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 651

  457 static_operation: static_scalar_value "xor (T_LOGICAL_XOR)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 774
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 652

  458 static_operation: static_scalar_value "and (T_LOGICAL_AND)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 775
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 653

  470 static_operation: static_scalar_value '?' . ':' static_scalar_value
  471                 | static_scalar_value '?' . static_scalar_value ':' static_scalar_value

    ':'                                           shift, and go to state 776
    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 777
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 654

  461 static_operation: static_scalar_value "|| (T_BOOLEAN_OR)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 778
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 655

  460 static_operation: static_scalar_value "&& (T_BOOLEAN_AND)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 779
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 656

  451 static_operation: static_scalar_value '|' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 780
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 657

  453 static_operation: static_scalar_value '^' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 781
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 658

  452 static_operation: static_scalar_value '&' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 782
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 659

  463 static_operation: static_scalar_value "!== (T_IS_NOT_IDENTICAL)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 783
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 660

  462 static_operation: static_scalar_value "=== (T_IS_IDENTICAL)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 784
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 661

  465 static_operation: static_scalar_value "!= (T_IS_NOT_EQUAL)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 785
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 662

  464 static_operation: static_scalar_value "== (T_IS_EQUAL)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 786
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 663

  466 static_operation: static_scalar_value '<' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 787
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 664

  467 static_operation: static_scalar_value '>' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 788
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 665

  469 static_operation: static_scalar_value ">= (T_IS_GREATER_OR_EQUAL)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 789
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 666

  468 static_operation: static_scalar_value "<= (T_IS_SMALLER_OR_EQUAL)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 790
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 667

  455 static_operation: static_scalar_value ">> (T_SR)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 791
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 668

  454 static_operation: static_scalar_value "<< (T_SL)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 792
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 669

  443 static_operation: static_scalar_value '+' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 793
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 670

  444 static_operation: static_scalar_value '-' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 794
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 671

  456 static_operation: static_scalar_value '.' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 795
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 672

  445 static_operation: static_scalar_value '*' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 796
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 673

  447 static_operation: static_scalar_value '/' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 797
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 674

  448 static_operation: static_scalar_value '%' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 798
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 675

  446 static_operation: static_scalar_value "** (T_POW)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 799
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 676

  442 static_operation: static_scalar_value '[' . static_scalar_value ']'

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 800
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 677

   93 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list '}' . catch_statement $@23 finally_statement

    "catch (T_CATCH)"  shift, and go to state 801

    $default  reduce using rule 96 (catch_statement)

    catch_statement  go to state 802


state 678

   31 use_function_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 803


state 679

   29 use_function_declaration: namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 29 (use_function_declaration)


state 680

   26 use_function_declarations: use_function_declarations ',' use_function_declaration .

    $default  reduce using rule 26 (use_function_declarations)


state 681

   37 use_const_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 804


state 682

   35 use_const_declaration: namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 35 (use_const_declaration)


state 683

   32 use_const_declarations: use_const_declarations ',' use_const_declaration .

    $default  reduce using rule 32 (use_const_declarations)


state 684

   25 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 25 (use_declaration)


state 685

  200 global_var: '$' '{' expr '}' .

    $default  reduce using rule 200 (global_var)


state 686

  202 static_var_list: static_var_list ',' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar             go to state 805
    static_scalar_value       go to state 525
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 687

  360 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' . parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 124
    "array (T_ARRAY)"          shift, and go to state 719
    "callable (T_CALLABLE)"    shift, and go to state 720
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    ')'       reduce using rule 178 (parameter_list)
    $default  reduce using rule 183 (optional_class_type)

    namespace_name              go to state 584
    parameter_list              go to state 806
    non_empty_parameter_list    go to state 722
    parameter                   go to state 723
    optional_class_type         go to state 724
    fully_qualified_class_name  go to state 725


state 688

  113 unset_variables: unset_variables ',' unset_variable .

    $default  reduce using rule 113 (unset_variables)


state 689

   81 unticked_statement: "unset (T_UNSET)" '(' unset_variables ')' ';' .

    $default  reduce using rule 81 (unticked_statement)


state 690

  587 isset_variables: isset_variables ',' $@76 . isset_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 376
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 196
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 377
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    isset_variable                     go to state 807
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 691

  551 assignment_list_element: "list (T_LIST)" '(' . $@74 assignment_list ')'

    $default  reduce using rule 550 ($@74)

    $@74  go to state 808


state 692

  547 assignment_list: assignment_list ',' . assignment_list_element

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "list (T_LIST)"            shift, and go to state 552
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    $default  reduce using rule 552 (assignment_list_element)

    namespace_name                     go to state 152
    function_call                      go to state 101
    class_name                         go to state 153
    variable                           go to state 553
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    assignment_list_element            go to state 809


state 693

  275 expr_without_variable: "list (T_LIST)" '(' $@45 assignment_list ')' . '=' expr

    '='  shift, and go to state 810


state 694

  574 encaps_var_offset: "identifier (T_STRING)" .

    $default  reduce using rule 574 (encaps_var_offset)


state 695

  576 encaps_var_offset: "variable (T_VARIABLE)" .

    $default  reduce using rule 576 (encaps_var_offset)


state 696

  575 encaps_var_offset: "number (T_NUM_STRING)" .

    $default  reduce using rule 575 (encaps_var_offset)


state 697

  569 encaps_var: "variable (T_VARIABLE)" '[' $@75 encaps_var_offset . ']'

    ']'  shift, and go to state 811


state 698

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  572 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr . ']' '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    ']'                           shift, and go to state 812


state 699

  381 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name @59 function_call_parameter_list .

    $default  reduce using rule 381 (function_call)


state 700

   15 top_statement: "namespace (T_NAMESPACE)" '{' $@3 top_statement_list '}' .

    $default  reduce using rule 15 (top_statement)


state 701

    3 top_statement_list: top_statement_list . $@1 top_statement
   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' $@2 top_statement_list . '}'

    '}'  shift, and go to state 813

    $default  reduce using rule 2 ($@1)

    $@1  go to state 4


state 702

  334 expr_without_variable: '(' new_expr ')' @51 instance_call .

    $default  reduce using rule 334 (expr_without_variable)


state 703

  271 instance_call: $@43 . chaining_instance_call

    '['                       shift, and go to state 814
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 815

    chaining_method_or_property  go to state 816
    chaining_dereference         go to state 817
    chaining_instance_call       go to state 818
    variable_property            go to state 819


state 704

   46 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 820


state 705

  194 function_call_parameter: '&' w_variable .

    $default  reduce using rule 194 (function_call_parameter)


state 706

  195 function_call_parameter: "... (T_ELLIPSIS)" expr .
  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 195 (function_call_parameter)


state 707

  191 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' . function_call_parameter

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '&'                                           shift, and go to state 573
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    "... (T_ELLIPSIS)"                            shift, and go to state 574
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    function_call_parameter            go to state 821
    new_expr                           go to state 95
    expr_without_variable              go to state 578
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 196
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 580
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 708

  188 function_call_parameter_list: '(' non_empty_function_call_parameter_list ')' .

    $default  reduce using rule 188 (function_call_parameter_list)


state 709

  189 function_call_parameter_list: '(' yield_expr ')' .

    $default  reduce using rule 189 (function_call_parameter_list)


state 710

   38 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 38 (constant_declaration)


state 711

  399 fully_qualified_class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 124

    namespace_name  go to state 822


state 712

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  400 fully_qualified_class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    $default  reduce using rule 400 (fully_qualified_class_name)


state 713

  137 implements_list: "implements (T_IMPLEMENTS)" . interface_list

    "identifier (T_STRING)"    shift, and go to state 124
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    namespace_name              go to state 584
    interface_list              go to state 823
    fully_qualified_class_name  go to state 716


state 714

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@32 implements_list . '{' class_statement_list '}'

    '{'  shift, and go to state 824


state 715

  135 interface_extends_list: "extends (T_EXTENDS)" interface_list .
  139 interface_list: interface_list . ',' fully_qualified_class_name

    ','  shift, and go to state 825

    $default  reduce using rule 135 (interface_extends_list)


state 716

  138 interface_list: fully_qualified_class_name .

    $default  reduce using rule 138 (interface_list)


state 717

  126 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@33 interface_extends_list '{' . class_statement_list '}'

    $default  reduce using rule 206 (class_statement_list)

    class_statement_list  go to state 826


state 718

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 '(' . parameter_list ')' '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 124
    "array (T_ARRAY)"          shift, and go to state 719
    "callable (T_CALLABLE)"    shift, and go to state 720
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    ')'       reduce using rule 178 (parameter_list)
    $default  reduce using rule 183 (optional_class_type)

    namespace_name              go to state 584
    parameter_list              go to state 827
    non_empty_parameter_list    go to state 722
    parameter                   go to state 723
    optional_class_type         go to state 724
    fully_qualified_class_name  go to state 725


state 719

  184 optional_class_type: "array (T_ARRAY)" .

    $default  reduce using rule 184 (optional_class_type)


state 720

  185 optional_class_type: "callable (T_CALLABLE)" .

    $default  reduce using rule 185 (optional_class_type)


state 721

  358 expr_without_variable: function is_reference @56 '(' parameter_list . ')' lexical_vars '{' inner_statement_list '}'

    ')'  shift, and go to state 828


state 722

  177 parameter_list: non_empty_parameter_list .
  180 non_empty_parameter_list: non_empty_parameter_list . ',' parameter

    ','  shift, and go to state 829

    $default  reduce using rule 177 (parameter_list)


state 723

  179 non_empty_parameter_list: parameter .

    $default  reduce using rule 179 (non_empty_parameter_list)


state 724

  181 parameter: optional_class_type . is_reference is_variadic "variable (T_VARIABLE)"
  182          | optional_class_type . is_reference is_variadic "variable (T_VARIABLE)" '=' static_scalar

    '&'  shift, and go to state 251

    $default  reduce using rule 117 (is_reference)

    is_reference  go to state 830


state 725

  186 optional_class_type: fully_qualified_class_name .

    $default  reduce using rule 186 (optional_class_type)


state 726

  523 array_function_dereference: function_call $@72 '[' dim_offset ']' .

    $default  reduce using rule 523 (array_function_dereference)


state 727

  544 variable_name: '{' expr '}' .

    $default  reduce using rule 544 (variable_name)


state 728

  387 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@62 function_call_parameter_list .

    $default  reduce using rule 387 (function_call)


state 729

  385 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name @61 function_call_parameter_list .

    $default  reduce using rule 385 (function_call)


state 730

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  339                      | expr '?' ':' $@54 expr .

    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 339 (expr_without_variable)


state 731

  337 expr_without_variable: expr '?' $@52 expr ':' . $@53 expr

    $default  reduce using rule 336 ($@53)

    $@53  go to state 831


state 732

  279 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference . $@46 ctor_arguments

    $default  reduce using rule 278 ($@46)

    $@46  go to state 832


state 733

  391 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@64 function_call_parameter_list .

    $default  reduce using rule 391 (function_call)


state 734

  389 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name $@63 function_call_parameter_list .

    $default  reduce using rule 389 (function_call)


state 735

  539 object_property: variable_without_objects $@73 .

    $default  reduce using rule 539 (object_property)


state 736

  503 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@68 object_property $@69 . method_or_not variable_properties

    '('       reduce using rule 511 (@71)
    $default  reduce using rule 515 (method_or_not)

    array_method_dereference  go to state 833
    method                    go to state 834
    @71                       go to state 835
    method_or_not             go to state 836


state 737

  540 object_dim_list: object_dim_list '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 535 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 331
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    dim_offset                         go to state 837
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 738

  541 object_dim_list: object_dim_list '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 838
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 739

  559 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    function_call                      go to state 101
    class_name                         go to state 153
    w_variable                         go to state 839
    variable                           go to state 316
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 740

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  555 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 555 (non_empty_array_pair_list)


state 741

  405 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" $@66 object_property $@67 . dynamic_class_name_variable_properties

    $default  reduce using rule 408 (dynamic_class_name_variable_properties)

    dynamic_class_name_variable_properties  go to state 840


state 742

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 . new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 170 (new_elseif_list)

    new_elseif_list  go to state 841


state 743

   52 unticked_statement: "if (T_IF)" parenthesis_expr $@5 statement $@6 elseif_list . else_single
  169 elseif_list: elseif_list . "elseif (T_ELSEIF)" parenthesis_expr $@37 statement

    "elseif (T_ELSEIF)"  shift, and go to state 842
    "else (T_ELSE)"      shift, and go to state 843

    "elseif (T_ELSEIF)"  [reduce using rule 173 (else_single)]
    "else (T_ELSE)"      [reduce using rule 173 (else_single)]
    $default             reduce using rule 173 (else_single)

    else_single  go to state 844


state 744

   61 unticked_statement: "do (T_DO)" $@11 statement "while (T_WHILE)" $@12 parenthesis_expr . ';'

    ';'  shift, and go to state 845


state 745

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  166 while_statement: ':' inner_statement_list . "endwhile (T_ENDWHILE)" ';'

    "endwhile (T_ENDWHILE)"  shift, and go to state 846

    $default  reduce using rule 40 ($@4)

    $@4  go to state 404


state 746

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr . ';' $@14 for_expr ')' $@15 for_statement

    ';'  shift, and go to state 847


state 747

  259 non_empty_for_expr: non_empty_for_expr ',' $@41 expr .
  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 259 (non_empty_for_expr)


state 748

  143 foreach_variable: '&' . variable

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    function_call                      go to state 101
    class_name                         go to state 153
    variable                           go to state 848
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 749

  145 foreach_variable: "list (T_LIST)" . '(' $@34 assignment_list ')'

    '('  shift, and go to state 849


state 750

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable . foreach_optional_arg ')' $@20 foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 850

    $default  reduce using rule 140 (foreach_optional_arg)

    foreach_optional_arg  go to state 851


state 751

  142 foreach_variable: variable .

    $default  reduce using rule 142 (foreach_variable)


state 752

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable . foreach_optional_arg ')' $@18 foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 850

    $default  reduce using rule 140 (foreach_optional_arg)

    foreach_optional_arg  go to state 852


state 753

  152 declare_list: "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 152 (declare_list)


state 754

  153 declare_list: declare_list ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 853


state 755

  151 declare_statement: ':' . inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 854


state 756

  150 declare_statement: statement .

    $default  reduce using rule 150 (declare_statement)


state 757

   89 unticked_statement: "declare (T_DECLARE)" $@21 '(' declare_list ')' declare_statement .

    $default  reduce using rule 89 (unticked_statement)


state 758

  157 switch_case_list: ':' ';' case_list . "endswitch (T_ENDSWITCH)" ';'
  160 case_list: case_list . "case (T_CASE)" expr case_separator $@35 inner_statement_list
  162          | case_list . "default (T_DEFAULT)" case_separator $@36 inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 855
    "case (T_CASE)"            shift, and go to state 760
    "default (T_DEFAULT)"      shift, and go to state 761


state 759

  156 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 856


state 760

  160 case_list: case_list "case (T_CASE)" . expr case_separator $@35 inner_statement_list

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 857
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 761

  162 case_list: case_list "default (T_DEFAULT)" . case_separator $@36 inner_statement_list

    ':'  shift, and go to state 858
    ';'  shift, and go to state 859

    case_separator  go to state 860


state 762

  155 switch_case_list: '{' ';' case_list . '}'
  160 case_list: case_list . "case (T_CASE)" expr case_separator $@35 inner_statement_list
  162          | case_list . "default (T_DEFAULT)" case_separator $@36 inner_statement_list

    "case (T_CASE)"        shift, and go to state 760
    "default (T_DEFAULT)"  shift, and go to state 761
    '}'                    shift, and go to state 861


state 763

  154 switch_case_list: '{' case_list '}' .

    $default  reduce using rule 154 (switch_case_list)


state 764

  492 non_empty_static_array_pair_list: static_scalar_value "=> (T_DOUBLE_ARROW)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 862
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 765

  438 static_scalar_value: '[' static_array_pair_list ']' .

    $default  reduce using rule 438 (static_scalar_value)


state 766

  489 possible_comma: ',' .
  490 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' . static_scalar_value "=> (T_DOUBLE_ARROW)" static_scalar_value
  491                                 | non_empty_static_array_pair_list ',' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    $default  reduce using rule 489 (possible_comma)

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 863
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 767

  487 static_array_pair_list: non_empty_static_array_pair_list possible_comma .

    $default  reduce using rule 487 (static_array_pair_list)


state 768

  437 static_scalar_value: "array (T_ARRAY)" '(' static_array_pair_list . ')'

    ')'  shift, and go to state 864


state 769

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  396 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .
  435 static_scalar_value: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 396 (class_name)
    $default                       reduce using rule 435 (static_scalar_value)


state 770

  474 static_operation: '(' static_scalar_value ')' .

    $default  reduce using rule 474 (static_operation)


state 771

  430 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    $default  reduce using rule 430 (static_class_constant)


state 772

  592 static_class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)" .

    $default  reduce using rule 592 (static_class_name_scalar)


state 773

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value "or (T_LOGICAL_OR)" static_scalar_value .
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "xor (T_LOGICAL_XOR)"         shift, and go to state 651
    "and (T_LOGICAL_AND)"         shift, and go to state 652
    '?'                           shift, and go to state 653
    "|| (T_BOOLEAN_OR)"           shift, and go to state 654
    "&& (T_BOOLEAN_AND)"          shift, and go to state 655
    '|'                           shift, and go to state 656
    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    $default  reduce using rule 459 (static_operation)


state 774

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value "xor (T_LOGICAL_XOR)" static_scalar_value .
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "and (T_LOGICAL_AND)"         shift, and go to state 652
    '?'                           shift, and go to state 653
    "|| (T_BOOLEAN_OR)"           shift, and go to state 654
    "&& (T_BOOLEAN_AND)"          shift, and go to state 655
    '|'                           shift, and go to state 656
    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    $default  reduce using rule 457 (static_operation)


state 775

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value "and (T_LOGICAL_AND)" static_scalar_value .
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '?'                           shift, and go to state 653
    "|| (T_BOOLEAN_OR)"           shift, and go to state 654
    "&& (T_BOOLEAN_AND)"          shift, and go to state 655
    '|'                           shift, and go to state 656
    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    $default  reduce using rule 458 (static_operation)


state 776

  470 static_operation: static_scalar_value '?' ':' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 865
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 777

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  471                 | static_scalar_value '?' static_scalar_value . ':' static_scalar_value

    "or (T_LOGICAL_OR)"           shift, and go to state 650
    "xor (T_LOGICAL_XOR)"         shift, and go to state 651
    "and (T_LOGICAL_AND)"         shift, and go to state 652
    '?'                           shift, and go to state 653
    ':'                           shift, and go to state 866
    "|| (T_BOOLEAN_OR)"           shift, and go to state 654
    "&& (T_BOOLEAN_AND)"          shift, and go to state 655
    '|'                           shift, and go to state 656
    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676


state 778

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value "|| (T_BOOLEAN_OR)" static_scalar_value .
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "&& (T_BOOLEAN_AND)"          shift, and go to state 655
    '|'                           shift, and go to state 656
    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    $default  reduce using rule 461 (static_operation)


state 779

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value "&& (T_BOOLEAN_AND)" static_scalar_value .
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '|'                           shift, and go to state 656
    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    $default  reduce using rule 460 (static_operation)


state 780

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value '|' static_scalar_value .
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    $default  reduce using rule 451 (static_operation)


state 781

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value '^' static_scalar_value .
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    $default  reduce using rule 453 (static_operation)


state 782

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value '&' static_scalar_value .
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    $default  reduce using rule 452 (static_operation)


state 783

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value "!== (T_IS_NOT_IDENTICAL)" static_scalar_value .
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 463 (static_operation)


state 784

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value "=== (T_IS_IDENTICAL)" static_scalar_value .
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 462 (static_operation)


state 785

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value "!= (T_IS_NOT_EQUAL)" static_scalar_value .
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 465 (static_operation)


state 786

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value "== (T_IS_EQUAL)" static_scalar_value .
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 464 (static_operation)


state 787

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value '<' static_scalar_value .
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    ">> (T_SR)"   shift, and go to state 667
    "<< (T_SL)"   shift, and go to state 668
    '+'           shift, and go to state 669
    '-'           shift, and go to state 670
    '.'           shift, and go to state 671
    '*'           shift, and go to state 672
    '/'           shift, and go to state 673
    '%'           shift, and go to state 674
    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 466 (static_operation)


state 788

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value '>' static_scalar_value .
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    ">> (T_SR)"   shift, and go to state 667
    "<< (T_SL)"   shift, and go to state 668
    '+'           shift, and go to state 669
    '-'           shift, and go to state 670
    '.'           shift, and go to state 671
    '*'           shift, and go to state 672
    '/'           shift, and go to state 673
    '%'           shift, and go to state 674
    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 467 (static_operation)


state 789

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value .
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    ">> (T_SR)"   shift, and go to state 667
    "<< (T_SL)"   shift, and go to state 668
    '+'           shift, and go to state 669
    '-'           shift, and go to state 670
    '.'           shift, and go to state 671
    '*'           shift, and go to state 672
    '/'           shift, and go to state 673
    '%'           shift, and go to state 674
    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 469 (static_operation)


state 790

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value .
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    ">> (T_SR)"   shift, and go to state 667
    "<< (T_SL)"   shift, and go to state 668
    '+'           shift, and go to state 669
    '-'           shift, and go to state 670
    '.'           shift, and go to state 671
    '*'           shift, and go to state 672
    '/'           shift, and go to state 673
    '%'           shift, and go to state 674
    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 468 (static_operation)


state 791

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value ">> (T_SR)" static_scalar_value .
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '+'           shift, and go to state 669
    '-'           shift, and go to state 670
    '.'           shift, and go to state 671
    '*'           shift, and go to state 672
    '/'           shift, and go to state 673
    '%'           shift, and go to state 674
    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    $default  reduce using rule 455 (static_operation)


state 792

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value "<< (T_SL)" static_scalar_value .
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '+'           shift, and go to state 669
    '-'           shift, and go to state 670
    '.'           shift, and go to state 671
    '*'           shift, and go to state 672
    '/'           shift, and go to state 673
    '%'           shift, and go to state 674
    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    $default  reduce using rule 454 (static_operation)


state 793

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  443                 | static_scalar_value '+' static_scalar_value .
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '*'           shift, and go to state 672
    '/'           shift, and go to state 673
    '%'           shift, and go to state 674
    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    $default  reduce using rule 443 (static_operation)


state 794

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  444                 | static_scalar_value '-' static_scalar_value .
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '*'           shift, and go to state 672
    '/'           shift, and go to state 673
    '%'           shift, and go to state 674
    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    $default  reduce using rule 444 (static_operation)


state 795

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value '.' static_scalar_value .
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '*'           shift, and go to state 672
    '/'           shift, and go to state 673
    '%'           shift, and go to state 674
    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    $default  reduce using rule 456 (static_operation)


state 796

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  445                 | static_scalar_value '*' static_scalar_value .
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    $default  reduce using rule 445 (static_operation)


state 797

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value '/' static_scalar_value .
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    $default  reduce using rule 447 (static_operation)


state 798

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  448                 | static_scalar_value '%' static_scalar_value .
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    $default  reduce using rule 448 (static_operation)


state 799

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  446                 | static_scalar_value "** (T_POW)" static_scalar_value .
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "** (T_POW)"  shift, and go to state 675
    '['           shift, and go to state 676

    $default  reduce using rule 446 (static_operation)


state 800

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  442                 | static_scalar_value '[' static_scalar_value . ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "or (T_LOGICAL_OR)"           shift, and go to state 650
    "xor (T_LOGICAL_XOR)"         shift, and go to state 651
    "and (T_LOGICAL_AND)"         shift, and go to state 652
    '?'                           shift, and go to state 653
    "|| (T_BOOLEAN_OR)"           shift, and go to state 654
    "&& (T_BOOLEAN_AND)"          shift, and go to state 655
    '|'                           shift, and go to state 656
    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676
    ']'                           shift, and go to state 867


state 801

  101 catch_statement: "catch (T_CATCH)" . '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 additional_catches

    '('  shift, and go to state 868


state 802

   93 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list '}' catch_statement . $@23 finally_statement

    $default  reduce using rule 92 ($@23)

    $@23  go to state 869


state 803

   31 use_function_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 31 (use_function_declaration)


state 804

   37 use_const_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 37 (use_const_declaration)


state 805

  202 static_var_list: static_var_list ',' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 202 (static_var_list)


state 806

  360 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' parameter_list . ')' lexical_vars '{' inner_statement_list '}'

    ')'  shift, and go to state 870


state 807

  587 isset_variables: isset_variables ',' $@76 isset_variable .

    $default  reduce using rule 587 (isset_variables)


state 808

  551 assignment_list_element: "list (T_LIST)" '(' $@74 . assignment_list ')'

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "list (T_LIST)"            shift, and go to state 552
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    $default  reduce using rule 552 (assignment_list_element)

    namespace_name                     go to state 152
    function_call                      go to state 101
    class_name                         go to state 153
    variable                           go to state 553
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    assignment_list                    go to state 871
    assignment_list_element            go to state 555


state 809

  547 assignment_list: assignment_list ',' assignment_list_element .

    $default  reduce using rule 547 (assignment_list)


state 810

  275 expr_without_variable: "list (T_LIST)" '(' $@45 assignment_list ')' '=' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 872
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 811

  569 encaps_var: "variable (T_VARIABLE)" '[' $@75 encaps_var_offset ']' .

    $default  reduce using rule 569 (encaps_var)


state 812

  572 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' . '}'

    '}'  shift, and go to state 873


state 813

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' $@2 top_statement_list '}' .

    $default  reduce using rule 13 (top_statement)


state 814

  264 chaining_dereference: '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 535 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 331
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    dim_offset                         go to state 874
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 815

  508 variable_property: "-> (T_OBJECT_OPERATOR)" . object_property $@70 method_or_not

    "identifier (T_STRING)"  shift, and go to state 482
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 422
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 610
    reference_variable         go to state 424
    compound_variable          go to state 118
    object_property            go to state 875
    object_dim_list            go to state 612
    variable_name              go to state 613
    simple_indirect_reference  go to state 426


state 816

  261 chaining_method_or_property: chaining_method_or_property . variable_property
  268 chaining_instance_call: chaining_method_or_property .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 815

    $default  reduce using rule 268 (chaining_instance_call)

    variable_property  go to state 876


state 817

  263 chaining_dereference: chaining_dereference . '[' dim_offset ']'
  266 chaining_instance_call: chaining_dereference . $@42 chaining_method_or_property
  267                       | chaining_dereference .

    '['  shift, and go to state 877

    "-> (T_OBJECT_OPERATOR)"  reduce using rule 265 ($@42)
    $default                  reduce using rule 267 (chaining_instance_call)

    $@42  go to state 878


state 818

  271 instance_call: $@43 chaining_instance_call .

    $default  reduce using rule 271 (instance_call)


state 819

  262 chaining_method_or_property: variable_property .

    $default  reduce using rule 262 (chaining_method_or_property)


state 820

   46 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 879


state 821

  191 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' function_call_parameter .

    $default  reduce using rule 191 (non_empty_function_call_parameter_list)


state 822

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  399 fully_qualified_class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 242

    $default  reduce using rule 399 (fully_qualified_class_name)


state 823

  137 implements_list: "implements (T_IMPLEMENTS)" interface_list .
  139 interface_list: interface_list . ',' fully_qualified_class_name

    ','  shift, and go to state 825

    $default  reduce using rule 137 (implements_list)


state 824

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@32 implements_list '{' . class_statement_list '}'

    $default  reduce using rule 206 (class_statement_list)

    class_statement_list  go to state 880


state 825

  139 interface_list: interface_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 124
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    namespace_name              go to state 584
    fully_qualified_class_name  go to state 881


state 826

  126 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@33 interface_extends_list '{' class_statement_list . '}'
  205 class_statement_list: class_statement_list . class_statement

    "const (T_CONST)"          shift, and go to state 882
    "use (T_USE)"              shift, and go to state 883
    "public (T_PUBLIC)"        shift, and go to state 884
    "protected (T_PROTECTED)"  shift, and go to state 885
    "private (T_PRIVATE)"      shift, and go to state 886
    "final (T_FINAL)"          shift, and go to state 887
    "abstract (T_ABSTRACT)"    shift, and go to state 888
    "static (T_STATIC)"        shift, and go to state 889
    "var (T_VAR)"              shift, and go to state 890
    '}'                        shift, and go to state 891

    $default  reduce using rule 238 (method_modifiers)

    class_statement             go to state 892
    trait_use_statement         go to state 893
    variable_modifiers          go to state 894
    method_modifiers            go to state 895
    non_empty_member_modifiers  go to state 896
    member_modifier             go to state 897
    class_constant_declaration  go to state 898


state 827

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 '(' parameter_list . ')' '{' inner_statement_list '}'

    ')'  shift, and go to state 899


state 828

  358 expr_without_variable: function is_reference @56 '(' parameter_list ')' . lexical_vars '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 900

    $default  reduce using rule 372 (lexical_vars)

    lexical_vars  go to state 901


state 829

  180 non_empty_parameter_list: non_empty_parameter_list ',' . parameter

    "identifier (T_STRING)"    shift, and go to state 124
    "array (T_ARRAY)"          shift, and go to state 719
    "callable (T_CALLABLE)"    shift, and go to state 720
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    $default  reduce using rule 183 (optional_class_type)

    namespace_name              go to state 584
    parameter                   go to state 902
    optional_class_type         go to state 724
    fully_qualified_class_name  go to state 725


state 830

  181 parameter: optional_class_type is_reference . is_variadic "variable (T_VARIABLE)"
  182          | optional_class_type is_reference . is_variadic "variable (T_VARIABLE)" '=' static_scalar

    "... (T_ELLIPSIS)"  shift, and go to state 903

    $default  reduce using rule 119 (is_variadic)

    is_variadic  go to state 904


state 831

  337 expr_without_variable: expr '?' $@52 expr ':' $@53 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 905
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 832

  279 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference $@46 . ctor_arguments

    '('  shift, and go to state 409

    $default  reduce using rule 416 (ctor_arguments)

    function_call_parameter_list  go to state 489
    ctor_arguments                go to state 906


state 833

  509 array_method_dereference: array_method_dereference . '[' dim_offset ']'
  514 method_or_not: array_method_dereference .

    '['  shift, and go to state 907

    $default  reduce using rule 514 (method_or_not)


state 834

  510 array_method_dereference: method . '[' dim_offset ']'
  513 method_or_not: method .

    '['  shift, and go to state 908

    $default  reduce using rule 513 (method_or_not)


state 835

  512 method: @71 . function_call_parameter_list

    '('  shift, and go to state 409

    function_call_parameter_list  go to state 909


state 836

  503 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@68 object_property $@69 method_or_not . variable_properties

    $default  reduce using rule 506 (variable_properties)

    variable_properties  go to state 910


state 837

  540 object_dim_list: object_dim_list '[' dim_offset . ']'

    ']'  shift, and go to state 911


state 838

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr
  541 object_dim_list: object_dim_list '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    '}'                           shift, and go to state 912


state 839

  559 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable .

    $default  reduce using rule 559 (non_empty_array_pair_list)


state 840

  405 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" $@66 object_property $@67 dynamic_class_name_variable_properties .
  407 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties . dynamic_class_name_variable_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 913

    $default  reduce using rule 405 (dynamic_class_name_reference)

    dynamic_class_name_variable_property  go to state 914


state 841

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list . new_else_single "endif (T_ENDIF)" ';'
  172 new_elseif_list: new_elseif_list . "elseif (T_ELSEIF)" parenthesis_expr ':' $@38 inner_statement_list

    "elseif (T_ELSEIF)"  shift, and go to state 915
    "else (T_ELSE)"      shift, and go to state 916

    $default  reduce using rule 175 (new_else_single)

    new_else_single  go to state 917


state 842

  169 elseif_list: elseif_list "elseif (T_ELSEIF)" . parenthesis_expr $@37 statement

    '('  shift, and go to state 176

    parenthesis_expr  go to state 918


state 843

  174 else_single: "else (T_ELSE)" . statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 919
    unticked_statement                 go to state 88
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 106
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 844

   52 unticked_statement: "if (T_IF)" parenthesis_expr $@5 statement $@6 elseif_list else_single .

    $default  reduce using rule 52 (unticked_statement)


state 845

   61 unticked_statement: "do (T_DO)" $@11 statement "while (T_WHILE)" $@12 parenthesis_expr ';' .

    $default  reduce using rule 61 (unticked_statement)


state 846

  166 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" . ';'

    ';'  shift, and go to state 920


state 847

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' . $@14 for_expr ')' $@15 for_statement

    $default  reduce using rule 63 ($@14)

    $@14  go to state 921


state 848

  143 foreach_variable: '&' variable .

    $default  reduce using rule 143 (foreach_variable)


state 849

  145 foreach_variable: "list (T_LIST)" '(' . $@34 assignment_list ')'

    $default  reduce using rule 144 ($@34)

    $@34  go to state 922


state 850

  141 foreach_optional_arg: "=> (T_DOUBLE_ARROW)" . foreach_variable

    '&'                        shift, and go to state 748
    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "list (T_LIST)"            shift, and go to state 749
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    namespace_name                     go to state 152
    foreach_variable                   go to state 923
    function_call                      go to state 101
    class_name                         go to state 153
    variable                           go to state 751
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119


state 851

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg . ')' $@20 foreach_statement

    ')'  shift, and go to state 924


state 852

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg . ')' $@18 foreach_statement

    ')'  shift, and go to state 925


state 853

  153 declare_list: declare_list ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar             go to state 926
    static_scalar_value       go to state 525
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 854

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  151 declare_statement: ':' inner_statement_list . "enddeclare (T_ENDDECLARE)" ';'

    "enddeclare (T_ENDDECLARE)"  shift, and go to state 927

    $default  reduce using rule 40 ($@4)

    $@4  go to state 404


state 855

  157 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 928


state 856

  156 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 156 (switch_case_list)


state 857

  160 case_list: case_list "case (T_CASE)" expr . case_separator $@35 inner_statement_list
  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 256
    "xor (T_LOGICAL_XOR)"         shift, and go to state 257
    "and (T_LOGICAL_AND)"         shift, and go to state 258
    '?'                           shift, and go to state 259
    ':'                           shift, and go to state 858
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282
    ';'                           shift, and go to state 859

    case_separator  go to state 929


state 858

  163 case_separator: ':' .

    $default  reduce using rule 163 (case_separator)


state 859

  164 case_separator: ';' .

    $default  reduce using rule 164 (case_separator)


state 860

  162 case_list: case_list "default (T_DEFAULT)" case_separator . $@36 inner_statement_list

    $default  reduce using rule 161 ($@36)

    $@36  go to state 930


state 861

  155 switch_case_list: '{' ';' case_list '}' .

    $default  reduce using rule 155 (switch_case_list)


state 862

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  492 non_empty_static_array_pair_list: static_scalar_value "=> (T_DOUBLE_ARROW)" static_scalar_value .

    "or (T_LOGICAL_OR)"           shift, and go to state 650
    "xor (T_LOGICAL_XOR)"         shift, and go to state 651
    "and (T_LOGICAL_AND)"         shift, and go to state 652
    '?'                           shift, and go to state 653
    "|| (T_BOOLEAN_OR)"           shift, and go to state 654
    "&& (T_BOOLEAN_AND)"          shift, and go to state 655
    '|'                           shift, and go to state 656
    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    $default  reduce using rule 492 (non_empty_static_array_pair_list)


state 863

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  490 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar_value . "=> (T_DOUBLE_ARROW)" static_scalar_value
  491                                 | non_empty_static_array_pair_list ',' static_scalar_value .

    "or (T_LOGICAL_OR)"           shift, and go to state 650
    "xor (T_LOGICAL_XOR)"         shift, and go to state 651
    "and (T_LOGICAL_AND)"         shift, and go to state 652
    '?'                           shift, and go to state 653
    "|| (T_BOOLEAN_OR)"           shift, and go to state 654
    "&& (T_BOOLEAN_AND)"          shift, and go to state 655
    '|'                           shift, and go to state 656
    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 931

    $default  reduce using rule 491 (non_empty_static_array_pair_list)


state 864

  437 static_scalar_value: "array (T_ARRAY)" '(' static_array_pair_list ')' .

    $default  reduce using rule 437 (static_scalar_value)


state 865

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value '?' ':' static_scalar_value .
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "|| (T_BOOLEAN_OR)"           shift, and go to state 654
    "&& (T_BOOLEAN_AND)"          shift, and go to state 655
    '|'                           shift, and go to state 656
    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    $default  reduce using rule 470 (static_operation)


state 866

  471 static_operation: static_scalar_value '?' static_scalar_value ':' . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 932
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 867

  442 static_operation: static_scalar_value '[' static_scalar_value ']' .

    $default  reduce using rule 442 (static_operation)


state 868

  101 catch_statement: "catch (T_CATCH)" '(' . $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 additional_catches

    $default  reduce using rule 97 ($@24)

    $@24  go to state 933


state 869

   93 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list '}' catch_statement $@23 . finally_statement

    "finally (T_FINALLY)"  shift, and go to state 934

    $default  reduce using rule 102 (finally_statement)

    finally_statement  go to state 935


state 870

  360 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' parameter_list ')' . lexical_vars '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 900

    $default  reduce using rule 372 (lexical_vars)

    lexical_vars  go to state 936


state 871

  547 assignment_list: assignment_list . ',' assignment_list_element
  551 assignment_list_element: "list (T_LIST)" '(' $@74 assignment_list . ')'

    ','  shift, and go to state 692
    ')'  shift, and go to state 937


state 872

  275 expr_without_variable: "list (T_LIST)" '(' $@45 assignment_list ')' '=' expr .
  298                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 259
    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 275 (expr_without_variable)


state 873

  572 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}' .

    $default  reduce using rule 572 (encaps_var)


state 874

  264 chaining_dereference: '[' dim_offset . ']'

    ']'  shift, and go to state 938


state 875

  508 variable_property: "-> (T_OBJECT_OPERATOR)" object_property . $@70 method_or_not

    $default  reduce using rule 507 ($@70)

    $@70  go to state 939


state 876

  261 chaining_method_or_property: chaining_method_or_property variable_property .

    $default  reduce using rule 261 (chaining_method_or_property)


state 877

  263 chaining_dereference: chaining_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 535 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 331
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    dim_offset                         go to state 940
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 878

  266 chaining_instance_call: chaining_dereference $@42 . chaining_method_or_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 815

    chaining_method_or_property  go to state 941
    variable_property            go to state 819


state 879

   46 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 46 (inner_statement)


state 880

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@32 implements_list '{' class_statement_list . '}'
  205 class_statement_list: class_statement_list . class_statement

    "const (T_CONST)"          shift, and go to state 882
    "use (T_USE)"              shift, and go to state 883
    "public (T_PUBLIC)"        shift, and go to state 884
    "protected (T_PROTECTED)"  shift, and go to state 885
    "private (T_PRIVATE)"      shift, and go to state 886
    "final (T_FINAL)"          shift, and go to state 887
    "abstract (T_ABSTRACT)"    shift, and go to state 888
    "static (T_STATIC)"        shift, and go to state 889
    "var (T_VAR)"              shift, and go to state 890
    '}'                        shift, and go to state 942

    $default  reduce using rule 238 (method_modifiers)

    class_statement             go to state 892
    trait_use_statement         go to state 893
    variable_modifiers          go to state 894
    method_modifiers            go to state 895
    non_empty_member_modifiers  go to state 896
    member_modifier             go to state 897
    class_constant_declaration  go to state 898


state 881

  139 interface_list: interface_list ',' fully_qualified_class_name .

    $default  reduce using rule 139 (interface_list)


state 882

  253 class_constant_declaration: "const (T_CONST)" . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 943


state 883

  213 trait_use_statement: "use (T_USE)" . trait_list trait_adaptations

    "identifier (T_STRING)"    shift, and go to state 124
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    namespace_name              go to state 584
    trait_list                  go to state 944
    fully_qualified_class_name  go to state 945


state 884

  242 member_modifier: "public (T_PUBLIC)" .

    $default  reduce using rule 242 (member_modifier)


state 885

  243 member_modifier: "protected (T_PROTECTED)" .

    $default  reduce using rule 243 (member_modifier)


state 886

  244 member_modifier: "private (T_PRIVATE)" .

    $default  reduce using rule 244 (member_modifier)


state 887

  247 member_modifier: "final (T_FINAL)" .

    $default  reduce using rule 247 (member_modifier)


state 888

  246 member_modifier: "abstract (T_ABSTRACT)" .

    $default  reduce using rule 246 (member_modifier)


state 889

  245 member_modifier: "static (T_STATIC)" .

    $default  reduce using rule 245 (member_modifier)


state 890

  237 variable_modifiers: "var (T_VAR)" .

    $default  reduce using rule 237 (variable_modifiers)


state 891

  126 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@33 interface_extends_list '{' class_statement_list '}' .

    $default  reduce using rule 126 (unticked_class_declaration_statement)


state 892

  205 class_statement_list: class_statement_list class_statement .

    $default  reduce using rule 205 (class_statement_list)


state 893

  210 class_statement: trait_use_statement .

    $default  reduce using rule 210 (class_statement)


state 894

  208 class_statement: variable_modifiers . $@39 class_variable_declaration ';'

    $default  reduce using rule 207 ($@39)

    $@39  go to state 946


state 895

  212 class_statement: method_modifiers . function is_reference "identifier (T_STRING)" $@40 '(' parameter_list ')' method_body

    "function (T_FUNCTION)"  shift, and go to state 48

    function  go to state 947


state 896

  236 variable_modifiers: non_empty_member_modifiers .
  239 method_modifiers: non_empty_member_modifiers .
  241 non_empty_member_modifiers: non_empty_member_modifiers . member_modifier

    "public (T_PUBLIC)"        shift, and go to state 884
    "protected (T_PROTECTED)"  shift, and go to state 885
    "private (T_PRIVATE)"      shift, and go to state 886
    "final (T_FINAL)"          shift, and go to state 887
    "abstract (T_ABSTRACT)"    shift, and go to state 888
    "static (T_STATIC)"        shift, and go to state 889

    "function (T_FUNCTION)"  reduce using rule 239 (method_modifiers)
    $default                 reduce using rule 236 (variable_modifiers)

    member_modifier  go to state 948


state 897

  240 non_empty_member_modifiers: member_modifier .

    $default  reduce using rule 240 (non_empty_member_modifiers)


state 898

  209 class_statement: class_constant_declaration . ';'
  252 class_constant_declaration: class_constant_declaration . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 949
    ';'  shift, and go to state 950


state 899

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 '(' parameter_list ')' . '{' inner_statement_list '}'

    '{'  shift, and go to state 951


state 900

  373 lexical_vars: "use (T_USE)" . '(' lexical_var_list ')'

    '('  shift, and go to state 952


state 901

  358 expr_without_variable: function is_reference @56 '(' parameter_list ')' lexical_vars . '{' inner_statement_list '}'

    '{'  shift, and go to state 953


state 902

  180 non_empty_parameter_list: non_empty_parameter_list ',' parameter .

    $default  reduce using rule 180 (non_empty_parameter_list)


state 903

  120 is_variadic: "... (T_ELLIPSIS)" .

    $default  reduce using rule 120 (is_variadic)


state 904

  181 parameter: optional_class_type is_reference is_variadic . "variable (T_VARIABLE)"
  182          | optional_class_type is_reference is_variadic . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 954


state 905

  298 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  305                      | expr . "xor (T_LOGICAL_XOR)" expr
  306                      | expr . '|' expr
  307                      | expr . '&' expr
  308                      | expr . '^' expr
  309                      | expr . '.' expr
  310                      | expr . '+' expr
  311                      | expr . '-' expr
  312                      | expr . '*' expr
  313                      | expr . "** (T_POW)" expr
  314                      | expr . '/' expr
  315                      | expr . '%' expr
  316                      | expr . "<< (T_SL)" expr
  317                      | expr . ">> (T_SR)" expr
  322                      | expr . "=== (T_IS_IDENTICAL)" expr
  323                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  324                      | expr . "== (T_IS_EQUAL)" expr
  325                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  326                      | expr . '<' expr
  327                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  328                      | expr . '>' expr
  329                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  330                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  337                      | expr . '?' $@52 expr ':' $@53 expr
  337                      | expr '?' $@52 expr ':' $@53 expr .
  339                      | expr . '?' ':' $@54 expr

    "|| (T_BOOLEAN_OR)"           shift, and go to state 260
    "&& (T_BOOLEAN_AND)"          shift, and go to state 261
    '|'                           shift, and go to state 262
    '^'                           shift, and go to state 263
    '&'                           shift, and go to state 264
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 265
    "=== (T_IS_IDENTICAL)"        shift, and go to state 266
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 267
    "== (T_IS_EQUAL)"             shift, and go to state 268
    '<'                           shift, and go to state 269
    '>'                           shift, and go to state 270
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 271
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 272
    ">> (T_SR)"                   shift, and go to state 273
    "<< (T_SL)"                   shift, and go to state 274
    '+'                           shift, and go to state 275
    '-'                           shift, and go to state 276
    '.'                           shift, and go to state 277
    '*'                           shift, and go to state 278
    '/'                           shift, and go to state 279
    '%'                           shift, and go to state 280
    "instanceof (T_INSTANCEOF)"   shift, and go to state 281
    "** (T_POW)"                  shift, and go to state 282

    $default  reduce using rule 337 (expr_without_variable)


state 906

  279 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments .

    $default  reduce using rule 279 (expr_without_variable)


state 907

  509 array_method_dereference: array_method_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 535 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 331
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    dim_offset                         go to state 955
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 908

  510 array_method_dereference: method '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 535 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 331
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    dim_offset                         go to state 956
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 909

  512 method: @71 function_call_parameter_list .

    $default  reduce using rule 512 (method)


state 910

  503 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@68 object_property $@69 method_or_not variable_properties .
  505 variable_properties: variable_properties . variable_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 815

    $default  reduce using rule 503 (variable)

    variable_property  go to state 957


state 911

  540 object_dim_list: object_dim_list '[' dim_offset ']' .

    $default  reduce using rule 540 (object_dim_list)


state 912

  541 object_dim_list: object_dim_list '{' expr '}' .

    $default  reduce using rule 541 (object_dim_list)


state 913

  409 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" . object_property

    "identifier (T_STRING)"  shift, and go to state 482
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 422
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 610
    reference_variable         go to state 424
    compound_variable          go to state 118
    object_property            go to state 958
    object_dim_list            go to state 612
    variable_name              go to state 613
    simple_indirect_reference  go to state 426


state 914

  407 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties dynamic_class_name_variable_property .

    $default  reduce using rule 407 (dynamic_class_name_variable_properties)


state 915

  172 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" . parenthesis_expr ':' $@38 inner_statement_list

    '('  shift, and go to state 176

    parenthesis_expr  go to state 959


state 916

  176 new_else_single: "else (T_ELSE)" . ':' inner_statement_list

    ':'  shift, and go to state 960


state 917

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single . "endif (T_ENDIF)" ';'

    "endif (T_ENDIF)"  shift, and go to state 961


state 918

  169 elseif_list: elseif_list "elseif (T_ELSEIF)" parenthesis_expr . $@37 statement

    $default  reduce using rule 168 ($@37)

    $@37  go to state 962


state 919

  174 else_single: "else (T_ELSE)" statement .

    $default  reduce using rule 174 (else_single)


state 920

  166 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" ';' .

    $default  reduce using rule 166 (while_statement)


state 921

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 . for_expr ')' $@15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 123
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 125
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 256 (for_expr)

    namespace_name                     go to state 84
    for_expr                           go to state 963
    non_empty_for_expr                 go to state 338
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 339
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 922

  145 foreach_variable: "list (T_LIST)" '(' $@34 . assignment_list ')'

    "identifier (T_STRING)"    shift, and go to state 124
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 149
    "list (T_LIST)"            shift, and go to state 552
    "namespace (T_NAMESPACE)"  shift, and go to state 150
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 151
    '$'                        shift, and go to state 81

    $default  reduce using rule 552 (assignment_list_element)

    namespace_name                     go to state 152
    function_call                      go to state 101
    class_name                         go to state 153
    variable                           go to state 553
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 156
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    assignment_list                    go to state 964
    assignment_list_element            go to state 555


state 923

  141 foreach_optional_arg: "=> (T_DOUBLE_ARROW)" foreach_variable .

    $default  reduce using rule 141 (foreach_optional_arg)


state 924

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' . $@20 foreach_statement

    $default  reduce using rule 86 ($@20)

    $@20  go to state 965


state 925

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' . $@18 foreach_statement

    $default  reduce using rule 83 ($@18)

    $@18  go to state 966


state 926

  153 declare_list: declare_list ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 153 (declare_list)


state 927

  151 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" . ';'

    ';'  shift, and go to state 967


state 928

  157 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 157 (switch_case_list)


state 929

  160 case_list: case_list "case (T_CASE)" expr case_separator . $@35 inner_statement_list

    $default  reduce using rule 159 ($@35)

    $@35  go to state 968


state 930

  162 case_list: case_list "default (T_DEFAULT)" case_separator $@36 . inner_statement_list

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 969


state 931

  490 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar_value "=> (T_DOUBLE_ARROW)" . static_scalar_value

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar_value       go to state 970
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 932

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  471                 | static_scalar_value '?' static_scalar_value ':' static_scalar_value .

    "|| (T_BOOLEAN_OR)"           shift, and go to state 654
    "&& (T_BOOLEAN_AND)"          shift, and go to state 655
    '|'                           shift, and go to state 656
    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    $default  reduce using rule 471 (static_operation)


state 933

  101 catch_statement: "catch (T_CATCH)" '(' $@24 . fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 additional_catches

    "identifier (T_STRING)"    shift, and go to state 124
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    namespace_name              go to state 584
    fully_qualified_class_name  go to state 971


state 934

  104 finally_statement: "finally (T_FINALLY)" . $@28 '{' inner_statement_list '}'

    $default  reduce using rule 103 ($@28)

    $@28  go to state 972


state 935

   93 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list '}' catch_statement $@23 finally_statement .

    $default  reduce using rule 93 (unticked_statement)


state 936

  360 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' parameter_list ')' lexical_vars . '{' inner_statement_list '}'

    '{'  shift, and go to state 973


state 937

  551 assignment_list_element: "list (T_LIST)" '(' $@74 assignment_list ')' .

    $default  reduce using rule 551 (assignment_list_element)


state 938

  264 chaining_dereference: '[' dim_offset ']' .

    $default  reduce using rule 264 (chaining_dereference)


state 939

  508 variable_property: "-> (T_OBJECT_OPERATOR)" object_property $@70 . method_or_not

    '('       reduce using rule 511 (@71)
    $default  reduce using rule 515 (method_or_not)

    array_method_dereference  go to state 833
    method                    go to state 834
    @71                       go to state 835
    method_or_not             go to state 974


state 940

  263 chaining_dereference: chaining_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 975


state 941

  261 chaining_method_or_property: chaining_method_or_property . variable_property
  266 chaining_instance_call: chaining_dereference $@42 chaining_method_or_property .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 815

    $default  reduce using rule 266 (chaining_instance_call)

    variable_property  go to state 876


state 942

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@32 implements_list '{' class_statement_list '}' .

    $default  reduce using rule 124 (unticked_class_declaration_statement)


state 943

  253 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 976


state 944

  213 trait_use_statement: "use (T_USE)" trait_list . trait_adaptations
  215 trait_list: trait_list . ',' fully_qualified_class_name

    ','  shift, and go to state 977
    ';'  shift, and go to state 978
    '{'  shift, and go to state 979

    trait_adaptations  go to state 980


state 945

  214 trait_list: fully_qualified_class_name .

    $default  reduce using rule 214 (trait_list)


state 946

  208 class_statement: variable_modifiers $@39 . class_variable_declaration ';'

    "variable (T_VARIABLE)"  shift, and go to state 981

    class_variable_declaration  go to state 982


state 947

  212 class_statement: method_modifiers function . is_reference "identifier (T_STRING)" $@40 '(' parameter_list ')' method_body

    '&'  shift, and go to state 251

    $default  reduce using rule 117 (is_reference)

    is_reference  go to state 983


state 948

  241 non_empty_member_modifiers: non_empty_member_modifiers member_modifier .

    $default  reduce using rule 241 (non_empty_member_modifiers)


state 949

  252 class_constant_declaration: class_constant_declaration ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 984


state 950

  209 class_statement: class_constant_declaration ';' .

    $default  reduce using rule 209 (class_statement)


state 951

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 '(' parameter_list ')' '{' . inner_statement_list '}'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 985


state 952

  373 lexical_vars: "use (T_USE)" '(' . lexical_var_list ')'

    '&'                      shift, and go to state 986
    "variable (T_VARIABLE)"  shift, and go to state 987

    lexical_var_list  go to state 988


state 953

  358 expr_without_variable: function is_reference @56 '(' parameter_list ')' lexical_vars '{' . inner_statement_list '}'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 989


state 954

  181 parameter: optional_class_type is_reference is_variadic "variable (T_VARIABLE)" .
  182          | optional_class_type is_reference is_variadic "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 990

    $default  reduce using rule 181 (parameter)


state 955

  509 array_method_dereference: array_method_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 991


state 956

  510 array_method_dereference: method '[' dim_offset . ']'

    ']'  shift, and go to state 992


state 957

  505 variable_properties: variable_properties variable_property .

    $default  reduce using rule 505 (variable_properties)


state 958

  409 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" object_property .

    $default  reduce using rule 409 (dynamic_class_name_variable_property)


state 959

  172 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" parenthesis_expr . ':' $@38 inner_statement_list

    ':'  shift, and go to state 993


state 960

  176 new_else_single: "else (T_ELSE)" ':' . inner_statement_list

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 994


state 961

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" . ';'

    ';'  shift, and go to state 995


state 962

  169 elseif_list: elseif_list "elseif (T_ELSEIF)" parenthesis_expr $@37 . statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 996
    unticked_statement                 go to state 88
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 106
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 963

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 for_expr . ')' $@15 for_statement

    ')'  shift, and go to state 997


state 964

  145 foreach_variable: "list (T_LIST)" '(' $@34 assignment_list . ')'
  547 assignment_list: assignment_list . ',' assignment_list_element

    ','  shift, and go to state 692
    ')'  shift, and go to state 998


state 965

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 . foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    ':'                                           shift, and go to state 999
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 1000
    unticked_statement                 go to state 88
    foreach_statement                  go to state 1001
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 106
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 966

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 . foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    ':'                                           shift, and go to state 999
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 1000
    unticked_statement                 go to state 88
    foreach_statement                  go to state 1002
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 106
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 967

  151 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';' .

    $default  reduce using rule 151 (declare_statement)


state 968

  160 case_list: case_list "case (T_CASE)" expr case_separator $@35 . inner_statement_list

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1003


state 969

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  162 case_list: case_list "default (T_DEFAULT)" case_separator $@36 inner_statement_list .

    "endswitch (T_ENDSWITCH)"  reduce using rule 162 (case_list)
    "case (T_CASE)"            reduce using rule 162 (case_list)
    "default (T_DEFAULT)"      reduce using rule 162 (case_list)
    '}'                        reduce using rule 162 (case_list)
    $default                   reduce using rule 40 ($@4)

    $@4  go to state 404


state 970

  442 static_operation: static_scalar_value . '[' static_scalar_value ']'
  443                 | static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . "** (T_POW)" static_scalar_value
  447                 | static_scalar_value . '/' static_scalar_value
  448                 | static_scalar_value . '%' static_scalar_value
  451                 | static_scalar_value . '|' static_scalar_value
  452                 | static_scalar_value . '&' static_scalar_value
  453                 | static_scalar_value . '^' static_scalar_value
  454                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  455                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  456                 | static_scalar_value . '.' static_scalar_value
  457                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  458                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  459                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  460                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  461                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  462                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  464                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  465                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  466                 | static_scalar_value . '<' static_scalar_value
  467                 | static_scalar_value . '>' static_scalar_value
  468                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  470                 | static_scalar_value . '?' ':' static_scalar_value
  471                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  490 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar_value "=> (T_DOUBLE_ARROW)" static_scalar_value .

    "or (T_LOGICAL_OR)"           shift, and go to state 650
    "xor (T_LOGICAL_XOR)"         shift, and go to state 651
    "and (T_LOGICAL_AND)"         shift, and go to state 652
    '?'                           shift, and go to state 653
    "|| (T_BOOLEAN_OR)"           shift, and go to state 654
    "&& (T_BOOLEAN_AND)"          shift, and go to state 655
    '|'                           shift, and go to state 656
    '^'                           shift, and go to state 657
    '&'                           shift, and go to state 658
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 659
    "=== (T_IS_IDENTICAL)"        shift, and go to state 660
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 661
    "== (T_IS_EQUAL)"             shift, and go to state 662
    '<'                           shift, and go to state 663
    '>'                           shift, and go to state 664
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 665
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 666
    ">> (T_SR)"                   shift, and go to state 667
    "<< (T_SL)"                   shift, and go to state 668
    '+'                           shift, and go to state 669
    '-'                           shift, and go to state 670
    '.'                           shift, and go to state 671
    '*'                           shift, and go to state 672
    '/'                           shift, and go to state 673
    '%'                           shift, and go to state 674
    "** (T_POW)"                  shift, and go to state 675
    '['                           shift, and go to state 676

    $default  reduce using rule 490 (non_empty_static_array_pair_list)


state 971

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name . $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 additional_catches

    $default  reduce using rule 98 ($@25)

    $@25  go to state 1004


state 972

  104 finally_statement: "finally (T_FINALLY)" $@28 . '{' inner_statement_list '}'

    '{'  shift, and go to state 1005


state 973

  360 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' parameter_list ')' lexical_vars '{' . inner_statement_list '}'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1006


state 974

  508 variable_property: "-> (T_OBJECT_OPERATOR)" object_property $@70 method_or_not .

    $default  reduce using rule 508 (variable_property)


state 975

  263 chaining_dereference: chaining_dereference '[' dim_offset ']' .

    $default  reduce using rule 263 (chaining_dereference)


state 976

  253 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar             go to state 1007
    static_scalar_value       go to state 525
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 977

  215 trait_list: trait_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 124
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    namespace_name              go to state 584
    fully_qualified_class_name  go to state 1008


state 978

  216 trait_adaptations: ';' .

    $default  reduce using rule 216 (trait_adaptations)


state 979

  217 trait_adaptations: '{' . trait_adaptation_list '}'

    "identifier (T_STRING)"    shift, and go to state 1009
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    $default  reduce using rule 218 (trait_adaptation_list)

    namespace_name                          go to state 584
    trait_adaptation_list                   go to state 1010
    non_empty_trait_adaptation_list         go to state 1011
    trait_adaptation_statement              go to state 1012
    trait_precedence                        go to state 1013
    trait_method_reference                  go to state 1014
    trait_method_reference_fully_qualified  go to state 1015
    trait_alias                             go to state 1016
    fully_qualified_class_name              go to state 1017


state 980

  213 trait_use_statement: "use (T_USE)" trait_list trait_adaptations .

    $default  reduce using rule 213 (trait_use_statement)


state 981

  250 class_variable_declaration: "variable (T_VARIABLE)" .
  251                           | "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 1018

    $default  reduce using rule 250 (class_variable_declaration)


state 982

  208 class_statement: variable_modifiers $@39 class_variable_declaration . ';'
  248 class_variable_declaration: class_variable_declaration . ',' "variable (T_VARIABLE)"
  249                           | class_variable_declaration . ',' "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 1019
    ';'  shift, and go to state 1020


state 983

  212 class_statement: method_modifiers function is_reference . "identifier (T_STRING)" $@40 '(' parameter_list ')' method_body

    "identifier (T_STRING)"  shift, and go to state 1021


state 984

  252 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 1022


state 985

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 '(' parameter_list ')' '{' inner_statement_list . '}'

    '}'  shift, and go to state 1023

    $default  reduce using rule 40 ($@4)

    $@4  go to state 404


state 986

  377 lexical_var_list: '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 1024


state 987

  376 lexical_var_list: "variable (T_VARIABLE)" .

    $default  reduce using rule 376 (lexical_var_list)


state 988

  373 lexical_vars: "use (T_USE)" '(' lexical_var_list . ')'
  374 lexical_var_list: lexical_var_list . ',' "variable (T_VARIABLE)"
  375                 | lexical_var_list . ',' '&' "variable (T_VARIABLE)"

    ','  shift, and go to state 1025
    ')'  shift, and go to state 1026


state 989

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  358 expr_without_variable: function is_reference @56 '(' parameter_list ')' lexical_vars '{' inner_statement_list . '}'

    '}'  shift, and go to state 1027

    $default  reduce using rule 40 ($@4)

    $@4  go to state 404


state 990

  182 parameter: optional_class_type is_reference is_variadic "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar             go to state 1028
    static_scalar_value       go to state 525
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 991

  509 array_method_dereference: array_method_dereference '[' dim_offset ']' .

    $default  reduce using rule 509 (array_method_dereference)


state 992

  510 array_method_dereference: method '[' dim_offset ']' .

    $default  reduce using rule 510 (array_method_dereference)


state 993

  172 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" parenthesis_expr ':' . $@38 inner_statement_list

    $default  reduce using rule 171 ($@38)

    $@38  go to state 1029


state 994

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  176 new_else_single: "else (T_ELSE)" ':' inner_statement_list .

    "endif (T_ENDIF)"  reduce using rule 176 (new_else_single)
    $default           reduce using rule 40 ($@4)

    $@4  go to state 404


state 995

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';' .

    $default  reduce using rule 55 (unticked_statement)


state 996

  169 elseif_list: elseif_list "elseif (T_ELSEIF)" parenthesis_expr $@37 statement .

    $default  reduce using rule 169 (elseif_list)


state 997

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 for_expr ')' . $@15 for_statement

    $default  reduce using rule 64 ($@15)

    $@15  go to state 1030


state 998

  145 foreach_variable: "list (T_LIST)" '(' $@34 assignment_list ')' .

    $default  reduce using rule 145 (foreach_variable)


state 999

  149 foreach_statement: ':' . inner_statement_list "endforeach (T_ENDFOREACH)" ';'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1031


state 1000

  148 foreach_statement: statement .

    $default  reduce using rule 148 (foreach_statement)


state 1001

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement .

    $default  reduce using rule 87 (unticked_statement)


state 1002

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement .

    $default  reduce using rule 84 (unticked_statement)


state 1003

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  160 case_list: case_list "case (T_CASE)" expr case_separator $@35 inner_statement_list .

    "endswitch (T_ENDSWITCH)"  reduce using rule 160 (case_list)
    "case (T_CASE)"            reduce using rule 160 (case_list)
    "default (T_DEFAULT)"      reduce using rule 160 (case_list)
    '}'                        reduce using rule 160 (case_list)
    $default                   reduce using rule 40 ($@4)

    $@4  go to state 404


state 1004

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 . "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 additional_catches

    "variable (T_VARIABLE)"  shift, and go to state 1032


state 1005

  104 finally_statement: "finally (T_FINALLY)" $@28 '{' . inner_statement_list '}'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1033


state 1006

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  360 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' parameter_list ')' lexical_vars '{' inner_statement_list . '}'

    '}'  shift, and go to state 1034

    $default  reduce using rule 40 ($@4)

    $@4  go to state 404


state 1007

  253 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 253 (class_constant_declaration)


state 1008

  215 trait_list: trait_list ',' fully_qualified_class_name .

    $default  reduce using rule 215 (trait_list)


state 1009

    5 namespace_name: "identifier (T_STRING)" .
  227 trait_method_reference: "identifier (T_STRING)" .

    "as (T_AS)"  reduce using rule 227 (trait_method_reference)
    $default     reduce using rule 5 (namespace_name)


state 1010

  217 trait_adaptations: '{' trait_adaptation_list . '}'

    '}'  shift, and go to state 1035


state 1011

  219 trait_adaptation_list: non_empty_trait_adaptation_list .
  221 non_empty_trait_adaptation_list: non_empty_trait_adaptation_list . trait_adaptation_statement

    "identifier (T_STRING)"    shift, and go to state 1009
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    $default  reduce using rule 219 (trait_adaptation_list)

    namespace_name                          go to state 584
    trait_adaptation_statement              go to state 1036
    trait_precedence                        go to state 1013
    trait_method_reference                  go to state 1014
    trait_method_reference_fully_qualified  go to state 1015
    trait_alias                             go to state 1016
    fully_qualified_class_name              go to state 1017


state 1012

  220 non_empty_trait_adaptation_list: trait_adaptation_statement .

    $default  reduce using rule 220 (non_empty_trait_adaptation_list)


state 1013

  222 trait_adaptation_statement: trait_precedence . ';'

    ';'  shift, and go to state 1037


state 1014

  230 trait_alias: trait_method_reference . "as (T_AS)" trait_modifiers "identifier (T_STRING)"
  231            | trait_method_reference . "as (T_AS)" member_modifier

    "as (T_AS)"  shift, and go to state 1038


state 1015

  224 trait_precedence: trait_method_reference_fully_qualified . "insteadof (T_INSTEADOF)" trait_reference_list
  228 trait_method_reference: trait_method_reference_fully_qualified .

    "insteadof (T_INSTEADOF)"  shift, and go to state 1039

    $default  reduce using rule 228 (trait_method_reference)


state 1016

  223 trait_adaptation_statement: trait_alias . ';'

    ';'  shift, and go to state 1040


state 1017

  229 trait_method_reference_fully_qualified: fully_qualified_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 1041


state 1018

  251 class_variable_declaration: "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar             go to state 1042
    static_scalar_value       go to state 525
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 1019

  248 class_variable_declaration: class_variable_declaration ',' . "variable (T_VARIABLE)"
  249                           | class_variable_declaration ',' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 1043


state 1020

  208 class_statement: variable_modifiers $@39 class_variable_declaration ';' .

    $default  reduce using rule 208 (class_statement)


state 1021

  212 class_statement: method_modifiers function is_reference "identifier (T_STRING)" . $@40 '(' parameter_list ')' method_body

    $default  reduce using rule 211 ($@40)

    $@40  go to state 1044


state 1022

  252 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar             go to state 1045
    static_scalar_value       go to state 525
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 1023

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 '(' parameter_list ')' '{' inner_statement_list '}' .

    $default  reduce using rule 122 (unticked_function_declaration_statement)


state 1024

  377 lexical_var_list: '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 377 (lexical_var_list)


state 1025

  374 lexical_var_list: lexical_var_list ',' . "variable (T_VARIABLE)"
  375                 | lexical_var_list ',' . '&' "variable (T_VARIABLE)"

    '&'                      shift, and go to state 1046
    "variable (T_VARIABLE)"  shift, and go to state 1047


state 1026

  373 lexical_vars: "use (T_USE)" '(' lexical_var_list ')' .

    $default  reduce using rule 373 (lexical_vars)


state 1027

  358 expr_without_variable: function is_reference @56 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}' .

    $default  reduce using rule 358 (expr_without_variable)


state 1028

  182 parameter: optional_class_type is_reference is_variadic "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 182 (parameter)


state 1029

  172 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" parenthesis_expr ':' $@38 . inner_statement_list

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1048


state 1030

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 for_expr ')' $@15 . for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    ':'                                           shift, and go to state 1049
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 126
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 1050
    unticked_statement                 go to state 88
    for_statement                      go to state 1051
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 127
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    general_constant                   go to state 104
    scalar                             go to state 105
    expr                               go to state 106
    parenthesis_expr                   go to state 107
    r_variable                         go to state 108
    rw_variable                        go to state 109
    variable                           go to state 110
    variable_without_objects           go to state 111
    static_member                      go to state 112
    variable_class_name                go to state 113
    array_function_dereference         go to state 114
    base_variable_with_function_calls  go to state 115
    base_variable                      go to state 116
    reference_variable                 go to state 117
    compound_variable                  go to state 118
    simple_indirect_reference          go to state 119
    internal_functions_in_yacc         go to state 120
    class_constant                     go to state 121
    class_name_scalar                  go to state 122


state 1031

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  149 foreach_statement: ':' inner_statement_list . "endforeach (T_ENDFOREACH)" ';'

    "endforeach (T_ENDFOREACH)"  shift, and go to state 1052

    $default  reduce using rule 40 ($@4)

    $@4  go to state 404


state 1032

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" . ')' $@26 '{' inner_statement_list '}' $@27 additional_catches

    ')'  shift, and go to state 1053


state 1033

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  104 finally_statement: "finally (T_FINALLY)" $@28 '{' inner_statement_list . '}'

    '}'  shift, and go to state 1054

    $default  reduce using rule 40 ($@4)

    $@4  go to state 404


state 1034

  360 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}' .

    $default  reduce using rule 360 (expr_without_variable)


state 1035

  217 trait_adaptations: '{' trait_adaptation_list '}' .

    $default  reduce using rule 217 (trait_adaptations)


state 1036

  221 non_empty_trait_adaptation_list: non_empty_trait_adaptation_list trait_adaptation_statement .

    $default  reduce using rule 221 (non_empty_trait_adaptation_list)


state 1037

  222 trait_adaptation_statement: trait_precedence ';' .

    $default  reduce using rule 222 (trait_adaptation_statement)


state 1038

  230 trait_alias: trait_method_reference "as (T_AS)" . trait_modifiers "identifier (T_STRING)"
  231            | trait_method_reference "as (T_AS)" . member_modifier

    "public (T_PUBLIC)"        shift, and go to state 884
    "protected (T_PROTECTED)"  shift, and go to state 885
    "private (T_PRIVATE)"      shift, and go to state 886
    "final (T_FINAL)"          shift, and go to state 887
    "abstract (T_ABSTRACT)"    shift, and go to state 888
    "static (T_STATIC)"        shift, and go to state 889

    $default  reduce using rule 232 (trait_modifiers)

    trait_modifiers  go to state 1055
    member_modifier  go to state 1056


state 1039

  224 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" . trait_reference_list

    "identifier (T_STRING)"    shift, and go to state 124
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    namespace_name              go to state 584
    trait_reference_list        go to state 1057
    fully_qualified_class_name  go to state 1058


state 1040

  223 trait_adaptation_statement: trait_alias ';' .

    $default  reduce using rule 223 (trait_adaptation_statement)


state 1041

  229 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 1059


state 1042

  251 class_variable_declaration: "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 251 (class_variable_declaration)


state 1043

  248 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" .
  249                           | class_variable_declaration ',' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 1060

    $default  reduce using rule 248 (class_variable_declaration)


state 1044

  212 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@40 . '(' parameter_list ')' method_body

    '('  shift, and go to state 1061


state 1045

  252 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 252 (class_constant_declaration)


state 1046

  375 lexical_var_list: lexical_var_list ',' '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 1062


state 1047

  374 lexical_var_list: lexical_var_list ',' "variable (T_VARIABLE)" .

    $default  reduce using rule 374 (lexical_var_list)


state 1048

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  172 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" parenthesis_expr ':' $@38 inner_statement_list .

    "elseif (T_ELSEIF)"  reduce using rule 172 (new_elseif_list)
    "else (T_ELSE)"      reduce using rule 172 (new_elseif_list)
    "endif (T_ENDIF)"    reduce using rule 172 (new_elseif_list)
    $default             reduce using rule 40 ($@4)

    $@4  go to state 404


state 1049

  147 for_statement: ':' . inner_statement_list "endfor (T_ENDFOR)" ';'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1063


state 1050

  146 for_statement: statement .

    $default  reduce using rule 146 (for_statement)


state 1051

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement .

    $default  reduce using rule 65 (unticked_statement)


state 1052

  149 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" . ';'

    ';'  shift, and go to state 1064


state 1053

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' . $@26 '{' inner_statement_list '}' $@27 additional_catches

    $default  reduce using rule 99 ($@26)

    $@26  go to state 1065


state 1054

  104 finally_statement: "finally (T_FINALLY)" $@28 '{' inner_statement_list '}' .

    $default  reduce using rule 104 (finally_statement)


state 1055

  230 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 1066


state 1056

  231 trait_alias: trait_method_reference "as (T_AS)" member_modifier .
  233 trait_modifiers: member_modifier .

    "identifier (T_STRING)"  reduce using rule 233 (trait_modifiers)
    $default                 reduce using rule 231 (trait_alias)


state 1057

  224 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" trait_reference_list .
  226 trait_reference_list: trait_reference_list . ',' fully_qualified_class_name

    ','  shift, and go to state 1067

    $default  reduce using rule 224 (trait_precedence)


state 1058

  225 trait_reference_list: fully_qualified_class_name .

    $default  reduce using rule 225 (trait_reference_list)


state 1059

  229 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    $default  reduce using rule 229 (trait_method_reference_fully_qualified)


state 1060

  249 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 508
    '-'                                           shift, and go to state 509
    '!'                                           shift, and go to state 510
    '~'                                           shift, and go to state 511
    '['                                           shift, and go to state 512
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 124
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 513
    "static (T_STATIC)"                           shift, and go to state 149
    "array (T_ARRAY)"                             shift, and go to state 514
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 515
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 516
    "namespace (T_NAMESPACE)"                     shift, and go to state 517
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 518
    '('                                           shift, and go to state 519

    namespace_name            go to state 520
    class_name                go to state 521
    common_scalar             go to state 522
    static_class_constant     go to state 523
    static_scalar             go to state 1068
    static_scalar_value       go to state 525
    static_operation          go to state 526
    static_class_name_scalar  go to state 527


state 1061

  212 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@40 '(' . parameter_list ')' method_body

    "identifier (T_STRING)"    shift, and go to state 124
    "array (T_ARRAY)"          shift, and go to state 719
    "callable (T_CALLABLE)"    shift, and go to state 720
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    ')'       reduce using rule 178 (parameter_list)
    $default  reduce using rule 183 (optional_class_type)

    namespace_name              go to state 584
    parameter_list              go to state 1069
    non_empty_parameter_list    go to state 722
    parameter                   go to state 723
    optional_class_type         go to state 724
    fully_qualified_class_name  go to state 725


state 1062

  375 lexical_var_list: lexical_var_list ',' '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 375 (lexical_var_list)


state 1063

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  147 for_statement: ':' inner_statement_list . "endfor (T_ENDFOR)" ';'

    "endfor (T_ENDFOR)"  shift, and go to state 1070

    $default  reduce using rule 40 ($@4)

    $@4  go to state 404


state 1064

  149 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';' .

    $default  reduce using rule 149 (foreach_statement)


state 1065

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 . '{' inner_statement_list '}' $@27 additional_catches

    '{'  shift, and go to state 1071


state 1066

  230 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers "identifier (T_STRING)" .

    $default  reduce using rule 230 (trait_alias)


state 1067

  226 trait_reference_list: trait_reference_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 124
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    namespace_name              go to state 584
    fully_qualified_class_name  go to state 1072


state 1068

  249 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 249 (class_variable_declaration)


state 1069

  212 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@40 '(' parameter_list . ')' method_body

    ')'  shift, and go to state 1073


state 1070

  147 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" . ';'

    ';'  shift, and go to state 1074


state 1071

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' . inner_statement_list '}' $@27 additional_catches

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1075


state 1072

  226 trait_reference_list: trait_reference_list ',' fully_qualified_class_name .

    $default  reduce using rule 226 (trait_reference_list)


state 1073

  212 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@40 '(' parameter_list ')' . method_body

    ';'  shift, and go to state 1076
    '{'  shift, and go to state 1077

    method_body  go to state 1078


state 1074

  147 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" ';' .

    $default  reduce using rule 147 (for_statement)


state 1075

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list . '}' $@27 additional_catches

    '}'  shift, and go to state 1079

    $default  reduce using rule 40 ($@4)

    $@4  go to state 404


state 1076

  234 method_body: ';' .

    $default  reduce using rule 234 (method_body)


state 1077

  235 method_body: '{' . inner_statement_list '}'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1080


state 1078

  212 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@40 '(' parameter_list ')' method_body .

    $default  reduce using rule 212 (class_statement)


state 1079

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' . $@27 additional_catches

    $default  reduce using rule 100 ($@27)

    $@27  go to state 1081


state 1080

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  235 method_body: '{' inner_statement_list . '}'

    '}'  shift, and go to state 1082

    $default  reduce using rule 40 ($@4)

    $@4  go to state 404


state 1081

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 . additional_catches

    "catch (T_CATCH)"  shift, and go to state 1083

    $default  reduce using rule 106 (additional_catches)

    additional_catches            go to state 1084
    non_empty_additional_catches  go to state 1085
    additional_catch              go to state 1086


state 1082

  235 method_body: '{' inner_statement_list '}' .

    $default  reduce using rule 235 (method_body)


state 1083

  111 additional_catch: "catch (T_CATCH)" . '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' $@30 '{' inner_statement_list '}'

    '('  shift, and go to state 1087


state 1084

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 additional_catches .

    $default  reduce using rule 101 (catch_statement)


state 1085

  105 additional_catches: non_empty_additional_catches .
  108 non_empty_additional_catches: non_empty_additional_catches . additional_catch

    "catch (T_CATCH)"  shift, and go to state 1083

    $default  reduce using rule 105 (additional_catches)

    additional_catch  go to state 1088


state 1086

  107 non_empty_additional_catches: additional_catch .

    $default  reduce using rule 107 (non_empty_additional_catches)


state 1087

  111 additional_catch: "catch (T_CATCH)" '(' . fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' $@30 '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 124
    "namespace (T_NAMESPACE)"  shift, and go to state 582
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 583

    namespace_name              go to state 584
    fully_qualified_class_name  go to state 1089


state 1088

  108 non_empty_additional_catches: non_empty_additional_catches additional_catch .

    $default  reduce using rule 108 (non_empty_additional_catches)


state 1089

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name . @29 "variable (T_VARIABLE)" ')' $@30 '{' inner_statement_list '}'

    $default  reduce using rule 109 (@29)

    @29  go to state 1090


state 1090

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 . "variable (T_VARIABLE)" ')' $@30 '{' inner_statement_list '}'

    "variable (T_VARIABLE)"  shift, and go to state 1091


state 1091

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" . ')' $@30 '{' inner_statement_list '}'

    ')'  shift, and go to state 1092


state 1092

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' . $@30 '{' inner_statement_list '}'

    $default  reduce using rule 110 ($@30)

    $@30  go to state 1093


state 1093

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' $@30 . '{' inner_statement_list '}'

    '{'  shift, and go to state 1094


state 1094

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' $@30 '{' . inner_statement_list '}'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1095


state 1095

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' $@30 '{' inner_statement_list . '}'

    '}'  shift, and go to state 1096

    $default  reduce using rule 40 ($@4)

    $@4  go to state 404


state 1096

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' $@30 '{' inner_statement_list '}' .

    $default  reduce using rule 111 (additional_catch)
